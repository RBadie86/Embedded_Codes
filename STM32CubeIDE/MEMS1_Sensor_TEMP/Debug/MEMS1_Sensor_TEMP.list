
MEMS1_Sensor_TEMP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005da0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08005f30  08005f30  00006f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fc4  08005fc4  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005fc4  08005fc4  00006fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fcc  08005fcc  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fcc  08005fcc  00006fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005fd0  08005fd0  00006fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005fd4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  20000068  0800603c  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  0800603c  000072f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010bac  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002579  00000000  00000000  00017c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  0001a1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ba0  00000000  00000000  0001b0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027751  00000000  00000000  0001bc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ed3  00000000  00000000  000433d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed7db  00000000  00000000  000552ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00142a87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045dc  00000000  00000000  00142acc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001470a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005f18 	.word	0x08005f18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005f18 	.word	0x08005f18

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000564:	f001 f9d8 	bl	8001918 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000568:	f000 f82c 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056c:	f000 f8ac 	bl	80006c8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000570:	f000 f87a 	bl	8000668 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  MEMS_Init();
 8000574:	f000 f92c 	bl	80007d0 <MEMS_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	HTS221_HUM_GetHumidity(&EnvironmentSensor, &Hum);
 8000578:	490e      	ldr	r1, [pc, #56]	@ (80005b4 <main+0x54>)
 800057a:	480f      	ldr	r0, [pc, #60]	@ (80005b8 <main+0x58>)
 800057c:	f000 fd4a 	bl	8001014 <HTS221_HUM_GetHumidity>
	HTS221_TEMP_GetTemperature(&EnvironmentSensor, &Temp);
 8000580:	490e      	ldr	r1, [pc, #56]	@ (80005bc <main+0x5c>)
 8000582:	480d      	ldr	r0, [pc, #52]	@ (80005b8 <main+0x58>)
 8000584:	f000 fe03 	bl	800118e <HTS221_TEMP_GetTemperature>
	printf("HUM: %d, TEMP: %d \r\n", (int) Hum, (int) Temp);
 8000588:	4b0a      	ldr	r3, [pc, #40]	@ (80005b4 <main+0x54>)
 800058a:	edd3 7a00 	vldr	s15, [r3]
 800058e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8000592:	4b0a      	ldr	r3, [pc, #40]	@ (80005bc <main+0x5c>)
 8000594:	edd3 7a00 	vldr	s15, [r3]
 8000598:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800059c:	ee17 2a90 	vmov	r2, s15
 80005a0:	ee17 1a10 	vmov	r1, s14
 80005a4:	4806      	ldr	r0, [pc, #24]	@ (80005c0 <main+0x60>)
 80005a6:	f004 fe49 	bl	800523c <iprintf>
	HAL_Delay(200);  // Just for demonstration purpose in Output
 80005aa:	20c8      	movs	r0, #200	@ 0xc8
 80005ac:	f001 fa28 	bl	8001a00 <HAL_Delay>
	HTS221_HUM_GetHumidity(&EnvironmentSensor, &Hum);
 80005b0:	bf00      	nop
 80005b2:	e7e1      	b.n	8000578 <main+0x18>
 80005b4:	20000140 	.word	0x20000140
 80005b8:	2000010c 	.word	0x2000010c
 80005bc:	20000144 	.word	0x20000144
 80005c0:	08005f30 	.word	0x08005f30

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b096      	sub	sp, #88	@ 0x58
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	2244      	movs	r2, #68	@ 0x44
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f004 fe87 	bl	80052e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	463b      	mov	r3, r7
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
 80005e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005e6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005ea:	f002 fca7 	bl	8002f3c <HAL_PWREx_ControlVoltageScaling>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005f4:	f000 f94a 	bl	800088c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005f8:	2310      	movs	r3, #16
 80005fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005fc:	2301      	movs	r3, #1
 80005fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000604:	2360      	movs	r3, #96	@ 0x60
 8000606:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000608:	2302      	movs	r3, #2
 800060a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800060c:	2301      	movs	r3, #1
 800060e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000610:	2301      	movs	r3, #1
 8000612:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000614:	2328      	movs	r3, #40	@ 0x28
 8000616:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000618:	2307      	movs	r3, #7
 800061a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800061c:	2302      	movs	r3, #2
 800061e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000620:	2302      	movs	r3, #2
 8000622:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000624:	f107 0314 	add.w	r3, r7, #20
 8000628:	4618      	mov	r0, r3
 800062a:	f002 fcdd 	bl	8002fe8 <HAL_RCC_OscConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000634:	f000 f92a 	bl	800088c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000638:	230f      	movs	r3, #15
 800063a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063c:	2303      	movs	r3, #3
 800063e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800064c:	463b      	mov	r3, r7
 800064e:	2104      	movs	r1, #4
 8000650:	4618      	mov	r0, r3
 8000652:	f003 f8a5 	bl	80037a0 <HAL_RCC_ClockConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800065c:	f000 f916 	bl	800088c <Error_Handler>
  }
}
 8000660:	bf00      	nop
 8000662:	3758      	adds	r7, #88	@ 0x58
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800066c:	4b14      	ldr	r3, [pc, #80]	@ (80006c0 <MX_USART1_UART_Init+0x58>)
 800066e:	4a15      	ldr	r2, [pc, #84]	@ (80006c4 <MX_USART1_UART_Init+0x5c>)
 8000670:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000672:	4b13      	ldr	r3, [pc, #76]	@ (80006c0 <MX_USART1_UART_Init+0x58>)
 8000674:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000678:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800067a:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <MX_USART1_UART_Init+0x58>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000680:	4b0f      	ldr	r3, [pc, #60]	@ (80006c0 <MX_USART1_UART_Init+0x58>)
 8000682:	2200      	movs	r2, #0
 8000684:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000686:	4b0e      	ldr	r3, [pc, #56]	@ (80006c0 <MX_USART1_UART_Init+0x58>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800068c:	4b0c      	ldr	r3, [pc, #48]	@ (80006c0 <MX_USART1_UART_Init+0x58>)
 800068e:	220c      	movs	r2, #12
 8000690:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000692:	4b0b      	ldr	r3, [pc, #44]	@ (80006c0 <MX_USART1_UART_Init+0x58>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000698:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <MX_USART1_UART_Init+0x58>)
 800069a:	2200      	movs	r2, #0
 800069c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800069e:	4b08      	ldr	r3, [pc, #32]	@ (80006c0 <MX_USART1_UART_Init+0x58>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006a4:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <MX_USART1_UART_Init+0x58>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006aa:	4805      	ldr	r0, [pc, #20]	@ (80006c0 <MX_USART1_UART_Init+0x58>)
 80006ac:	f003 ff58 	bl	8004560 <HAL_UART_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006b6:	f000 f8e9 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000084 	.word	0x20000084
 80006c4:	40013800 	.word	0x40013800

080006c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08a      	sub	sp, #40	@ 0x28
 80006cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	4b38      	ldr	r3, [pc, #224]	@ (80007c0 <MX_GPIO_Init+0xf8>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e2:	4a37      	ldr	r2, [pc, #220]	@ (80007c0 <MX_GPIO_Init+0xf8>)
 80006e4:	f043 0304 	orr.w	r3, r3, #4
 80006e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ea:	4b35      	ldr	r3, [pc, #212]	@ (80007c0 <MX_GPIO_Init+0xf8>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ee:	f003 0304 	and.w	r3, r3, #4
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	4b32      	ldr	r3, [pc, #200]	@ (80007c0 <MX_GPIO_Init+0xf8>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fa:	4a31      	ldr	r2, [pc, #196]	@ (80007c0 <MX_GPIO_Init+0xf8>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000702:	4b2f      	ldr	r3, [pc, #188]	@ (80007c0 <MX_GPIO_Init+0xf8>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070e:	4b2c      	ldr	r3, [pc, #176]	@ (80007c0 <MX_GPIO_Init+0xf8>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000712:	4a2b      	ldr	r2, [pc, #172]	@ (80007c0 <MX_GPIO_Init+0xf8>)
 8000714:	f043 0302 	orr.w	r3, r3, #2
 8000718:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800071a:	4b29      	ldr	r3, [pc, #164]	@ (80007c0 <MX_GPIO_Init+0xf8>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071e:	f003 0302 	and.w	r3, r3, #2
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000726:	4b26      	ldr	r3, [pc, #152]	@ (80007c0 <MX_GPIO_Init+0xf8>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072a:	4a25      	ldr	r2, [pc, #148]	@ (80007c0 <MX_GPIO_Init+0xf8>)
 800072c:	f043 0310 	orr.w	r3, r3, #16
 8000730:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000732:	4b23      	ldr	r3, [pc, #140]	@ (80007c0 <MX_GPIO_Init+0xf8>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000736:	f003 0310 	and.w	r3, r3, #16
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073e:	4b20      	ldr	r3, [pc, #128]	@ (80007c0 <MX_GPIO_Init+0xf8>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000742:	4a1f      	ldr	r2, [pc, #124]	@ (80007c0 <MX_GPIO_Init+0xf8>)
 8000744:	f043 0308 	orr.w	r3, r3, #8
 8000748:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800074a:	4b1d      	ldr	r3, [pc, #116]	@ (80007c0 <MX_GPIO_Init+0xf8>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074e:	f003 0308 	and.w	r3, r3, #8
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 800075c:	4819      	ldr	r0, [pc, #100]	@ (80007c4 <MX_GPIO_Init+0xfc>)
 800075e:	f001 fd23 	bl	80021a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000768:	4817      	ldr	r0, [pc, #92]	@ (80007c8 <MX_GPIO_Init+0x100>)
 800076a:	f001 fd1d 	bl	80021a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : HTS221_DRDY_EXTI15_Pin */
  GPIO_InitStruct.Pin = HTS221_DRDY_EXTI15_Pin;
 800076e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000774:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HTS221_DRDY_EXTI15_GPIO_Port, &GPIO_InitStruct);
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	4619      	mov	r1, r3
 8000784:	4811      	ldr	r0, [pc, #68]	@ (80007cc <MX_GPIO_Init+0x104>)
 8000786:	f001 fa71 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_B_Pin */
  GPIO_InitStruct.Pin = LED_B_Pin;
 800078a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000790:	2301      	movs	r3, #1
 8000792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	4619      	mov	r1, r3
 80007a2:	4809      	ldr	r0, [pc, #36]	@ (80007c8 <MX_GPIO_Init+0x100>)
 80007a4:	f001 fa62 	bl	8001c6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2100      	movs	r1, #0
 80007ac:	2028      	movs	r0, #40	@ 0x28
 80007ae:	f001 fa26 	bl	8001bfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007b2:	2028      	movs	r0, #40	@ 0x28
 80007b4:	f001 fa3f 	bl	8001c36 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007b8:	bf00      	nop
 80007ba:	3728      	adds	r7, #40	@ 0x28
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40021000 	.word	0x40021000
 80007c4:	48000400 	.word	0x48000400
 80007c8:	48000800 	.word	0x48000800
 80007cc:	48000c00 	.word	0x48000c00

080007d0 <MEMS_Init>:

/* USER CODE BEGIN 4 */
static void MEMS_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	@ 0x28
 80007d4:	af00      	add	r7, sp, #0
  HTS221_IO_t IO;
  uint8_t ID;

  /* Link I2C functions to the HTS221 driver */

  IO.BusType     = HTS221_I2C_BUS;
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
  IO.Address     = HTS221_I2C_ADDRESS;
 80007da:	23bf      	movs	r3, #191	@ 0xbf
 80007dc:	753b      	strb	r3, [r7, #20]
  IO.Init        = BSP_I2C2_Init;
 80007de:	4b1a      	ldr	r3, [pc, #104]	@ (8000848 <MEMS_Init+0x78>)
 80007e0:	60bb      	str	r3, [r7, #8]
  IO.DeInit      = BSP_I2C2_DeInit;
 80007e2:	4b1a      	ldr	r3, [pc, #104]	@ (800084c <MEMS_Init+0x7c>)
 80007e4:	60fb      	str	r3, [r7, #12]
  IO.ReadReg     = BSP_I2C2_ReadReg;
 80007e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000850 <MEMS_Init+0x80>)
 80007e8:	61fb      	str	r3, [r7, #28]
  IO.WriteReg    = BSP_I2C2_WriteReg;
 80007ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000854 <MEMS_Init+0x84>)
 80007ec:	61bb      	str	r3, [r7, #24]
  IO.GetTick     = BSP_GetTick;
 80007ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000858 <MEMS_Init+0x88>)
 80007f0:	623b      	str	r3, [r7, #32]

  HTS221_RegisterBusIO(&EnvironmentSensor, &IO);
 80007f2:	f107 0308 	add.w	r3, r7, #8
 80007f6:	4619      	mov	r1, r3
 80007f8:	4818      	ldr	r0, [pc, #96]	@ (800085c <MEMS_Init+0x8c>)
 80007fa:	f000 fb5b 	bl	8000eb4 <HTS221_RegisterBusIO>

  /* Read the HTS221 WHO_AM_I register */

  HTS221_ReadID(&EnvironmentSensor, &ID);
 80007fe:	1dfb      	adds	r3, r7, #7
 8000800:	4619      	mov	r1, r3
 8000802:	4816      	ldr	r0, [pc, #88]	@ (800085c <MEMS_Init+0x8c>)
 8000804:	f000 fbbb 	bl	8000f7e <HTS221_ReadID>

  if (ID != HTS221_ID) {
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	2bbc      	cmp	r3, #188	@ 0xbc
 800080c:	d001      	beq.n	8000812 <MEMS_Init+0x42>

    Error_Handler();
 800080e:	f000 f83d 	bl	800088c <Error_Handler>

  }

  /* Initialize the HTS221 sensor */
  HTS221_Init(&EnvironmentSensor);
 8000812:	4812      	ldr	r0, [pc, #72]	@ (800085c <MEMS_Init+0x8c>)
 8000814:	f000 fb98 	bl	8000f48 <HTS221_Init>

  /* Configure the LHTS221 (ODR, scale and interrupt) */
  HTS221_HUM_SetOutputDataRate(&EnvironmentSensor, 7.0f); /* 7 Hz */
 8000818:	eeb1 0a0c 	vmov.f32	s0, #28	@ 0x40e00000  7.0
 800081c:	480f      	ldr	r0, [pc, #60]	@ (800085c <MEMS_Init+0x8c>)
 800081e:	f000 fbe9 	bl	8000ff4 <HTS221_HUM_SetOutputDataRate>
  HTS221_TEMP_SetOutputDataRate(&EnvironmentSensor, 7.0f);
 8000822:	eeb1 0a0c 	vmov.f32	s0, #28	@ 0x40e00000  7.0
 8000826:	480d      	ldr	r0, [pc, #52]	@ (800085c <MEMS_Init+0x8c>)
 8000828:	f000 fca1 	bl	800116e <HTS221_TEMP_SetOutputDataRate>
  HTS221_Enable_DRDY_Interrupt(&EnvironmentSensor);    /* Enable DRDY */
 800082c:	480b      	ldr	r0, [pc, #44]	@ (800085c <MEMS_Init+0x8c>)
 800082e:	f000 fd74 	bl	800131a <HTS221_Enable_DRDY_Interrupt>

  /* Start the HTS221 accelerometer */
  HTS221_HUM_Enable(&EnvironmentSensor);
 8000832:	480a      	ldr	r0, [pc, #40]	@ (800085c <MEMS_Init+0x8c>)
 8000834:	f000 fbb9 	bl	8000faa <HTS221_HUM_Enable>
  HTS221_TEMP_Enable(&EnvironmentSensor);
 8000838:	4808      	ldr	r0, [pc, #32]	@ (800085c <MEMS_Init+0x8c>)
 800083a:	f000 fc73 	bl	8001124 <HTS221_TEMP_Enable>
}
 800083e:	bf00      	nop
 8000840:	3728      	adds	r7, #40	@ 0x28
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	08000b91 	.word	0x08000b91
 800084c:	08000c0d 	.word	0x08000c0d
 8000850:	08000cc1 	.word	0x08000cc1
 8000854:	08000c5d 	.word	0x08000c5d
 8000858:	08000d25 	.word	0x08000d25
 800085c:	2000010c 	.word	0x2000010c

08000860 <_write>:


int _write(int fd, char * ptr, int len)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	b29a      	uxth	r2, r3
 8000870:	f04f 33ff 	mov.w	r3, #4294967295
 8000874:	68b9      	ldr	r1, [r7, #8]
 8000876:	4804      	ldr	r0, [pc, #16]	@ (8000888 <_write+0x28>)
 8000878:	f003 fec0 	bl	80045fc <HAL_UART_Transmit>
  return len;
 800087c:	687b      	ldr	r3, [r7, #4]
}
 800087e:	4618      	mov	r0, r3
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000084 	.word	0x20000084

0800088c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000890:	b672      	cpsid	i
}
 8000892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <Error_Handler+0x8>

08000898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089e:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <HAL_MspInit+0x44>)
 80008a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008a2:	4a0e      	ldr	r2, [pc, #56]	@ (80008dc <HAL_MspInit+0x44>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80008aa:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <HAL_MspInit+0x44>)
 80008ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <HAL_MspInit+0x44>)
 80008b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ba:	4a08      	ldr	r2, [pc, #32]	@ (80008dc <HAL_MspInit+0x44>)
 80008bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80008c2:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <HAL_MspInit+0x44>)
 80008c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ce:	bf00      	nop
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	40021000 	.word	0x40021000

080008e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b0ac      	sub	sp, #176	@ 0xb0
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	2288      	movs	r2, #136	@ 0x88
 80008fe:	2100      	movs	r1, #0
 8000900:	4618      	mov	r0, r3
 8000902:	f004 fcf0 	bl	80052e6 <memset>
  if(huart->Instance==USART1)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a21      	ldr	r2, [pc, #132]	@ (8000990 <HAL_UART_MspInit+0xb0>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d13a      	bne.n	8000986 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000910:	2301      	movs	r3, #1
 8000912:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000914:	2300      	movs	r3, #0
 8000916:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4618      	mov	r0, r3
 800091e:	f003 f963 	bl	8003be8 <HAL_RCCEx_PeriphCLKConfig>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000928:	f7ff ffb0 	bl	800088c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800092c:	4b19      	ldr	r3, [pc, #100]	@ (8000994 <HAL_UART_MspInit+0xb4>)
 800092e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000930:	4a18      	ldr	r2, [pc, #96]	@ (8000994 <HAL_UART_MspInit+0xb4>)
 8000932:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000936:	6613      	str	r3, [r2, #96]	@ 0x60
 8000938:	4b16      	ldr	r3, [pc, #88]	@ (8000994 <HAL_UART_MspInit+0xb4>)
 800093a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800093c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000944:	4b13      	ldr	r3, [pc, #76]	@ (8000994 <HAL_UART_MspInit+0xb4>)
 8000946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000948:	4a12      	ldr	r2, [pc, #72]	@ (8000994 <HAL_UART_MspInit+0xb4>)
 800094a:	f043 0302 	orr.w	r3, r3, #2
 800094e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000950:	4b10      	ldr	r3, [pc, #64]	@ (8000994 <HAL_UART_MspInit+0xb4>)
 8000952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000954:	f003 0302 	and.w	r3, r3, #2
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800095c:	23c0      	movs	r3, #192	@ 0xc0
 800095e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	2302      	movs	r3, #2
 8000964:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096e:	2303      	movs	r3, #3
 8000970:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000974:	2307      	movs	r3, #7
 8000976:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800097e:	4619      	mov	r1, r3
 8000980:	4805      	ldr	r0, [pc, #20]	@ (8000998 <HAL_UART_MspInit+0xb8>)
 8000982:	f001 f973 	bl	8001c6c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000986:	bf00      	nop
 8000988:	37b0      	adds	r7, #176	@ 0xb0
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40013800 	.word	0x40013800
 8000994:	40021000 	.word	0x40021000
 8000998:	48000400 	.word	0x48000400

0800099c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <NMI_Handler+0x4>

080009a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <HardFault_Handler+0x4>

080009ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b0:	bf00      	nop
 80009b2:	e7fd      	b.n	80009b0 <MemManage_Handler+0x4>

080009b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <BusFault_Handler+0x4>

080009bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <UsageFault_Handler+0x4>

080009c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f2:	f000 ffe5 	bl	80019c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}

080009fa <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80009fe:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000a02:	f001 fbe9 	bl	80021d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b086      	sub	sp, #24
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	60f8      	str	r0, [r7, #12]
 8000a12:	60b9      	str	r1, [r7, #8]
 8000a14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]
 8000a1a:	e00a      	b.n	8000a32 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a1c:	f3af 8000 	nop.w
 8000a20:	4601      	mov	r1, r0
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	1c5a      	adds	r2, r3, #1
 8000a26:	60ba      	str	r2, [r7, #8]
 8000a28:	b2ca      	uxtb	r2, r1
 8000a2a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	617b      	str	r3, [r7, #20]
 8000a32:	697a      	ldr	r2, [r7, #20]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	429a      	cmp	r2, r3
 8000a38:	dbf0      	blt.n	8000a1c <_read+0x12>
  }

  return len;
 8000a3a:	687b      	ldr	r3, [r7, #4]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3718      	adds	r7, #24
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a6c:	605a      	str	r2, [r3, #4]
  return 0;
 8000a6e:	2300      	movs	r3, #0
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <_isatty>:

int _isatty(int file)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a84:	2301      	movs	r3, #1
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a92:	b480      	push	{r7}
 8000a94:	b085      	sub	sp, #20
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	60f8      	str	r0, [r7, #12]
 8000a9a:	60b9      	str	r1, [r7, #8]
 8000a9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a9e:	2300      	movs	r3, #0
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab4:	4a14      	ldr	r2, [pc, #80]	@ (8000b08 <_sbrk+0x5c>)
 8000ab6:	4b15      	ldr	r3, [pc, #84]	@ (8000b0c <_sbrk+0x60>)
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ac0:	4b13      	ldr	r3, [pc, #76]	@ (8000b10 <_sbrk+0x64>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d102      	bne.n	8000ace <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac8:	4b11      	ldr	r3, [pc, #68]	@ (8000b10 <_sbrk+0x64>)
 8000aca:	4a12      	ldr	r2, [pc, #72]	@ (8000b14 <_sbrk+0x68>)
 8000acc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ace:	4b10      	ldr	r3, [pc, #64]	@ (8000b10 <_sbrk+0x64>)
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d207      	bcs.n	8000aec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000adc:	f004 fc52 	bl	8005384 <__errno>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aea:	e009      	b.n	8000b00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aec:	4b08      	ldr	r3, [pc, #32]	@ (8000b10 <_sbrk+0x64>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000af2:	4b07      	ldr	r3, [pc, #28]	@ (8000b10 <_sbrk+0x64>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4413      	add	r3, r2
 8000afa:	4a05      	ldr	r2, [pc, #20]	@ (8000b10 <_sbrk+0x64>)
 8000afc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000afe:	68fb      	ldr	r3, [r7, #12]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3718      	adds	r7, #24
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20018000 	.word	0x20018000
 8000b0c:	00000400 	.word	0x00000400
 8000b10:	20000148 	.word	0x20000148
 8000b14:	200002f8 	.word	0x200002f8

08000b18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b1c:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <SystemInit+0x20>)
 8000b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b22:	4a05      	ldr	r2, [pc, #20]	@ (8000b38 <SystemInit+0x20>)
 8000b24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b74 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b40:	f7ff ffea 	bl	8000b18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b44:	480c      	ldr	r0, [pc, #48]	@ (8000b78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b46:	490d      	ldr	r1, [pc, #52]	@ (8000b7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b48:	4a0d      	ldr	r2, [pc, #52]	@ (8000b80 <LoopForever+0xe>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b4c:	e002      	b.n	8000b54 <LoopCopyDataInit>

08000b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b52:	3304      	adds	r3, #4

08000b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b58:	d3f9      	bcc.n	8000b4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b5c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b88 <LoopForever+0x16>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b60:	e001      	b.n	8000b66 <LoopFillZerobss>

08000b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b64:	3204      	adds	r2, #4

08000b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b68:	d3fb      	bcc.n	8000b62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b6a:	f004 fc11 	bl	8005390 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b6e:	f7ff fcf7 	bl	8000560 <main>

08000b72 <LoopForever>:

LoopForever:
    b LoopForever
 8000b72:	e7fe      	b.n	8000b72 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b74:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b7c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b80:	08005fd4 	.word	0x08005fd4
  ldr r2, =_sbss
 8000b84:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b88:	200002f4 	.word	0x200002f4

08000b8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b8c:	e7fe      	b.n	8000b8c <ADC1_2_IRQHandler>
	...

08000b90 <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 8000b9a:	4b19      	ldr	r3, [pc, #100]	@ (8000c00 <BSP_I2C2_Init+0x70>)
 8000b9c:	4a19      	ldr	r2, [pc, #100]	@ (8000c04 <BSP_I2C2_Init+0x74>)
 8000b9e:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 8000ba0:	4b19      	ldr	r3, [pc, #100]	@ (8000c08 <BSP_I2C2_Init+0x78>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	1c5a      	adds	r2, r3, #1
 8000ba6:	4918      	ldr	r1, [pc, #96]	@ (8000c08 <BSP_I2C2_Init+0x78>)
 8000ba8:	600a      	str	r2, [r1, #0]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d122      	bne.n	8000bf4 <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8000bae:	4814      	ldr	r0, [pc, #80]	@ (8000c00 <BSP_I2C2_Init+0x70>)
 8000bb0:	f001 fe42 	bl	8002838 <HAL_I2C_GetState>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d11c      	bne.n	8000bf4 <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 8000bba:	4811      	ldr	r0, [pc, #68]	@ (8000c00 <BSP_I2C2_Init+0x70>)
 8000bbc:	f000 f8fe 	bl	8000dbc <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d116      	bne.n	8000bf4 <BSP_I2C2_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 8000bc6:	480e      	ldr	r0, [pc, #56]	@ (8000c00 <BSP_I2C2_Init+0x70>)
 8000bc8:	f000 f8b4 	bl	8000d34 <MX_I2C2_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d003      	beq.n	8000bda <BSP_I2C2_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000bd2:	f06f 0307 	mvn.w	r3, #7
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	e00c      	b.n	8000bf4 <BSP_I2C2_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4808      	ldr	r0, [pc, #32]	@ (8000c00 <BSP_I2C2_Init+0x70>)
 8000bde:	f002 f907 	bl	8002df0 <HAL_I2CEx_ConfigAnalogFilter>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d003      	beq.n	8000bf0 <BSP_I2C2_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000be8:	f06f 0307 	mvn.w	r3, #7
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	e001      	b.n	8000bf4 <BSP_I2C2_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000bf4:	687b      	ldr	r3, [r7, #4]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	2000014c 	.word	0x2000014c
 8000c04:	40005800 	.word	0x40005800
 8000c08:	200001a0 	.word	0x200001a0

08000c0c <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000c12:	2300      	movs	r3, #0
 8000c14:	607b      	str	r3, [r7, #4]

  if (I2C2InitCounter > 0)
 8000c16:	4b0f      	ldr	r3, [pc, #60]	@ (8000c54 <BSP_I2C2_DeInit+0x48>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d014      	beq.n	8000c48 <BSP_I2C2_DeInit+0x3c>
  {
    if (--I2C2InitCounter == 0)
 8000c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c54 <BSP_I2C2_DeInit+0x48>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	3b01      	subs	r3, #1
 8000c24:	4a0b      	ldr	r2, [pc, #44]	@ (8000c54 <BSP_I2C2_DeInit+0x48>)
 8000c26:	6013      	str	r3, [r2, #0]
 8000c28:	4b0a      	ldr	r3, [pc, #40]	@ (8000c54 <BSP_I2C2_DeInit+0x48>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d10b      	bne.n	8000c48 <BSP_I2C2_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C2_MspDeInit(&hi2c2);
 8000c30:	4809      	ldr	r0, [pc, #36]	@ (8000c58 <BSP_I2C2_DeInit+0x4c>)
 8000c32:	f000 f923 	bl	8000e7c <I2C2_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c2) != HAL_OK)
 8000c36:	4808      	ldr	r0, [pc, #32]	@ (8000c58 <BSP_I2C2_DeInit+0x4c>)
 8000c38:	f001 fb8c 	bl	8002354 <HAL_I2C_DeInit>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d002      	beq.n	8000c48 <BSP_I2C2_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000c42:	f06f 0307 	mvn.w	r3, #7
 8000c46:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000c48:	687b      	ldr	r3, [r7, #4]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200001a0 	.word	0x200001a0
 8000c58:	2000014c 	.word	0x2000014c

08000c5c <BSP_I2C2_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	@ 0x28
 8000c60:	af04      	add	r7, sp, #16
 8000c62:	60ba      	str	r2, [r7, #8]
 8000c64:	461a      	mov	r2, r3
 8000c66:	4603      	mov	r3, r0
 8000c68:	81fb      	strh	r3, [r7, #14]
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	81bb      	strh	r3, [r7, #12]
 8000c6e:	4613      	mov	r3, r2
 8000c70:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c2, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8000c76:	89ba      	ldrh	r2, [r7, #12]
 8000c78:	89f9      	ldrh	r1, [r7, #14]
 8000c7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c7e:	9302      	str	r3, [sp, #8]
 8000c80:	88fb      	ldrh	r3, [r7, #6]
 8000c82:	9301      	str	r3, [sp, #4]
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	9300      	str	r3, [sp, #0]
 8000c88:	2301      	movs	r3, #1
 8000c8a:	480c      	ldr	r0, [pc, #48]	@ (8000cbc <BSP_I2C2_WriteReg+0x60>)
 8000c8c:	f001 fba6 	bl	80023dc <HAL_I2C_Mem_Write>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d00c      	beq.n	8000cb0 <BSP_I2C2_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8000c96:	4809      	ldr	r0, [pc, #36]	@ (8000cbc <BSP_I2C2_WriteReg+0x60>)
 8000c98:	f001 fddc 	bl	8002854 <HAL_I2C_GetError>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b04      	cmp	r3, #4
 8000ca0:	d103      	bne.n	8000caa <BSP_I2C2_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000ca2:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8000ca6:	617b      	str	r3, [r7, #20]
 8000ca8:	e002      	b.n	8000cb0 <BSP_I2C2_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000caa:	f06f 0303 	mvn.w	r3, #3
 8000cae:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000cb0:	697b      	ldr	r3, [r7, #20]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	2000014c 	.word	0x2000014c

08000cc0 <BSP_I2C2_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	@ 0x28
 8000cc4:	af04      	add	r7, sp, #16
 8000cc6:	60ba      	str	r2, [r7, #8]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4603      	mov	r3, r0
 8000ccc:	81fb      	strh	r3, [r7, #14]
 8000cce:	460b      	mov	r3, r1
 8000cd0:	81bb      	strh	r3, [r7, #12]
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8000cda:	89ba      	ldrh	r2, [r7, #12]
 8000cdc:	89f9      	ldrh	r1, [r7, #14]
 8000cde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ce2:	9302      	str	r3, [sp, #8]
 8000ce4:	88fb      	ldrh	r3, [r7, #6]
 8000ce6:	9301      	str	r3, [sp, #4]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	9300      	str	r3, [sp, #0]
 8000cec:	2301      	movs	r3, #1
 8000cee:	480c      	ldr	r0, [pc, #48]	@ (8000d20 <BSP_I2C2_ReadReg+0x60>)
 8000cf0:	f001 fc88 	bl	8002604 <HAL_I2C_Mem_Read>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d00c      	beq.n	8000d14 <BSP_I2C2_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8000cfa:	4809      	ldr	r0, [pc, #36]	@ (8000d20 <BSP_I2C2_ReadReg+0x60>)
 8000cfc:	f001 fdaa 	bl	8002854 <HAL_I2C_GetError>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b04      	cmp	r3, #4
 8000d04:	d103      	bne.n	8000d0e <BSP_I2C2_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000d06:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8000d0a:	617b      	str	r3, [r7, #20]
 8000d0c:	e002      	b.n	8000d14 <BSP_I2C2_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000d0e:	f06f 0303 	mvn.w	r3, #3
 8000d12:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000d14:	697b      	ldr	r3, [r7, #20]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	2000014c 	.word	0x2000014c

08000d24 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000d28:	f000 fe5e 	bl	80019e8 <HAL_GetTick>
 8000d2c:	4603      	mov	r3, r0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <MX_I2C2_Init>:

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C2;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4a1c      	ldr	r2, [pc, #112]	@ (8000db4 <MX_I2C2_Init+0x80>)
 8000d44:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00F12981;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a1b      	ldr	r2, [pc, #108]	@ (8000db8 <MX_I2C2_Init+0x84>)
 8000d4a:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2201      	movs	r2, #1
 8000d56:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2200      	movs	r2, #0
 8000d62:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2200      	movs	r2, #0
 8000d74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f001 fa51 	bl	800221e <HAL_I2C_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d86:	2100      	movs	r1, #0
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f002 f831 	bl	8002df0 <HAL_I2CEx_ConfigAnalogFilter>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8000d98:	2100      	movs	r1, #0
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f002 f873 	bl	8002e86 <HAL_I2CEx_ConfigDigitalFilter>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40005800 	.word	0x40005800
 8000db8:	00f12981 	.word	0x00f12981

08000dbc <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b0ac      	sub	sp, #176	@ 0xb0
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2288      	movs	r2, #136	@ 0x88
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f004 fa8a 	bl	80052e6 <memset>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000dd2:	2380      	movs	r3, #128	@ 0x80
 8000dd4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	66bb      	str	r3, [r7, #104]	@ 0x68
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8000dda:	f107 0314 	add.w	r3, r7, #20
 8000dde:	4618      	mov	r0, r3
 8000de0:	f002 ff02 	bl	8003be8 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de4:	4b23      	ldr	r3, [pc, #140]	@ (8000e74 <I2C2_MspInit+0xb8>)
 8000de6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de8:	4a22      	ldr	r2, [pc, #136]	@ (8000e74 <I2C2_MspInit+0xb8>)
 8000dea:	f043 0302 	orr.w	r3, r3, #2
 8000dee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000df0:	4b20      	ldr	r3, [pc, #128]	@ (8000e74 <I2C2_MspInit+0xb8>)
 8000df2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df4:	f003 0302 	and.w	r3, r3, #2
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 8000dfc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e04:	2312      	movs	r3, #18
 8000e06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e10:	2303      	movs	r3, #3
 8000e12:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 8000e16:	2304      	movs	r3, #4
 8000e18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000e1c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e20:	4619      	mov	r1, r3
 8000e22:	4815      	ldr	r0, [pc, #84]	@ (8000e78 <I2C2_MspInit+0xbc>)
 8000e24:	f000 ff22 	bl	8001c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 8000e28:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e30:	2312      	movs	r3, #18
 8000e32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8000e42:	2304      	movs	r3, #4
 8000e44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000e48:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	480a      	ldr	r0, [pc, #40]	@ (8000e78 <I2C2_MspInit+0xbc>)
 8000e50:	f000 ff0c 	bl	8001c6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e54:	4b07      	ldr	r3, [pc, #28]	@ (8000e74 <I2C2_MspInit+0xb8>)
 8000e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e58:	4a06      	ldr	r2, [pc, #24]	@ (8000e74 <I2C2_MspInit+0xb8>)
 8000e5a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e60:	4b04      	ldr	r3, [pc, #16]	@ (8000e74 <I2C2_MspInit+0xb8>)
 8000e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	37b0      	adds	r7, #176	@ 0xb0
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40021000 	.word	0x40021000
 8000e78:	48000400 	.word	0x48000400

08000e7c <I2C2_MspDeInit>:

static void I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8000e84:	4b09      	ldr	r3, [pc, #36]	@ (8000eac <I2C2_MspDeInit+0x30>)
 8000e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e88:	4a08      	ldr	r2, [pc, #32]	@ (8000eac <I2C2_MspDeInit+0x30>)
 8000e8a:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000e8e:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_GPIO_PIN);
 8000e90:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e94:	4806      	ldr	r0, [pc, #24]	@ (8000eb0 <I2C2_MspDeInit+0x34>)
 8000e96:	f001 f893 	bl	8001fc0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 8000e9a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e9e:	4804      	ldr	r0, [pc, #16]	@ (8000eb0 <I2C2_MspDeInit+0x34>)
 8000ea0:	f001 f88e 	bl	8001fc0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	48000400 	.word	0x48000400

08000eb4 <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d103      	bne.n	8000ecc <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8000ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	e034      	b.n	8000f36 <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685a      	ldr	r2, [r3, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	689a      	ldr	r2, [r3, #8]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	7b1a      	ldrb	r2, [r3, #12]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	691a      	ldr	r2, [r3, #16]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	695a      	ldr	r2, [r3, #20]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	699a      	ldr	r2, [r3, #24]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a0e      	ldr	r2, [pc, #56]	@ (8000f40 <HTS221_RegisterBusIO+0x8c>)
 8000f08:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f44 <HTS221_RegisterBusIO+0x90>)
 8000f0e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	69da      	ldr	r2, [r3, #28]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d004      	beq.n	8000f30 <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4798      	blx	r3
 8000f2c:	60f8      	str	r0, [r7, #12]
 8000f2e:	e002      	b.n	8000f36 <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 8000f30:	f04f 33ff 	mov.w	r3, #4294967295
 8000f34:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000f36:	68fb      	ldr	r3, [r7, #12]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	080013b7 	.word	0x080013b7
 8000f44:	08001419 	.word	0x08001419

08000f48 <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d108      	bne.n	8000f6c <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f000 f9b1 	bl	80012c2 <HTS221_Initialize>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d002      	beq.n	8000f6c <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6a:	e004      	b.n	8000f76 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HTS221_OK;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HTS221_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
 8000f86:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3320      	adds	r3, #32
 8000f8c:	6839      	ldr	r1, [r7, #0]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 fb3f 	bl	8001612 <hts221_device_id_get>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d002      	beq.n	8000fa0 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8000f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9e:	e000      	b.n	8000fa2 <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d101      	bne.n	8000fc0 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	e015      	b.n	8000fec <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d10b      	bne.n	8000fe2 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3320      	adds	r3, #32
 8000fce:	2101      	movs	r1, #1
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 fb2f 	bl	8001634 <hts221_power_on_set>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d002      	beq.n	8000fe2 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8000fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe0:	e004      	b.n	8000fec <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return HTS221_OK;
 8000fea:	2300      	movs	r3, #0
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <HTS221_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8001000:	ed97 0a00 	vldr	s0, [r7]
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f000 f92c 	bl	8001262 <HTS221_SetOutputDataRate>
 800100a:	4603      	mov	r3, r0
}
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3320      	adds	r3, #32
 8001022:	f107 020c 	add.w	r2, r7, #12
 8001026:	4611      	mov	r1, r2
 8001028:	4618      	mov	r0, r3
 800102a:	f000 fbed 	bl	8001808 <hts221_hum_adc_point_0_get>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d002      	beq.n	800103a <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8001034:	f04f 33ff 	mov.w	r3, #4294967295
 8001038:	e06b      	b.n	8001112 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f103 0220 	add.w	r2, r3, #32
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	3304      	adds	r3, #4
 8001046:	4619      	mov	r1, r3
 8001048:	4610      	mov	r0, r2
 800104a:	f000 fb3f 	bl	80016cc <hts221_hum_rh_point_0_get>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d002      	beq.n	800105a <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8001054:	f04f 33ff 	mov.w	r3, #4294967295
 8001058:	e05b      	b.n	8001112 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f103 0220 	add.w	r2, r3, #32
 8001060:	f107 030c 	add.w	r3, r7, #12
 8001064:	3308      	adds	r3, #8
 8001066:	4619      	mov	r1, r3
 8001068:	4610      	mov	r0, r2
 800106a:	f000 fbef 	bl	800184c <hts221_hum_adc_point_1_get>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d002      	beq.n	800107a <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 8001074:	f04f 33ff 	mov.w	r3, #4294967295
 8001078:	e04b      	b.n	8001112 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f103 0220 	add.w	r2, r3, #32
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	330c      	adds	r3, #12
 8001086:	4619      	mov	r1, r3
 8001088:	4610      	mov	r0, r2
 800108a:	f000 fb3d 	bl	8001708 <hts221_hum_rh_point_1_get>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d002      	beq.n	800109a <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 8001094:	f04f 33ff 	mov.w	r3, #4294967295
 8001098:	e03b      	b.n	8001112 <HTS221_HUM_GetHumidity+0xfe>
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
 800109a:	2300      	movs	r3, #0
 800109c:	83bb      	strh	r3, [r7, #28]
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	3320      	adds	r3, #32
 80010a2:	f107 021c 	add.w	r2, r7, #28
 80010a6:	4611      	mov	r1, r2
 80010a8:	4618      	mov	r0, r3
 80010aa:	f000 fa6e 	bl	800158a <hts221_humidity_raw_get>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d002      	beq.n	80010ba <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 80010b4:	f04f 33ff 	mov.w	r3, #4294967295
 80010b8:	e02b      	b.n	8001112 <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 80010ba:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80010be:	ee07 3a90 	vmov	s15, r3
 80010c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010c6:	f107 030c 	add.w	r3, r7, #12
 80010ca:	eeb0 0a67 	vmov.f32	s0, s15
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 f938 	bl	8001344 <Linear_Interpolation>
 80010d4:	eef0 7a40 	vmov.f32	s15, s0
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	edd3 7a00 	vldr	s15, [r3]
 80010e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ec:	d503      	bpl.n	80010f6 <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	f04f 0200 	mov.w	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	edd3 7a00 	vldr	s15, [r3]
 80010fc:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800111c <HTS221_HUM_GetHumidity+0x108>
 8001100:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001108:	dd02      	ble.n	8001110 <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	4a04      	ldr	r2, [pc, #16]	@ (8001120 <HTS221_HUM_GetHumidity+0x10c>)
 800110e:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3720      	adds	r7, #32
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	42c80000 	.word	0x42c80000
 8001120:	42c80000 	.word	0x42c80000

08001124 <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001132:	2b01      	cmp	r3, #1
 8001134:	d101      	bne.n	800113a <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 8001136:	2300      	movs	r3, #0
 8001138:	e015      	b.n	8001166 <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001140:	2b00      	cmp	r3, #0
 8001142:	d10b      	bne.n	800115c <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3320      	adds	r3, #32
 8001148:	2101      	movs	r1, #1
 800114a:	4618      	mov	r0, r3
 800114c:	f000 fa72 	bl	8001634 <hts221_power_on_set>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d002      	beq.n	800115c <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 8001156:	f04f 33ff 	mov.w	r3, #4294967295
 800115a:	e004      	b.n	8001166 <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2201      	movs	r2, #1
 8001160:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return HTS221_OK;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HTS221_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
 8001176:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 800117a:	ed97 0a00 	vldr	s0, [r7]
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f000 f86f 	bl	8001262 <HTS221_SetOutputDataRate>
 8001184:	4603      	mov	r3, r0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b088      	sub	sp, #32
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
 8001196:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3320      	adds	r3, #32
 800119c:	f107 020c 	add.w	r2, r7, #12
 80011a0:	4611      	mov	r1, r2
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 fb74 	bl	8001890 <hts221_temp_adc_point_0_get>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d002      	beq.n	80011b4 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295
 80011b2:	e052      	b.n	800125a <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f103 0220 	add.w	r2, r3, #32
 80011ba:	f107 030c 	add.w	r3, r7, #12
 80011be:	3304      	adds	r3, #4
 80011c0:	4619      	mov	r1, r3
 80011c2:	4610      	mov	r0, r2
 80011c4:	f000 fabe 	bl	8001744 <hts221_temp_deg_point_0_get>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d002      	beq.n	80011d4 <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 80011ce:	f04f 33ff 	mov.w	r3, #4294967295
 80011d2:	e042      	b.n	800125a <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f103 0220 	add.w	r2, r3, #32
 80011da:	f107 030c 	add.w	r3, r7, #12
 80011de:	3308      	adds	r3, #8
 80011e0:	4619      	mov	r1, r3
 80011e2:	4610      	mov	r0, r2
 80011e4:	f000 fb76 	bl	80018d4 <hts221_temp_adc_point_1_get>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d002      	beq.n	80011f4 <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 80011ee:	f04f 33ff 	mov.w	r3, #4294967295
 80011f2:	e032      	b.n	800125a <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f103 0220 	add.w	r2, r3, #32
 80011fa:	f107 030c 	add.w	r3, r7, #12
 80011fe:	330c      	adds	r3, #12
 8001200:	4619      	mov	r1, r3
 8001202:	4610      	mov	r0, r2
 8001204:	f000 facf 	bl	80017a6 <hts221_temp_deg_point_1_get>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d002      	beq.n	8001214 <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 800120e:	f04f 33ff 	mov.w	r3, #4294967295
 8001212:	e022      	b.n	800125a <HTS221_TEMP_GetTemperature+0xcc>
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
 8001214:	2300      	movs	r3, #0
 8001216:	83bb      	strh	r3, [r7, #28]
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3320      	adds	r3, #32
 800121c:	f107 021c 	add.w	r2, r7, #28
 8001220:	4611      	mov	r1, r2
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f9d3 	bl	80015ce <hts221_temperature_raw_get>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d002      	beq.n	8001234 <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 800122e:	f04f 33ff 	mov.w	r3, #4294967295
 8001232:	e012      	b.n	800125a <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8001234:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001238:	ee07 3a90 	vmov	s15, r3
 800123c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	eeb0 0a67 	vmov.f32	s0, s15
 8001248:	4618      	mov	r0, r3
 800124a:	f000 f87b 	bl	8001344 <Linear_Interpolation>
 800124e:	eef0 7a40 	vmov.f32	s15, s0
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3720      	adds	r7, #32
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b084      	sub	sp, #16
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 800126e:	edd7 7a00 	vldr	s15, [r7]
 8001272:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001276:	eef4 7ac7 	vcmpe.f32	s15, s14
 800127a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127e:	d801      	bhi.n	8001284 <HTS221_SetOutputDataRate+0x22>
 8001280:	2301      	movs	r3, #1
 8001282:	e00b      	b.n	800129c <HTS221_SetOutputDataRate+0x3a>
 8001284:	edd7 7a00 	vldr	s15, [r7]
 8001288:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 800128c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001294:	d801      	bhi.n	800129a <HTS221_SetOutputDataRate+0x38>
 8001296:	2302      	movs	r3, #2
 8001298:	e000      	b.n	800129c <HTS221_SetOutputDataRate+0x3a>
 800129a:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 800129c:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	3320      	adds	r3, #32
 80012a2:	7bfa      	ldrb	r2, [r7, #15]
 80012a4:	4611      	mov	r1, r2
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 f923 	bl	80014f2 <hts221_data_rate_set>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d002      	beq.n	80012b8 <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295
 80012b6:	e000      	b.n	80012ba <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3320      	adds	r3, #32
 80012ce:	2100      	movs	r1, #0
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 f9af 	bl	8001634 <hts221_power_on_set>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d002      	beq.n	80012e2 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 80012dc:	f04f 33ff 	mov.w	r3, #4294967295
 80012e0:	e017      	b.n	8001312 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	3320      	adds	r3, #32
 80012e6:	2101      	movs	r1, #1
 80012e8:	4618      	mov	r0, r3
 80012ea:	f000 f928 	bl	800153e <hts221_block_data_update_set>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d002      	beq.n	80012fa <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 80012f4:	f04f 33ff 	mov.w	r3, #4294967295
 80012f8:	e00b      	b.n	8001312 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 80012fa:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ffaf 	bl	8001262 <HTS221_SetOutputDataRate>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d002      	beq.n	8001310 <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 800130a:	f04f 33ff 	mov.w	r3, #4294967295
 800130e:	e000      	b.n	8001312 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HTS221_Enable_DRDY_Interrupt>:
  * @brief  Enable HTS221 DRDY interrupt mode
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Enable_DRDY_Interrupt(HTS221_Object_t *pObj)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
  if (hts221_drdy_on_int_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3320      	adds	r3, #32
 8001326:	2101      	movs	r1, #1
 8001328:	4618      	mov	r0, r3
 800132a:	f000 f9a9 	bl	8001680 <hts221_drdy_on_int_set>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d002      	beq.n	800133a <HTS221_Enable_DRDY_Interrupt+0x20>
  {
    return HTS221_ERROR;
 8001334:	f04f 33ff 	mov.w	r3, #4294967295
 8001338:	e000      	b.n	800133c <HTS221_Enable_DRDY_Interrupt+0x22>
  }

  return HTS221_OK;
 800133a:	2300      	movs	r3, #0
}
 800133c:	4618      	mov	r0, r3
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	ed93 7a03 	vldr	s14, [r3, #12]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	edd3 7a01 	vldr	s15, [r3, #4]
 800135c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001360:	edd7 7a00 	vldr	s15, [r7]
 8001364:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	edd3 6a02 	vldr	s13, [r3, #8]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	edd3 7a01 	vldr	s15, [r3, #4]
 8001374:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	ed93 6a00 	vldr	s12, [r3]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	edd3 7a03 	vldr	s15, [r3, #12]
 8001384:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001388:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800138c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	edd3 6a02 	vldr	s13, [r3, #8]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	edd3 7a00 	vldr	s15, [r3]
 800139c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80013a0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80013a4:	eef0 7a66 	vmov.f32	s15, s13
}
 80013a8:	eeb0 0a67 	vmov.f32	s0, s15
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80013b6:	b590      	push	{r4, r7, lr}
 80013b8:	b087      	sub	sp, #28
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	60f8      	str	r0, [r7, #12]
 80013be:	607a      	str	r2, [r7, #4]
 80013c0:	461a      	mov	r2, r3
 80013c2:	460b      	mov	r3, r1
 80013c4:	72fb      	strb	r3, [r7, #11]
 80013c6:	4613      	mov	r3, r2
 80013c8:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d10e      	bne.n	80013f4 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	695c      	ldr	r4, [r3, #20]
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	7b1b      	ldrb	r3, [r3, #12]
 80013de:	4618      	mov	r0, r3
 80013e0:	7afb      	ldrb	r3, [r7, #11]
 80013e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	4619      	mov	r1, r3
 80013ea:	893b      	ldrh	r3, [r7, #8]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	47a0      	blx	r4
 80013f0:	4603      	mov	r3, r0
 80013f2:	e00d      	b.n	8001410 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	695c      	ldr	r4, [r3, #20]
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	7b1b      	ldrb	r3, [r3, #12]
 80013fc:	4618      	mov	r0, r3
 80013fe:	7afb      	ldrb	r3, [r7, #11]
 8001400:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001404:	b2db      	uxtb	r3, r3
 8001406:	4619      	mov	r1, r3
 8001408:	893b      	ldrh	r3, [r7, #8]
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	47a0      	blx	r4
 800140e:	4603      	mov	r3, r0
  }
}
 8001410:	4618      	mov	r0, r3
 8001412:	371c      	adds	r7, #28
 8001414:	46bd      	mov	sp, r7
 8001416:	bd90      	pop	{r4, r7, pc}

08001418 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001418:	b590      	push	{r4, r7, lr}
 800141a:	b087      	sub	sp, #28
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	607a      	str	r2, [r7, #4]
 8001422:	461a      	mov	r2, r3
 8001424:	460b      	mov	r3, r1
 8001426:	72fb      	strb	r3, [r7, #11]
 8001428:	4613      	mov	r3, r2
 800142a:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d10e      	bne.n	8001456 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	691c      	ldr	r4, [r3, #16]
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	7b1b      	ldrb	r3, [r3, #12]
 8001440:	4618      	mov	r0, r3
 8001442:	7afb      	ldrb	r3, [r7, #11]
 8001444:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001448:	b2db      	uxtb	r3, r3
 800144a:	4619      	mov	r1, r3
 800144c:	893b      	ldrh	r3, [r7, #8]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	47a0      	blx	r4
 8001452:	4603      	mov	r3, r0
 8001454:	e00d      	b.n	8001472 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	691c      	ldr	r4, [r3, #16]
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	7b1b      	ldrb	r3, [r3, #12]
 800145e:	4618      	mov	r0, r3
 8001460:	7afb      	ldrb	r3, [r7, #11]
 8001462:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001466:	b2db      	uxtb	r3, r3
 8001468:	4619      	mov	r1, r3
 800146a:	893b      	ldrh	r3, [r7, #8]
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	47a0      	blx	r4
 8001470:	4603      	mov	r3, r0
  }
}
 8001472:	4618      	mov	r0, r3
 8001474:	371c      	adds	r7, #28
 8001476:	46bd      	mov	sp, r7
 8001478:	bd90      	pop	{r4, r7, pc}

0800147a <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 800147a:	b590      	push	{r4, r7, lr}
 800147c:	b087      	sub	sp, #28
 800147e:	af00      	add	r7, sp, #0
 8001480:	60f8      	str	r0, [r7, #12]
 8001482:	607a      	str	r2, [r7, #4]
 8001484:	461a      	mov	r2, r3
 8001486:	460b      	mov	r3, r1
 8001488:	72fb      	strb	r3, [r7, #11]
 800148a:	4613      	mov	r3, r2
 800148c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) return -1;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d102      	bne.n	800149a <hts221_read_reg+0x20>
 8001494:	f04f 33ff 	mov.w	r3, #4294967295
 8001498:	e009      	b.n	80014ae <hts221_read_reg+0x34>

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	685c      	ldr	r4, [r3, #4]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	68d8      	ldr	r0, [r3, #12]
 80014a2:	893b      	ldrh	r3, [r7, #8]
 80014a4:	7af9      	ldrb	r1, [r7, #11]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	47a0      	blx	r4
 80014aa:	6178      	str	r0, [r7, #20]

  return ret;
 80014ac:	697b      	ldr	r3, [r7, #20]
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	371c      	adds	r7, #28
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd90      	pop	{r4, r7, pc}

080014b6 <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80014b6:	b590      	push	{r4, r7, lr}
 80014b8:	b087      	sub	sp, #28
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	60f8      	str	r0, [r7, #12]
 80014be:	607a      	str	r2, [r7, #4]
 80014c0:	461a      	mov	r2, r3
 80014c2:	460b      	mov	r3, r1
 80014c4:	72fb      	strb	r3, [r7, #11]
 80014c6:	4613      	mov	r3, r2
 80014c8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) return -1;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d102      	bne.n	80014d6 <hts221_write_reg+0x20>
 80014d0:	f04f 33ff 	mov.w	r3, #4294967295
 80014d4:	e009      	b.n	80014ea <hts221_write_reg+0x34>

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681c      	ldr	r4, [r3, #0]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	68d8      	ldr	r0, [r3, #12]
 80014de:	893b      	ldrh	r3, [r7, #8]
 80014e0:	7af9      	ldrb	r1, [r7, #11]
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	47a0      	blx	r4
 80014e6:	6178      	str	r0, [r7, #20]

  return ret;
 80014e8:	697b      	ldr	r3, [r7, #20]
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	371c      	adds	r7, #28
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd90      	pop	{r4, r7, pc}

080014f2 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(const stmdev_ctx_t *ctx, hts221_odr_t val)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b084      	sub	sp, #16
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
 80014fa:	460b      	mov	r3, r1
 80014fc:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80014fe:	f107 0208 	add.w	r2, r7, #8
 8001502:	2301      	movs	r3, #1
 8001504:	2120      	movs	r1, #32
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff ffb7 	bl	800147a <hts221_read_reg>
 800150c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d10f      	bne.n	8001534 <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8001514:	78fb      	ldrb	r3, [r7, #3]
 8001516:	f003 0303 	and.w	r3, r3, #3
 800151a:	b2da      	uxtb	r2, r3
 800151c:	7a3b      	ldrb	r3, [r7, #8]
 800151e:	f362 0301 	bfi	r3, r2, #0, #2
 8001522:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001524:	f107 0208 	add.w	r2, r7, #8
 8001528:	2301      	movs	r3, #1
 800152a:	2120      	movs	r1, #32
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ffc2 	bl	80014b6 <hts221_write_reg>
 8001532:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001534:	68fb      	ldr	r3, [r7, #12]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b084      	sub	sp, #16
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
 8001546:	460b      	mov	r3, r1
 8001548:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800154a:	f107 0208 	add.w	r2, r7, #8
 800154e:	2301      	movs	r3, #1
 8001550:	2120      	movs	r1, #32
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff ff91 	bl	800147a <hts221_read_reg>
 8001558:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d10f      	bne.n	8001580 <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8001560:	78fb      	ldrb	r3, [r7, #3]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	b2da      	uxtb	r2, r3
 8001568:	7a3b      	ldrb	r3, [r7, #8]
 800156a:	f362 0382 	bfi	r3, r2, #2, #1
 800156e:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001570:	f107 0208 	add.w	r2, r7, #8
 8001574:	2301      	movs	r3, #1
 8001576:	2120      	movs	r1, #32
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff ff9c 	bl	80014b6 <hts221_write_reg>
 800157e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001580:	68fb      	ldr	r3, [r7, #12]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b084      	sub	sp, #16
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8001594:	f107 0208 	add.w	r2, r7, #8
 8001598:	2302      	movs	r3, #2
 800159a:	2128      	movs	r1, #40	@ 0x28
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff ff6c 	bl	800147a <hts221_read_reg>
 80015a2:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80015a4:	7a7b      	ldrb	r3, [r7, #9]
 80015a6:	b21a      	sxth	r2, r3
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	021b      	lsls	r3, r3, #8
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	7a3a      	ldrb	r2, [r7, #8]
 80015ba:	4413      	add	r3, r2
 80015bc:	b29b      	uxth	r3, r3
 80015be:	b21a      	sxth	r2, r3
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	801a      	strh	r2, [r3, #0]

  return ret;
 80015c4:	68fb      	ldr	r3, [r7, #12]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b084      	sub	sp, #16
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
 80015d6:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 80015d8:	f107 0208 	add.w	r2, r7, #8
 80015dc:	2302      	movs	r3, #2
 80015de:	212a      	movs	r1, #42	@ 0x2a
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff ff4a 	bl	800147a <hts221_read_reg>
 80015e6:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80015e8:	7a7b      	ldrb	r3, [r7, #9]
 80015ea:	b21a      	sxth	r2, r3
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	021b      	lsls	r3, r3, #8
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	7a3a      	ldrb	r2, [r7, #8]
 80015fe:	4413      	add	r3, r2
 8001600:	b29b      	uxth	r3, r3
 8001602:	b21a      	sxth	r2, r3
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	801a      	strh	r2, [r3, #0]

  return ret;
 8001608:	68fb      	ldr	r3, [r7, #12]
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b084      	sub	sp, #16
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
 800161a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 800161c:	2301      	movs	r3, #1
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	210f      	movs	r1, #15
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff ff29 	bl	800147a <hts221_read_reg>
 8001628:	60f8      	str	r0, [r7, #12]

  return ret;
 800162a:	68fb      	ldr	r3, [r7, #12]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001640:	f107 0208 	add.w	r2, r7, #8
 8001644:	2301      	movs	r3, #1
 8001646:	2120      	movs	r1, #32
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff ff16 	bl	800147a <hts221_read_reg>
 800164e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d10f      	bne.n	8001676 <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 8001656:	78fb      	ldrb	r3, [r7, #3]
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	b2da      	uxtb	r2, r3
 800165e:	7a3b      	ldrb	r3, [r7, #8]
 8001660:	f362 13c7 	bfi	r3, r2, #7, #1
 8001664:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8001666:	f107 0208 	add.w	r2, r7, #8
 800166a:	2301      	movs	r3, #1
 800166c:	2120      	movs	r1, #32
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff ff21 	bl	80014b6 <hts221_write_reg>
 8001674:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001676:	68fb      	ldr	r3, [r7, #12]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <hts221_drdy_on_int_set>:
  * @param  val     change the values of drdy in reg CTRL_REG3
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_drdy_on_int_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg3_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG3, (uint8_t *) &reg, 1);
 800168c:	f107 0208 	add.w	r2, r7, #8
 8001690:	2301      	movs	r3, #1
 8001692:	2122      	movs	r1, #34	@ 0x22
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff fef0 	bl	800147a <hts221_read_reg>
 800169a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10f      	bne.n	80016c2 <hts221_drdy_on_int_set+0x42>
  {
    reg.drdy = val;
 80016a2:	78fb      	ldrb	r3, [r7, #3]
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	7a3b      	ldrb	r3, [r7, #8]
 80016ac:	f362 0382 	bfi	r3, r2, #2, #1
 80016b0:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG3, (uint8_t *) &reg, 1);
 80016b2:	f107 0208 	add.w	r2, r7, #8
 80016b6:	2301      	movs	r3, #1
 80016b8:	2122      	movs	r1, #34	@ 0x22
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff fefb 	bl	80014b6 <hts221_write_reg>
 80016c0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80016c2:	68fb      	ldr	r3, [r7, #12]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(const stmdev_ctx_t *ctx, float_t *val)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 80016d6:	f107 020b 	add.w	r2, r7, #11
 80016da:	2301      	movs	r3, #1
 80016dc:	2130      	movs	r1, #48	@ 0x30
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff fecb 	bl	800147a <hts221_read_reg>
 80016e4:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80016e6:	7afb      	ldrb	r3, [r7, #11]
 80016e8:	ee07 3a90 	vmov	s15, r3
 80016ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016f0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80016f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80016fe:	68fb      	ldr	r3, [r7, #12]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(const stmdev_ctx_t *ctx, float_t *val)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8001712:	f107 020b 	add.w	r2, r7, #11
 8001716:	2301      	movs	r3, #1
 8001718:	2131      	movs	r1, #49	@ 0x31
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff fead 	bl	800147a <hts221_read_reg>
 8001720:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8001722:	7afb      	ldrb	r3, [r7, #11]
 8001724:	ee07 3a90 	vmov	s15, r3
 8001728:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800172c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001730:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 800173a:	68fb      	ldr	r3, [r7, #12]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(const stmdev_ctx_t *ctx, float_t *val)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h;
  uint8_t coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 800174e:	f107 020f 	add.w	r2, r7, #15
 8001752:	2301      	movs	r3, #1
 8001754:	2132      	movs	r1, #50	@ 0x32
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff fe8f 	bl	800147a <hts221_read_reg>
 800175c:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d11b      	bne.n	800179c <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8001764:	f107 0210 	add.w	r2, r7, #16
 8001768:	2301      	movs	r3, #1
 800176a:	2135      	movs	r1, #53	@ 0x35
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff fe84 	bl	800147a <hts221_read_reg>
 8001772:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8001774:	7c3b      	ldrb	r3, [r7, #16]
 8001776:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800177a:	b2db      	uxtb	r3, r3
 800177c:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 800177e:	7cfb      	ldrb	r3, [r7, #19]
 8001780:	021b      	lsls	r3, r3, #8
 8001782:	7bfa      	ldrb	r2, [r7, #15]
 8001784:	4413      	add	r3, r2
 8001786:	ee07 3a90 	vmov	s15, r3
 800178a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800178e:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8001792:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 800179c:	697b      	ldr	r3, [r7, #20]
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(const stmdev_ctx_t *ctx, float_t *val)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b086      	sub	sp, #24
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
 80017ae:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h;
  uint8_t coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 80017b0:	f107 020f 	add.w	r2, r7, #15
 80017b4:	2301      	movs	r3, #1
 80017b6:	2133      	movs	r1, #51	@ 0x33
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff fe5e 	bl	800147a <hts221_read_reg>
 80017be:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d11b      	bne.n	80017fe <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 80017c6:	f107 0210 	add.w	r2, r7, #16
 80017ca:	2301      	movs	r3, #1
 80017cc:	2135      	movs	r1, #53	@ 0x35
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff fe53 	bl	800147a <hts221_read_reg>
 80017d4:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 80017d6:	7c3b      	ldrb	r3, [r7, #16]
 80017d8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 80017e0:	7cfb      	ldrb	r3, [r7, #19]
 80017e2:	021b      	lsls	r3, r3, #8
 80017e4:	7bfa      	ldrb	r2, [r7, #15]
 80017e6:	4413      	add	r3, r2
 80017e8:	ee07 3a90 	vmov	s15, r3
 80017ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017f0:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 80017f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 80017fe:	697b      	ldr	r3, [r7, #20]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(const stmdev_ctx_t *ctx, float_t *val)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8001812:	f107 0208 	add.w	r2, r7, #8
 8001816:	2302      	movs	r3, #2
 8001818:	2136      	movs	r1, #54	@ 0x36
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff fe2d 	bl	800147a <hts221_read_reg>
 8001820:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001822:	7a7b      	ldrb	r3, [r7, #9]
 8001824:	021b      	lsls	r3, r3, #8
 8001826:	b29b      	uxth	r3, r3
 8001828:	7a3a      	ldrb	r2, [r7, #8]
 800182a:	4413      	add	r3, r2
 800182c:	b29b      	uxth	r3, r3
 800182e:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001830:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001834:	ee07 3a90 	vmov	s15, r3
 8001838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8001842:	68fb      	ldr	r3, [r7, #12]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(const stmdev_ctx_t *ctx, float_t *val)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8001856:	f107 0208 	add.w	r2, r7, #8
 800185a:	2302      	movs	r3, #2
 800185c:	213a      	movs	r1, #58	@ 0x3a
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff fe0b 	bl	800147a <hts221_read_reg>
 8001864:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8001866:	7a7b      	ldrb	r3, [r7, #9]
 8001868:	021b      	lsls	r3, r3, #8
 800186a:	b29b      	uxth	r3, r3
 800186c:	7a3a      	ldrb	r2, [r7, #8]
 800186e:	4413      	add	r3, r2
 8001870:	b29b      	uxth	r3, r3
 8001872:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8001874:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001878:	ee07 3a90 	vmov	s15, r3
 800187c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8001886:	68fb      	ldr	r3, [r7, #12]
}
 8001888:	4618      	mov	r0, r3
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(const stmdev_ctx_t *ctx, float_t *val)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 800189a:	f107 0208 	add.w	r2, r7, #8
 800189e:	2302      	movs	r3, #2
 80018a0:	213c      	movs	r1, #60	@ 0x3c
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff fde9 	bl	800147a <hts221_read_reg>
 80018a8:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80018aa:	7a7b      	ldrb	r3, [r7, #9]
 80018ac:	021b      	lsls	r3, r3, #8
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	7a3a      	ldrb	r2, [r7, #8]
 80018b2:	4413      	add	r3, r2
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80018b8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80018bc:	ee07 3a90 	vmov	s15, r3
 80018c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80018ca:	68fb      	ldr	r3, [r7, #12]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(const stmdev_ctx_t *ctx, float_t *val)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 80018de:	f107 0208 	add.w	r2, r7, #8
 80018e2:	2302      	movs	r3, #2
 80018e4:	213e      	movs	r1, #62	@ 0x3e
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff fdc7 	bl	800147a <hts221_read_reg>
 80018ec:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80018ee:	7a7b      	ldrb	r3, [r7, #9]
 80018f0:	021b      	lsls	r3, r3, #8
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	7a3a      	ldrb	r2, [r7, #8]
 80018f6:	4413      	add	r3, r2
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80018fc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001900:	ee07 3a90 	vmov	s15, r3
 8001904:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 800190e:	68fb      	ldr	r3, [r7, #12]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001922:	2003      	movs	r0, #3
 8001924:	f000 f960 	bl	8001be8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001928:	2000      	movs	r0, #0
 800192a:	f000 f80d 	bl	8001948 <HAL_InitTick>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d002      	beq.n	800193a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	71fb      	strb	r3, [r7, #7]
 8001938:	e001      	b.n	800193e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800193a:	f7fe ffad 	bl	8000898 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800193e:	79fb      	ldrb	r3, [r7, #7]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001950:	2300      	movs	r3, #0
 8001952:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001954:	4b17      	ldr	r3, [pc, #92]	@ (80019b4 <HAL_InitTick+0x6c>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d023      	beq.n	80019a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800195c:	4b16      	ldr	r3, [pc, #88]	@ (80019b8 <HAL_InitTick+0x70>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4b14      	ldr	r3, [pc, #80]	@ (80019b4 <HAL_InitTick+0x6c>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	4619      	mov	r1, r3
 8001966:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800196a:	fbb3 f3f1 	udiv	r3, r3, r1
 800196e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001972:	4618      	mov	r0, r3
 8001974:	f000 f96d 	bl	8001c52 <HAL_SYSTICK_Config>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d10f      	bne.n	800199e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b0f      	cmp	r3, #15
 8001982:	d809      	bhi.n	8001998 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001984:	2200      	movs	r2, #0
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	f04f 30ff 	mov.w	r0, #4294967295
 800198c:	f000 f937 	bl	8001bfe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001990:	4a0a      	ldr	r2, [pc, #40]	@ (80019bc <HAL_InitTick+0x74>)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6013      	str	r3, [r2, #0]
 8001996:	e007      	b.n	80019a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	73fb      	strb	r3, [r7, #15]
 800199c:	e004      	b.n	80019a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	73fb      	strb	r3, [r7, #15]
 80019a2:	e001      	b.n	80019a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000008 	.word	0x20000008
 80019b8:	20000000 	.word	0x20000000
 80019bc:	20000004 	.word	0x20000004

080019c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019c4:	4b06      	ldr	r3, [pc, #24]	@ (80019e0 <HAL_IncTick+0x20>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	461a      	mov	r2, r3
 80019ca:	4b06      	ldr	r3, [pc, #24]	@ (80019e4 <HAL_IncTick+0x24>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4413      	add	r3, r2
 80019d0:	4a04      	ldr	r2, [pc, #16]	@ (80019e4 <HAL_IncTick+0x24>)
 80019d2:	6013      	str	r3, [r2, #0]
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	20000008 	.word	0x20000008
 80019e4:	200001a4 	.word	0x200001a4

080019e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return uwTick;
 80019ec:	4b03      	ldr	r3, [pc, #12]	@ (80019fc <HAL_GetTick+0x14>)
 80019ee:	681b      	ldr	r3, [r3, #0]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	200001a4 	.word	0x200001a4

08001a00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a08:	f7ff ffee 	bl	80019e8 <HAL_GetTick>
 8001a0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a18:	d005      	beq.n	8001a26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a44 <HAL_Delay+0x44>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4413      	add	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a26:	bf00      	nop
 8001a28:	f7ff ffde 	bl	80019e8 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d8f7      	bhi.n	8001a28 <HAL_Delay+0x28>
  {
  }
}
 8001a38:	bf00      	nop
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000008 	.word	0x20000008

08001a48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a58:	4b0c      	ldr	r3, [pc, #48]	@ (8001a8c <__NVIC_SetPriorityGrouping+0x44>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a64:	4013      	ands	r3, r2
 8001a66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a7a:	4a04      	ldr	r2, [pc, #16]	@ (8001a8c <__NVIC_SetPriorityGrouping+0x44>)
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	60d3      	str	r3, [r2, #12]
}
 8001a80:	bf00      	nop
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a94:	4b04      	ldr	r3, [pc, #16]	@ (8001aa8 <__NVIC_GetPriorityGrouping+0x18>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	0a1b      	lsrs	r3, r3, #8
 8001a9a:	f003 0307 	and.w	r3, r3, #7
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	db0b      	blt.n	8001ad6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	f003 021f 	and.w	r2, r3, #31
 8001ac4:	4907      	ldr	r1, [pc, #28]	@ (8001ae4 <__NVIC_EnableIRQ+0x38>)
 8001ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aca:	095b      	lsrs	r3, r3, #5
 8001acc:	2001      	movs	r0, #1
 8001ace:	fa00 f202 	lsl.w	r2, r0, r2
 8001ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	e000e100 	.word	0xe000e100

08001ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	6039      	str	r1, [r7, #0]
 8001af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	db0a      	blt.n	8001b12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	490c      	ldr	r1, [pc, #48]	@ (8001b34 <__NVIC_SetPriority+0x4c>)
 8001b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b06:	0112      	lsls	r2, r2, #4
 8001b08:	b2d2      	uxtb	r2, r2
 8001b0a:	440b      	add	r3, r1
 8001b0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b10:	e00a      	b.n	8001b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	4908      	ldr	r1, [pc, #32]	@ (8001b38 <__NVIC_SetPriority+0x50>)
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	3b04      	subs	r3, #4
 8001b20:	0112      	lsls	r2, r2, #4
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	440b      	add	r3, r1
 8001b26:	761a      	strb	r2, [r3, #24]
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	e000e100 	.word	0xe000e100
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b089      	sub	sp, #36	@ 0x24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f1c3 0307 	rsb	r3, r3, #7
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	bf28      	it	cs
 8001b5a:	2304      	movcs	r3, #4
 8001b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3304      	adds	r3, #4
 8001b62:	2b06      	cmp	r3, #6
 8001b64:	d902      	bls.n	8001b6c <NVIC_EncodePriority+0x30>
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3b03      	subs	r3, #3
 8001b6a:	e000      	b.n	8001b6e <NVIC_EncodePriority+0x32>
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b70:	f04f 32ff 	mov.w	r2, #4294967295
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43da      	mvns	r2, r3
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	401a      	ands	r2, r3
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b84:	f04f 31ff 	mov.w	r1, #4294967295
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8e:	43d9      	mvns	r1, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b94:	4313      	orrs	r3, r2
         );
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3724      	adds	r7, #36	@ 0x24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
	...

08001ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bb4:	d301      	bcc.n	8001bba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e00f      	b.n	8001bda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bba:	4a0a      	ldr	r2, [pc, #40]	@ (8001be4 <SysTick_Config+0x40>)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bc2:	210f      	movs	r1, #15
 8001bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc8:	f7ff ff8e 	bl	8001ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bcc:	4b05      	ldr	r3, [pc, #20]	@ (8001be4 <SysTick_Config+0x40>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bd2:	4b04      	ldr	r3, [pc, #16]	@ (8001be4 <SysTick_Config+0x40>)
 8001bd4:	2207      	movs	r2, #7
 8001bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	e000e010 	.word	0xe000e010

08001be8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7ff ff29 	bl	8001a48 <__NVIC_SetPriorityGrouping>
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b086      	sub	sp, #24
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	4603      	mov	r3, r0
 8001c06:	60b9      	str	r1, [r7, #8]
 8001c08:	607a      	str	r2, [r7, #4]
 8001c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c10:	f7ff ff3e 	bl	8001a90 <__NVIC_GetPriorityGrouping>
 8001c14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	68b9      	ldr	r1, [r7, #8]
 8001c1a:	6978      	ldr	r0, [r7, #20]
 8001c1c:	f7ff ff8e 	bl	8001b3c <NVIC_EncodePriority>
 8001c20:	4602      	mov	r2, r0
 8001c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c26:	4611      	mov	r1, r2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff ff5d 	bl	8001ae8 <__NVIC_SetPriority>
}
 8001c2e:	bf00      	nop
 8001c30:	3718      	adds	r7, #24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff ff31 	bl	8001aac <__NVIC_EnableIRQ>
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7ff ffa2 	bl	8001ba4 <SysTick_Config>
 8001c60:	4603      	mov	r3, r0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
	...

08001c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b087      	sub	sp, #28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c7a:	e17f      	b.n	8001f7c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	2101      	movs	r1, #1
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	fa01 f303 	lsl.w	r3, r1, r3
 8001c88:	4013      	ands	r3, r2
 8001c8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 8171 	beq.w	8001f76 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 0303 	and.w	r3, r3, #3
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d005      	beq.n	8001cac <HAL_GPIO_Init+0x40>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 0303 	and.w	r3, r3, #3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d130      	bne.n	8001d0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	2203      	movs	r2, #3
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	68da      	ldr	r2, [r3, #12]
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43db      	mvns	r3, r3
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	091b      	lsrs	r3, r3, #4
 8001cf8:	f003 0201 	and.w	r2, r3, #1
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	2b03      	cmp	r3, #3
 8001d18:	d118      	bne.n	8001d4c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001d20:	2201      	movs	r2, #1
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	08db      	lsrs	r3, r3, #3
 8001d36:	f003 0201 	and.w	r2, r3, #1
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	2b03      	cmp	r3, #3
 8001d56:	d017      	beq.n	8001d88 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	2203      	movs	r2, #3
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 0303 	and.w	r3, r3, #3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d123      	bne.n	8001ddc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	08da      	lsrs	r2, r3, #3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3208      	adds	r2, #8
 8001d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	220f      	movs	r2, #15
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	4013      	ands	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	691a      	ldr	r2, [r3, #16]
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	08da      	lsrs	r2, r3, #3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	3208      	adds	r2, #8
 8001dd6:	6939      	ldr	r1, [r7, #16]
 8001dd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	2203      	movs	r2, #3
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4013      	ands	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 0203 	and.w	r2, r3, #3
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f000 80ac 	beq.w	8001f76 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e1e:	4b5f      	ldr	r3, [pc, #380]	@ (8001f9c <HAL_GPIO_Init+0x330>)
 8001e20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e22:	4a5e      	ldr	r2, [pc, #376]	@ (8001f9c <HAL_GPIO_Init+0x330>)
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e2a:	4b5c      	ldr	r3, [pc, #368]	@ (8001f9c <HAL_GPIO_Init+0x330>)
 8001e2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	60bb      	str	r3, [r7, #8]
 8001e34:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e36:	4a5a      	ldr	r2, [pc, #360]	@ (8001fa0 <HAL_GPIO_Init+0x334>)
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	089b      	lsrs	r3, r3, #2
 8001e3c:	3302      	adds	r3, #2
 8001e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e42:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	220f      	movs	r2, #15
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43db      	mvns	r3, r3
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	4013      	ands	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e60:	d025      	beq.n	8001eae <HAL_GPIO_Init+0x242>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a4f      	ldr	r2, [pc, #316]	@ (8001fa4 <HAL_GPIO_Init+0x338>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d01f      	beq.n	8001eaa <HAL_GPIO_Init+0x23e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a4e      	ldr	r2, [pc, #312]	@ (8001fa8 <HAL_GPIO_Init+0x33c>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d019      	beq.n	8001ea6 <HAL_GPIO_Init+0x23a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a4d      	ldr	r2, [pc, #308]	@ (8001fac <HAL_GPIO_Init+0x340>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d013      	beq.n	8001ea2 <HAL_GPIO_Init+0x236>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a4c      	ldr	r2, [pc, #304]	@ (8001fb0 <HAL_GPIO_Init+0x344>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d00d      	beq.n	8001e9e <HAL_GPIO_Init+0x232>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a4b      	ldr	r2, [pc, #300]	@ (8001fb4 <HAL_GPIO_Init+0x348>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d007      	beq.n	8001e9a <HAL_GPIO_Init+0x22e>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a4a      	ldr	r2, [pc, #296]	@ (8001fb8 <HAL_GPIO_Init+0x34c>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d101      	bne.n	8001e96 <HAL_GPIO_Init+0x22a>
 8001e92:	2306      	movs	r3, #6
 8001e94:	e00c      	b.n	8001eb0 <HAL_GPIO_Init+0x244>
 8001e96:	2307      	movs	r3, #7
 8001e98:	e00a      	b.n	8001eb0 <HAL_GPIO_Init+0x244>
 8001e9a:	2305      	movs	r3, #5
 8001e9c:	e008      	b.n	8001eb0 <HAL_GPIO_Init+0x244>
 8001e9e:	2304      	movs	r3, #4
 8001ea0:	e006      	b.n	8001eb0 <HAL_GPIO_Init+0x244>
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e004      	b.n	8001eb0 <HAL_GPIO_Init+0x244>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	e002      	b.n	8001eb0 <HAL_GPIO_Init+0x244>
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e000      	b.n	8001eb0 <HAL_GPIO_Init+0x244>
 8001eae:	2300      	movs	r3, #0
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	f002 0203 	and.w	r2, r2, #3
 8001eb6:	0092      	lsls	r2, r2, #2
 8001eb8:	4093      	lsls	r3, r2
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ec0:	4937      	ldr	r1, [pc, #220]	@ (8001fa0 <HAL_GPIO_Init+0x334>)
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	089b      	lsrs	r3, r3, #2
 8001ec6:	3302      	adds	r3, #2
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ece:	4b3b      	ldr	r3, [pc, #236]	@ (8001fbc <HAL_GPIO_Init+0x350>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	4013      	ands	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ef2:	4a32      	ldr	r2, [pc, #200]	@ (8001fbc <HAL_GPIO_Init+0x350>)
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ef8:	4b30      	ldr	r3, [pc, #192]	@ (8001fbc <HAL_GPIO_Init+0x350>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	43db      	mvns	r3, r3
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4013      	ands	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f1c:	4a27      	ldr	r2, [pc, #156]	@ (8001fbc <HAL_GPIO_Init+0x350>)
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f22:	4b26      	ldr	r3, [pc, #152]	@ (8001fbc <HAL_GPIO_Init+0x350>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f46:	4a1d      	ldr	r2, [pc, #116]	@ (8001fbc <HAL_GPIO_Init+0x350>)
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fbc <HAL_GPIO_Init+0x350>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	43db      	mvns	r3, r3
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f70:	4a12      	ldr	r2, [pc, #72]	@ (8001fbc <HAL_GPIO_Init+0x350>)
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	fa22 f303 	lsr.w	r3, r2, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f47f ae78 	bne.w	8001c7c <HAL_GPIO_Init+0x10>
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	bf00      	nop
 8001f90:	371c      	adds	r7, #28
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40010000 	.word	0x40010000
 8001fa4:	48000400 	.word	0x48000400
 8001fa8:	48000800 	.word	0x48000800
 8001fac:	48000c00 	.word	0x48000c00
 8001fb0:	48001000 	.word	0x48001000
 8001fb4:	48001400 	.word	0x48001400
 8001fb8:	48001800 	.word	0x48001800
 8001fbc:	40010400 	.word	0x40010400

08001fc0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b087      	sub	sp, #28
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001fce:	e0cd      	b.n	800216c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 80c0 	beq.w	8002166 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001fe6:	4a68      	ldr	r2, [pc, #416]	@ (8002188 <HAL_GPIO_DeInit+0x1c8>)
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	089b      	lsrs	r3, r3, #2
 8001fec:	3302      	adds	r3, #2
 8001fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	220f      	movs	r2, #15
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	4013      	ands	r3, r2
 8002006:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800200e:	d025      	beq.n	800205c <HAL_GPIO_DeInit+0x9c>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a5e      	ldr	r2, [pc, #376]	@ (800218c <HAL_GPIO_DeInit+0x1cc>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d01f      	beq.n	8002058 <HAL_GPIO_DeInit+0x98>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a5d      	ldr	r2, [pc, #372]	@ (8002190 <HAL_GPIO_DeInit+0x1d0>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d019      	beq.n	8002054 <HAL_GPIO_DeInit+0x94>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a5c      	ldr	r2, [pc, #368]	@ (8002194 <HAL_GPIO_DeInit+0x1d4>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d013      	beq.n	8002050 <HAL_GPIO_DeInit+0x90>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a5b      	ldr	r2, [pc, #364]	@ (8002198 <HAL_GPIO_DeInit+0x1d8>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d00d      	beq.n	800204c <HAL_GPIO_DeInit+0x8c>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a5a      	ldr	r2, [pc, #360]	@ (800219c <HAL_GPIO_DeInit+0x1dc>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d007      	beq.n	8002048 <HAL_GPIO_DeInit+0x88>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a59      	ldr	r2, [pc, #356]	@ (80021a0 <HAL_GPIO_DeInit+0x1e0>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d101      	bne.n	8002044 <HAL_GPIO_DeInit+0x84>
 8002040:	2306      	movs	r3, #6
 8002042:	e00c      	b.n	800205e <HAL_GPIO_DeInit+0x9e>
 8002044:	2307      	movs	r3, #7
 8002046:	e00a      	b.n	800205e <HAL_GPIO_DeInit+0x9e>
 8002048:	2305      	movs	r3, #5
 800204a:	e008      	b.n	800205e <HAL_GPIO_DeInit+0x9e>
 800204c:	2304      	movs	r3, #4
 800204e:	e006      	b.n	800205e <HAL_GPIO_DeInit+0x9e>
 8002050:	2303      	movs	r3, #3
 8002052:	e004      	b.n	800205e <HAL_GPIO_DeInit+0x9e>
 8002054:	2302      	movs	r3, #2
 8002056:	e002      	b.n	800205e <HAL_GPIO_DeInit+0x9e>
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <HAL_GPIO_DeInit+0x9e>
 800205c:	2300      	movs	r3, #0
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	f002 0203 	and.w	r2, r2, #3
 8002064:	0092      	lsls	r2, r2, #2
 8002066:	4093      	lsls	r3, r2
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	429a      	cmp	r2, r3
 800206c:	d132      	bne.n	80020d4 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800206e:	4b4d      	ldr	r3, [pc, #308]	@ (80021a4 <HAL_GPIO_DeInit+0x1e4>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	43db      	mvns	r3, r3
 8002076:	494b      	ldr	r1, [pc, #300]	@ (80021a4 <HAL_GPIO_DeInit+0x1e4>)
 8002078:	4013      	ands	r3, r2
 800207a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800207c:	4b49      	ldr	r3, [pc, #292]	@ (80021a4 <HAL_GPIO_DeInit+0x1e4>)
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	43db      	mvns	r3, r3
 8002084:	4947      	ldr	r1, [pc, #284]	@ (80021a4 <HAL_GPIO_DeInit+0x1e4>)
 8002086:	4013      	ands	r3, r2
 8002088:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800208a:	4b46      	ldr	r3, [pc, #280]	@ (80021a4 <HAL_GPIO_DeInit+0x1e4>)
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	43db      	mvns	r3, r3
 8002092:	4944      	ldr	r1, [pc, #272]	@ (80021a4 <HAL_GPIO_DeInit+0x1e4>)
 8002094:	4013      	ands	r3, r2
 8002096:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002098:	4b42      	ldr	r3, [pc, #264]	@ (80021a4 <HAL_GPIO_DeInit+0x1e4>)
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	43db      	mvns	r3, r3
 80020a0:	4940      	ldr	r1, [pc, #256]	@ (80021a4 <HAL_GPIO_DeInit+0x1e4>)
 80020a2:	4013      	ands	r3, r2
 80020a4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f003 0303 	and.w	r3, r3, #3
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	220f      	movs	r2, #15
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80020b6:	4a34      	ldr	r2, [pc, #208]	@ (8002188 <HAL_GPIO_DeInit+0x1c8>)
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	089b      	lsrs	r3, r3, #2
 80020bc:	3302      	adds	r3, #2
 80020be:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	43da      	mvns	r2, r3
 80020c6:	4830      	ldr	r0, [pc, #192]	@ (8002188 <HAL_GPIO_DeInit+0x1c8>)
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	089b      	lsrs	r3, r3, #2
 80020cc:	400a      	ands	r2, r1
 80020ce:	3302      	adds	r3, #2
 80020d0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	2103      	movs	r1, #3
 80020de:	fa01 f303 	lsl.w	r3, r1, r3
 80020e2:	431a      	orrs	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	08da      	lsrs	r2, r3, #3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3208      	adds	r2, #8
 80020f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	220f      	movs	r2, #15
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43db      	mvns	r3, r3
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	08d2      	lsrs	r2, r2, #3
 8002108:	4019      	ands	r1, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	3208      	adds	r2, #8
 800210e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	2103      	movs	r1, #3
 800211c:	fa01 f303 	lsl.w	r3, r1, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	401a      	ands	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	2101      	movs	r1, #1
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	fa01 f303 	lsl.w	r3, r1, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	401a      	ands	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68da      	ldr	r2, [r3, #12]
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	2103      	movs	r1, #3
 8002146:	fa01 f303 	lsl.w	r3, r1, r3
 800214a:	43db      	mvns	r3, r3
 800214c:	401a      	ands	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002156:	2101      	movs	r1, #1
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	fa01 f303 	lsl.w	r3, r1, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	401a      	ands	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	3301      	adds	r3, #1
 800216a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	fa22 f303 	lsr.w	r3, r2, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	f47f af2b 	bne.w	8001fd0 <HAL_GPIO_DeInit+0x10>
  }
}
 800217a:	bf00      	nop
 800217c:	bf00      	nop
 800217e:	371c      	adds	r7, #28
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	40010000 	.word	0x40010000
 800218c:	48000400 	.word	0x48000400
 8002190:	48000800 	.word	0x48000800
 8002194:	48000c00 	.word	0x48000c00
 8002198:	48001000 	.word	0x48001000
 800219c:	48001400 	.word	0x48001400
 80021a0:	48001800 	.word	0x48001800
 80021a4:	40010400 	.word	0x40010400

080021a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	807b      	strh	r3, [r7, #2]
 80021b4:	4613      	mov	r3, r2
 80021b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021b8:	787b      	ldrb	r3, [r7, #1]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021be:	887a      	ldrh	r2, [r7, #2]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021c4:	e002      	b.n	80021cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021c6:	887a      	ldrh	r2, [r7, #2]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	4603      	mov	r3, r0
 80021e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021e2:	4b08      	ldr	r3, [pc, #32]	@ (8002204 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021e4:	695a      	ldr	r2, [r3, #20]
 80021e6:	88fb      	ldrh	r3, [r7, #6]
 80021e8:	4013      	ands	r3, r2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d006      	beq.n	80021fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021ee:	4a05      	ldr	r2, [pc, #20]	@ (8002204 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021f0:	88fb      	ldrh	r3, [r7, #6]
 80021f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021f4:	88fb      	ldrh	r3, [r7, #6]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f000 f806 	bl	8002208 <HAL_GPIO_EXTI_Callback>
  }
}
 80021fc:	bf00      	nop
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40010400 	.word	0x40010400

08002208 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b082      	sub	sp, #8
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e08d      	b.n	800234c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	d106      	bne.n	800224a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 f8b4 	bl	80023b2 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2224      	movs	r2, #36	@ 0x24
 800224e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 0201 	bic.w	r2, r2, #1
 8002260:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800226e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800227e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d107      	bne.n	8002298 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002294:	609a      	str	r2, [r3, #8]
 8002296:	e006      	b.n	80022a6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80022a4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d108      	bne.n	80022c0 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	e007      	b.n	80022d0 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022ce:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6812      	ldr	r2, [r2, #0]
 80022da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80022de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022e2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68da      	ldr	r2, [r3, #12]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022f2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691a      	ldr	r2, [r3, #16]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	430a      	orrs	r2, r1
 800230c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69d9      	ldr	r1, [r3, #28]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a1a      	ldr	r2, [r3, #32]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f042 0201 	orr.w	r2, r2, #1
 800232c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2220      	movs	r2, #32
 8002338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e021      	b.n	80023aa <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2224      	movs	r2, #36	@ 0x24
 800236a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 0201 	bic.w	r2, r2, #1
 800237c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f821 	bl	80023c6 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b083      	sub	sp, #12
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
	...

080023dc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af02      	add	r7, sp, #8
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	4608      	mov	r0, r1
 80023e6:	4611      	mov	r1, r2
 80023e8:	461a      	mov	r2, r3
 80023ea:	4603      	mov	r3, r0
 80023ec:	817b      	strh	r3, [r7, #10]
 80023ee:	460b      	mov	r3, r1
 80023f0:	813b      	strh	r3, [r7, #8]
 80023f2:	4613      	mov	r3, r2
 80023f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b20      	cmp	r3, #32
 8002400:	f040 80f9 	bne.w	80025f6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002404:	6a3b      	ldr	r3, [r7, #32]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d002      	beq.n	8002410 <HAL_I2C_Mem_Write+0x34>
 800240a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800240c:	2b00      	cmp	r3, #0
 800240e:	d105      	bne.n	800241c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002416:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0ed      	b.n	80025f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002422:	2b01      	cmp	r3, #1
 8002424:	d101      	bne.n	800242a <HAL_I2C_Mem_Write+0x4e>
 8002426:	2302      	movs	r3, #2
 8002428:	e0e6      	b.n	80025f8 <HAL_I2C_Mem_Write+0x21c>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002432:	f7ff fad9 	bl	80019e8 <HAL_GetTick>
 8002436:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	2319      	movs	r3, #25
 800243e:	2201      	movs	r2, #1
 8002440:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f000 fadd 	bl	8002a04 <I2C_WaitOnFlagUntilTimeout>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e0d1      	b.n	80025f8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2221      	movs	r2, #33	@ 0x21
 8002458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2240      	movs	r2, #64	@ 0x40
 8002460:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6a3a      	ldr	r2, [r7, #32]
 800246e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002474:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800247c:	88f8      	ldrh	r0, [r7, #6]
 800247e:	893a      	ldrh	r2, [r7, #8]
 8002480:	8979      	ldrh	r1, [r7, #10]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	9301      	str	r3, [sp, #4]
 8002486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	4603      	mov	r3, r0
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 f9ed 	bl	800286c <I2C_RequestMemoryWrite>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e0a9      	b.n	80025f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	2bff      	cmp	r3, #255	@ 0xff
 80024ac:	d90e      	bls.n	80024cc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	22ff      	movs	r2, #255	@ 0xff
 80024b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	8979      	ldrh	r1, [r7, #10]
 80024bc:	2300      	movs	r3, #0
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f000 fc61 	bl	8002d8c <I2C_TransferConfig>
 80024ca:	e00f      	b.n	80024ec <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	8979      	ldrh	r1, [r7, #10]
 80024de:	2300      	movs	r3, #0
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 fc50 	bl	8002d8c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f000 fae0 	bl	8002ab6 <I2C_WaitOnTXISFlagUntilTimeout>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e07b      	b.n	80025f8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002504:	781a      	ldrb	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002510:	1c5a      	adds	r2, r3, #1
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800251a:	b29b      	uxth	r3, r3
 800251c:	3b01      	subs	r3, #1
 800251e:	b29a      	uxth	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002528:	3b01      	subs	r3, #1
 800252a:	b29a      	uxth	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002534:	b29b      	uxth	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d034      	beq.n	80025a4 <HAL_I2C_Mem_Write+0x1c8>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800253e:	2b00      	cmp	r3, #0
 8002540:	d130      	bne.n	80025a4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002548:	2200      	movs	r2, #0
 800254a:	2180      	movs	r1, #128	@ 0x80
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f000 fa59 	bl	8002a04 <I2C_WaitOnFlagUntilTimeout>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e04d      	b.n	80025f8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002560:	b29b      	uxth	r3, r3
 8002562:	2bff      	cmp	r3, #255	@ 0xff
 8002564:	d90e      	bls.n	8002584 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	22ff      	movs	r2, #255	@ 0xff
 800256a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002570:	b2da      	uxtb	r2, r3
 8002572:	8979      	ldrh	r1, [r7, #10]
 8002574:	2300      	movs	r3, #0
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f000 fc05 	bl	8002d8c <I2C_TransferConfig>
 8002582:	e00f      	b.n	80025a4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002588:	b29a      	uxth	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002592:	b2da      	uxtb	r2, r3
 8002594:	8979      	ldrh	r1, [r7, #10]
 8002596:	2300      	movs	r3, #0
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 fbf4 	bl	8002d8c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d19e      	bne.n	80024ec <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f000 fac6 	bl	8002b44 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e01a      	b.n	80025f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2220      	movs	r2, #32
 80025c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6859      	ldr	r1, [r3, #4]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002600 <HAL_I2C_Mem_Write+0x224>)
 80025d6:	400b      	ands	r3, r1
 80025d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2220      	movs	r2, #32
 80025de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80025f2:	2300      	movs	r3, #0
 80025f4:	e000      	b.n	80025f8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80025f6:	2302      	movs	r3, #2
  }
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	fe00e800 	.word	0xfe00e800

08002604 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b088      	sub	sp, #32
 8002608:	af02      	add	r7, sp, #8
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	4608      	mov	r0, r1
 800260e:	4611      	mov	r1, r2
 8002610:	461a      	mov	r2, r3
 8002612:	4603      	mov	r3, r0
 8002614:	817b      	strh	r3, [r7, #10]
 8002616:	460b      	mov	r3, r1
 8002618:	813b      	strh	r3, [r7, #8]
 800261a:	4613      	mov	r3, r2
 800261c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b20      	cmp	r3, #32
 8002628:	f040 80fd 	bne.w	8002826 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800262c:	6a3b      	ldr	r3, [r7, #32]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d002      	beq.n	8002638 <HAL_I2C_Mem_Read+0x34>
 8002632:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002634:	2b00      	cmp	r3, #0
 8002636:	d105      	bne.n	8002644 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800263e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e0f1      	b.n	8002828 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800264a:	2b01      	cmp	r3, #1
 800264c:	d101      	bne.n	8002652 <HAL_I2C_Mem_Read+0x4e>
 800264e:	2302      	movs	r3, #2
 8002650:	e0ea      	b.n	8002828 <HAL_I2C_Mem_Read+0x224>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800265a:	f7ff f9c5 	bl	80019e8 <HAL_GetTick>
 800265e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	2319      	movs	r3, #25
 8002666:	2201      	movs	r2, #1
 8002668:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f000 f9c9 	bl	8002a04 <I2C_WaitOnFlagUntilTimeout>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e0d5      	b.n	8002828 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2222      	movs	r2, #34	@ 0x22
 8002680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2240      	movs	r2, #64	@ 0x40
 8002688:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6a3a      	ldr	r2, [r7, #32]
 8002696:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800269c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026a4:	88f8      	ldrh	r0, [r7, #6]
 80026a6:	893a      	ldrh	r2, [r7, #8]
 80026a8:	8979      	ldrh	r1, [r7, #10]
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	9301      	str	r3, [sp, #4]
 80026ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	4603      	mov	r3, r0
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f000 f92d 	bl	8002914 <I2C_RequestMemoryRead>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d005      	beq.n	80026cc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e0ad      	b.n	8002828 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	2bff      	cmp	r3, #255	@ 0xff
 80026d4:	d90e      	bls.n	80026f4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2201      	movs	r2, #1
 80026da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	8979      	ldrh	r1, [r7, #10]
 80026e4:	4b52      	ldr	r3, [pc, #328]	@ (8002830 <HAL_I2C_Mem_Read+0x22c>)
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f000 fb4d 	bl	8002d8c <I2C_TransferConfig>
 80026f2:	e00f      	b.n	8002714 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002702:	b2da      	uxtb	r2, r3
 8002704:	8979      	ldrh	r1, [r7, #10]
 8002706:	4b4a      	ldr	r3, [pc, #296]	@ (8002830 <HAL_I2C_Mem_Read+0x22c>)
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 fb3c 	bl	8002d8c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800271a:	2200      	movs	r2, #0
 800271c:	2104      	movs	r1, #4
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f000 f970 	bl	8002a04 <I2C_WaitOnFlagUntilTimeout>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e07c      	b.n	8002828 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002740:	1c5a      	adds	r2, r3, #1
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800274a:	3b01      	subs	r3, #1
 800274c:	b29a      	uxth	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002756:	b29b      	uxth	r3, r3
 8002758:	3b01      	subs	r3, #1
 800275a:	b29a      	uxth	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002764:	b29b      	uxth	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d034      	beq.n	80027d4 <HAL_I2C_Mem_Read+0x1d0>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800276e:	2b00      	cmp	r3, #0
 8002770:	d130      	bne.n	80027d4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002778:	2200      	movs	r2, #0
 800277a:	2180      	movs	r1, #128	@ 0x80
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f000 f941 	bl	8002a04 <I2C_WaitOnFlagUntilTimeout>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e04d      	b.n	8002828 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002790:	b29b      	uxth	r3, r3
 8002792:	2bff      	cmp	r3, #255	@ 0xff
 8002794:	d90e      	bls.n	80027b4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2201      	movs	r2, #1
 800279a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	8979      	ldrh	r1, [r7, #10]
 80027a4:	2300      	movs	r3, #0
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f000 faed 	bl	8002d8c <I2C_TransferConfig>
 80027b2:	e00f      	b.n	80027d4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	8979      	ldrh	r1, [r7, #10]
 80027c6:	2300      	movs	r3, #0
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f000 fadc 	bl	8002d8c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d8:	b29b      	uxth	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d19a      	bne.n	8002714 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 f9ae 	bl	8002b44 <I2C_WaitOnSTOPFlagUntilTimeout>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e01a      	b.n	8002828 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2220      	movs	r2, #32
 80027f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6859      	ldr	r1, [r3, #4]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	4b0b      	ldr	r3, [pc, #44]	@ (8002834 <HAL_I2C_Mem_Read+0x230>)
 8002806:	400b      	ands	r3, r1
 8002808:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2220      	movs	r2, #32
 800280e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002822:	2300      	movs	r3, #0
 8002824:	e000      	b.n	8002828 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002826:	2302      	movs	r3, #2
  }
}
 8002828:	4618      	mov	r0, r3
 800282a:	3718      	adds	r7, #24
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	80002400 	.word	0x80002400
 8002834:	fe00e800 	.word	0xfe00e800

08002838 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002846:	b2db      	uxtb	r3, r3
}
 8002848:	4618      	mov	r0, r3
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8002860:	4618      	mov	r0, r3
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af02      	add	r7, sp, #8
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	4608      	mov	r0, r1
 8002876:	4611      	mov	r1, r2
 8002878:	461a      	mov	r2, r3
 800287a:	4603      	mov	r3, r0
 800287c:	817b      	strh	r3, [r7, #10]
 800287e:	460b      	mov	r3, r1
 8002880:	813b      	strh	r3, [r7, #8]
 8002882:	4613      	mov	r3, r2
 8002884:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002886:	88fb      	ldrh	r3, [r7, #6]
 8002888:	b2da      	uxtb	r2, r3
 800288a:	8979      	ldrh	r1, [r7, #10]
 800288c:	4b20      	ldr	r3, [pc, #128]	@ (8002910 <I2C_RequestMemoryWrite+0xa4>)
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 fa79 	bl	8002d8c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800289a:	69fa      	ldr	r2, [r7, #28]
 800289c:	69b9      	ldr	r1, [r7, #24]
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f000 f909 	bl	8002ab6 <I2C_WaitOnTXISFlagUntilTimeout>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e02c      	b.n	8002908 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028ae:	88fb      	ldrh	r3, [r7, #6]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d105      	bne.n	80028c0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028b4:	893b      	ldrh	r3, [r7, #8]
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80028be:	e015      	b.n	80028ec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80028c0:	893b      	ldrh	r3, [r7, #8]
 80028c2:	0a1b      	lsrs	r3, r3, #8
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028ce:	69fa      	ldr	r2, [r7, #28]
 80028d0:	69b9      	ldr	r1, [r7, #24]
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 f8ef 	bl	8002ab6 <I2C_WaitOnTXISFlagUntilTimeout>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e012      	b.n	8002908 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028e2:	893b      	ldrh	r3, [r7, #8]
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	2200      	movs	r2, #0
 80028f4:	2180      	movs	r1, #128	@ 0x80
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 f884 	bl	8002a04 <I2C_WaitOnFlagUntilTimeout>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e000      	b.n	8002908 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	80002000 	.word	0x80002000

08002914 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af02      	add	r7, sp, #8
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	4608      	mov	r0, r1
 800291e:	4611      	mov	r1, r2
 8002920:	461a      	mov	r2, r3
 8002922:	4603      	mov	r3, r0
 8002924:	817b      	strh	r3, [r7, #10]
 8002926:	460b      	mov	r3, r1
 8002928:	813b      	strh	r3, [r7, #8]
 800292a:	4613      	mov	r3, r2
 800292c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800292e:	88fb      	ldrh	r3, [r7, #6]
 8002930:	b2da      	uxtb	r2, r3
 8002932:	8979      	ldrh	r1, [r7, #10]
 8002934:	4b20      	ldr	r3, [pc, #128]	@ (80029b8 <I2C_RequestMemoryRead+0xa4>)
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	2300      	movs	r3, #0
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 fa26 	bl	8002d8c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002940:	69fa      	ldr	r2, [r7, #28]
 8002942:	69b9      	ldr	r1, [r7, #24]
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 f8b6 	bl	8002ab6 <I2C_WaitOnTXISFlagUntilTimeout>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e02c      	b.n	80029ae <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002954:	88fb      	ldrh	r3, [r7, #6]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d105      	bne.n	8002966 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800295a:	893b      	ldrh	r3, [r7, #8]
 800295c:	b2da      	uxtb	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	629a      	str	r2, [r3, #40]	@ 0x28
 8002964:	e015      	b.n	8002992 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002966:	893b      	ldrh	r3, [r7, #8]
 8002968:	0a1b      	lsrs	r3, r3, #8
 800296a:	b29b      	uxth	r3, r3
 800296c:	b2da      	uxtb	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002974:	69fa      	ldr	r2, [r7, #28]
 8002976:	69b9      	ldr	r1, [r7, #24]
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f000 f89c 	bl	8002ab6 <I2C_WaitOnTXISFlagUntilTimeout>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e012      	b.n	80029ae <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002988:	893b      	ldrh	r3, [r7, #8]
 800298a:	b2da      	uxtb	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	2200      	movs	r2, #0
 800299a:	2140      	movs	r1, #64	@ 0x40
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f000 f831 	bl	8002a04 <I2C_WaitOnFlagUntilTimeout>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e000      	b.n	80029ae <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	80002000 	.word	0x80002000

080029bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d103      	bne.n	80029da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2200      	movs	r2, #0
 80029d8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d007      	beq.n	80029f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	699a      	ldr	r2, [r3, #24]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	619a      	str	r2, [r3, #24]
  }
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	603b      	str	r3, [r7, #0]
 8002a10:	4613      	mov	r3, r2
 8002a12:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a14:	e03b      	b.n	8002a8e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	6839      	ldr	r1, [r7, #0]
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f000 f8d6 	bl	8002bcc <I2C_IsErrorOccurred>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e041      	b.n	8002aae <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a30:	d02d      	beq.n	8002a8e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a32:	f7fe ffd9 	bl	80019e8 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d302      	bcc.n	8002a48 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d122      	bne.n	8002a8e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699a      	ldr	r2, [r3, #24]
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	4013      	ands	r3, r2
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	bf0c      	ite	eq
 8002a58:	2301      	moveq	r3, #1
 8002a5a:	2300      	movne	r3, #0
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	461a      	mov	r2, r3
 8002a60:	79fb      	ldrb	r3, [r7, #7]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d113      	bne.n	8002a8e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6a:	f043 0220 	orr.w	r2, r3, #32
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2220      	movs	r2, #32
 8002a76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e00f      	b.n	8002aae <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	699a      	ldr	r2, [r3, #24]
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	4013      	ands	r3, r2
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	bf0c      	ite	eq
 8002a9e:	2301      	moveq	r3, #1
 8002aa0:	2300      	movne	r3, #0
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d0b4      	beq.n	8002a16 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b084      	sub	sp, #16
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	60f8      	str	r0, [r7, #12]
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ac2:	e033      	b.n	8002b2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	68b9      	ldr	r1, [r7, #8]
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 f87f 	bl	8002bcc <I2C_IsErrorOccurred>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e031      	b.n	8002b3c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ade:	d025      	beq.n	8002b2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ae0:	f7fe ff82 	bl	80019e8 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d302      	bcc.n	8002af6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d11a      	bne.n	8002b2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d013      	beq.n	8002b2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b08:	f043 0220 	orr.w	r2, r3, #32
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2220      	movs	r2, #32
 8002b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e007      	b.n	8002b3c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d1c4      	bne.n	8002ac4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b50:	e02f      	b.n	8002bb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	68b9      	ldr	r1, [r7, #8]
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 f838 	bl	8002bcc <I2C_IsErrorOccurred>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e02d      	b.n	8002bc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b66:	f7fe ff3f 	bl	80019e8 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d302      	bcc.n	8002b7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d11a      	bne.n	8002bb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	f003 0320 	and.w	r3, r3, #32
 8002b86:	2b20      	cmp	r3, #32
 8002b88:	d013      	beq.n	8002bb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8e:	f043 0220 	orr.w	r2, r3, #32
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2220      	movs	r2, #32
 8002b9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e007      	b.n	8002bc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	f003 0320 	and.w	r3, r3, #32
 8002bbc:	2b20      	cmp	r3, #32
 8002bbe:	d1c8      	bne.n	8002b52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b08a      	sub	sp, #40	@ 0x28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002be6:	2300      	movs	r3, #0
 8002be8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	f003 0310 	and.w	r3, r3, #16
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d068      	beq.n	8002cca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2210      	movs	r2, #16
 8002bfe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c00:	e049      	b.n	8002c96 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c08:	d045      	beq.n	8002c96 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c0a:	f7fe feed 	bl	80019e8 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d302      	bcc.n	8002c20 <I2C_IsErrorOccurred+0x54>
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d13a      	bne.n	8002c96 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c2a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c32:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c42:	d121      	bne.n	8002c88 <I2C_IsErrorOccurred+0xbc>
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c4a:	d01d      	beq.n	8002c88 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002c4c:	7cfb      	ldrb	r3, [r7, #19]
 8002c4e:	2b20      	cmp	r3, #32
 8002c50:	d01a      	beq.n	8002c88 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c60:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c62:	f7fe fec1 	bl	80019e8 <HAL_GetTick>
 8002c66:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c68:	e00e      	b.n	8002c88 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c6a:	f7fe febd 	bl	80019e8 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b19      	cmp	r3, #25
 8002c76:	d907      	bls.n	8002c88 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	f043 0320 	orr.w	r3, r3, #32
 8002c7e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002c86:	e006      	b.n	8002c96 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	f003 0320 	and.w	r3, r3, #32
 8002c92:	2b20      	cmp	r3, #32
 8002c94:	d1e9      	bne.n	8002c6a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	f003 0320 	and.w	r3, r3, #32
 8002ca0:	2b20      	cmp	r3, #32
 8002ca2:	d003      	beq.n	8002cac <I2C_IsErrorOccurred+0xe0>
 8002ca4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0aa      	beq.n	8002c02 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002cac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d103      	bne.n	8002cbc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	f043 0304 	orr.w	r3, r3, #4
 8002cc2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00b      	beq.n	8002cf4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	f043 0301 	orr.w	r3, r3, #1
 8002ce2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002cec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00b      	beq.n	8002d16 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002cfe:	6a3b      	ldr	r3, [r7, #32]
 8002d00:	f043 0308 	orr.w	r3, r3, #8
 8002d04:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d0e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00b      	beq.n	8002d38 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	f043 0302 	orr.w	r3, r3, #2
 8002d26:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002d38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d01c      	beq.n	8002d7a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f7ff fe3b 	bl	80029bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6859      	ldr	r1, [r3, #4]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	4b0d      	ldr	r3, [pc, #52]	@ (8002d88 <I2C_IsErrorOccurred+0x1bc>)
 8002d52:	400b      	ands	r3, r1
 8002d54:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d5a:	6a3b      	ldr	r3, [r7, #32]
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2220      	movs	r2, #32
 8002d66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002d7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3728      	adds	r7, #40	@ 0x28
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	fe00e800 	.word	0xfe00e800

08002d8c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b087      	sub	sp, #28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	607b      	str	r3, [r7, #4]
 8002d96:	460b      	mov	r3, r1
 8002d98:	817b      	strh	r3, [r7, #10]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d9e:	897b      	ldrh	r3, [r7, #10]
 8002da0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002da4:	7a7b      	ldrb	r3, [r7, #9]
 8002da6:	041b      	lsls	r3, r3, #16
 8002da8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002db2:	6a3b      	ldr	r3, [r7, #32]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002dba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	0d5b      	lsrs	r3, r3, #21
 8002dc6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002dca:	4b08      	ldr	r3, [pc, #32]	@ (8002dec <I2C_TransferConfig+0x60>)
 8002dcc:	430b      	orrs	r3, r1
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	ea02 0103 	and.w	r1, r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002dde:	bf00      	nop
 8002de0:	371c      	adds	r7, #28
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	03ff63ff 	.word	0x03ff63ff

08002df0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b20      	cmp	r3, #32
 8002e04:	d138      	bne.n	8002e78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d101      	bne.n	8002e14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e10:	2302      	movs	r3, #2
 8002e12:	e032      	b.n	8002e7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2224      	movs	r2, #36	@ 0x24
 8002e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0201 	bic.w	r2, r2, #1
 8002e32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6819      	ldr	r1, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0201 	orr.w	r2, r2, #1
 8002e62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2220      	movs	r2, #32
 8002e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e74:	2300      	movs	r3, #0
 8002e76:	e000      	b.n	8002e7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e78:	2302      	movs	r3, #2
  }
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b085      	sub	sp, #20
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
 8002e8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b20      	cmp	r3, #32
 8002e9a:	d139      	bne.n	8002f10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d101      	bne.n	8002eaa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	e033      	b.n	8002f12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2224      	movs	r2, #36	@ 0x24
 8002eb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0201 	bic.w	r2, r2, #1
 8002ec8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002ed8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	021b      	lsls	r3, r3, #8
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0201 	orr.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	e000      	b.n	8002f12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f10:	2302      	movs	r3, #2
  }
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3714      	adds	r7, #20
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
	...

08002f20 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f24:	4b04      	ldr	r3, [pc, #16]	@ (8002f38 <HAL_PWREx_GetVoltageRange+0x18>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	40007000 	.word	0x40007000

08002f3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f4a:	d130      	bne.n	8002fae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f4c:	4b23      	ldr	r3, [pc, #140]	@ (8002fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f58:	d038      	beq.n	8002fcc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f5a:	4b20      	ldr	r3, [pc, #128]	@ (8002fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f62:	4a1e      	ldr	r2, [pc, #120]	@ (8002fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f64:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f68:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f6a:	4b1d      	ldr	r3, [pc, #116]	@ (8002fe0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2232      	movs	r2, #50	@ 0x32
 8002f70:	fb02 f303 	mul.w	r3, r2, r3
 8002f74:	4a1b      	ldr	r2, [pc, #108]	@ (8002fe4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f76:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7a:	0c9b      	lsrs	r3, r3, #18
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f80:	e002      	b.n	8002f88 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	3b01      	subs	r3, #1
 8002f86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f88:	4b14      	ldr	r3, [pc, #80]	@ (8002fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f94:	d102      	bne.n	8002f9c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1f2      	bne.n	8002f82 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fa8:	d110      	bne.n	8002fcc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e00f      	b.n	8002fce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fae:	4b0b      	ldr	r3, [pc, #44]	@ (8002fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002fb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fba:	d007      	beq.n	8002fcc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002fbc:	4b07      	ldr	r3, [pc, #28]	@ (8002fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002fc4:	4a05      	ldr	r2, [pc, #20]	@ (8002fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fc6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002fca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	40007000 	.word	0x40007000
 8002fe0:	20000000 	.word	0x20000000
 8002fe4:	431bde83 	.word	0x431bde83

08002fe8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b088      	sub	sp, #32
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e3ca      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ffa:	4b97      	ldr	r3, [pc, #604]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 030c 	and.w	r3, r3, #12
 8003002:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003004:	4b94      	ldr	r3, [pc, #592]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	f003 0303 	and.w	r3, r3, #3
 800300c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0310 	and.w	r3, r3, #16
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 80e4 	beq.w	80031e4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d007      	beq.n	8003032 <HAL_RCC_OscConfig+0x4a>
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	2b0c      	cmp	r3, #12
 8003026:	f040 808b 	bne.w	8003140 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	2b01      	cmp	r3, #1
 800302e:	f040 8087 	bne.w	8003140 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003032:	4b89      	ldr	r3, [pc, #548]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d005      	beq.n	800304a <HAL_RCC_OscConfig+0x62>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e3a2      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a1a      	ldr	r2, [r3, #32]
 800304e:	4b82      	ldr	r3, [pc, #520]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	2b00      	cmp	r3, #0
 8003058:	d004      	beq.n	8003064 <HAL_RCC_OscConfig+0x7c>
 800305a:	4b7f      	ldr	r3, [pc, #508]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003062:	e005      	b.n	8003070 <HAL_RCC_OscConfig+0x88>
 8003064:	4b7c      	ldr	r3, [pc, #496]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 8003066:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800306a:	091b      	lsrs	r3, r3, #4
 800306c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003070:	4293      	cmp	r3, r2
 8003072:	d223      	bcs.n	80030bc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	4618      	mov	r0, r3
 800307a:	f000 fd55 	bl	8003b28 <RCC_SetFlashLatencyFromMSIRange>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e383      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003088:	4b73      	ldr	r3, [pc, #460]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a72      	ldr	r2, [pc, #456]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 800308e:	f043 0308 	orr.w	r3, r3, #8
 8003092:	6013      	str	r3, [r2, #0]
 8003094:	4b70      	ldr	r3, [pc, #448]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	496d      	ldr	r1, [pc, #436]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030a6:	4b6c      	ldr	r3, [pc, #432]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	021b      	lsls	r3, r3, #8
 80030b4:	4968      	ldr	r1, [pc, #416]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	604b      	str	r3, [r1, #4]
 80030ba:	e025      	b.n	8003108 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030bc:	4b66      	ldr	r3, [pc, #408]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a65      	ldr	r2, [pc, #404]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 80030c2:	f043 0308 	orr.w	r3, r3, #8
 80030c6:	6013      	str	r3, [r2, #0]
 80030c8:	4b63      	ldr	r3, [pc, #396]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	4960      	ldr	r1, [pc, #384]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030da:	4b5f      	ldr	r3, [pc, #380]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	021b      	lsls	r3, r3, #8
 80030e8:	495b      	ldr	r1, [pc, #364]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d109      	bne.n	8003108 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f000 fd15 	bl	8003b28 <RCC_SetFlashLatencyFromMSIRange>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e343      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003108:	f000 fc4a 	bl	80039a0 <HAL_RCC_GetSysClockFreq>
 800310c:	4602      	mov	r2, r0
 800310e:	4b52      	ldr	r3, [pc, #328]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	091b      	lsrs	r3, r3, #4
 8003114:	f003 030f 	and.w	r3, r3, #15
 8003118:	4950      	ldr	r1, [pc, #320]	@ (800325c <HAL_RCC_OscConfig+0x274>)
 800311a:	5ccb      	ldrb	r3, [r1, r3]
 800311c:	f003 031f 	and.w	r3, r3, #31
 8003120:	fa22 f303 	lsr.w	r3, r2, r3
 8003124:	4a4e      	ldr	r2, [pc, #312]	@ (8003260 <HAL_RCC_OscConfig+0x278>)
 8003126:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003128:	4b4e      	ldr	r3, [pc, #312]	@ (8003264 <HAL_RCC_OscConfig+0x27c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	f7fe fc0b 	bl	8001948 <HAL_InitTick>
 8003132:	4603      	mov	r3, r0
 8003134:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003136:	7bfb      	ldrb	r3, [r7, #15]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d052      	beq.n	80031e2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800313c:	7bfb      	ldrb	r3, [r7, #15]
 800313e:	e327      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d032      	beq.n	80031ae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003148:	4b43      	ldr	r3, [pc, #268]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a42      	ldr	r2, [pc, #264]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003154:	f7fe fc48 	bl	80019e8 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800315c:	f7fe fc44 	bl	80019e8 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e310      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800316e:	4b3a      	ldr	r3, [pc, #232]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0f0      	beq.n	800315c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800317a:	4b37      	ldr	r3, [pc, #220]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a36      	ldr	r2, [pc, #216]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 8003180:	f043 0308 	orr.w	r3, r3, #8
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	4b34      	ldr	r3, [pc, #208]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	4931      	ldr	r1, [pc, #196]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 8003194:	4313      	orrs	r3, r2
 8003196:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003198:	4b2f      	ldr	r3, [pc, #188]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	69db      	ldr	r3, [r3, #28]
 80031a4:	021b      	lsls	r3, r3, #8
 80031a6:	492c      	ldr	r1, [pc, #176]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	604b      	str	r3, [r1, #4]
 80031ac:	e01a      	b.n	80031e4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031ae:	4b2a      	ldr	r3, [pc, #168]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a29      	ldr	r2, [pc, #164]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 80031b4:	f023 0301 	bic.w	r3, r3, #1
 80031b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031ba:	f7fe fc15 	bl	80019e8 <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031c0:	e008      	b.n	80031d4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031c2:	f7fe fc11 	bl	80019e8 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e2dd      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031d4:	4b20      	ldr	r3, [pc, #128]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1f0      	bne.n	80031c2 <HAL_RCC_OscConfig+0x1da>
 80031e0:	e000      	b.n	80031e4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031e2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d074      	beq.n	80032da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	2b08      	cmp	r3, #8
 80031f4:	d005      	beq.n	8003202 <HAL_RCC_OscConfig+0x21a>
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	2b0c      	cmp	r3, #12
 80031fa:	d10e      	bne.n	800321a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	2b03      	cmp	r3, #3
 8003200:	d10b      	bne.n	800321a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003202:	4b15      	ldr	r3, [pc, #84]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d064      	beq.n	80032d8 <HAL_RCC_OscConfig+0x2f0>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d160      	bne.n	80032d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e2ba      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003222:	d106      	bne.n	8003232 <HAL_RCC_OscConfig+0x24a>
 8003224:	4b0c      	ldr	r3, [pc, #48]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a0b      	ldr	r2, [pc, #44]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 800322a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800322e:	6013      	str	r3, [r2, #0]
 8003230:	e026      	b.n	8003280 <HAL_RCC_OscConfig+0x298>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800323a:	d115      	bne.n	8003268 <HAL_RCC_OscConfig+0x280>
 800323c:	4b06      	ldr	r3, [pc, #24]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a05      	ldr	r2, [pc, #20]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 8003242:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003246:	6013      	str	r3, [r2, #0]
 8003248:	4b03      	ldr	r3, [pc, #12]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a02      	ldr	r2, [pc, #8]	@ (8003258 <HAL_RCC_OscConfig+0x270>)
 800324e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003252:	6013      	str	r3, [r2, #0]
 8003254:	e014      	b.n	8003280 <HAL_RCC_OscConfig+0x298>
 8003256:	bf00      	nop
 8003258:	40021000 	.word	0x40021000
 800325c:	08005f48 	.word	0x08005f48
 8003260:	20000000 	.word	0x20000000
 8003264:	20000004 	.word	0x20000004
 8003268:	4ba0      	ldr	r3, [pc, #640]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a9f      	ldr	r2, [pc, #636]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 800326e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003272:	6013      	str	r3, [r2, #0]
 8003274:	4b9d      	ldr	r3, [pc, #628]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a9c      	ldr	r2, [pc, #624]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 800327a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800327e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d013      	beq.n	80032b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003288:	f7fe fbae 	bl	80019e8 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003290:	f7fe fbaa 	bl	80019e8 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b64      	cmp	r3, #100	@ 0x64
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e276      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032a2:	4b92      	ldr	r3, [pc, #584]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0f0      	beq.n	8003290 <HAL_RCC_OscConfig+0x2a8>
 80032ae:	e014      	b.n	80032da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b0:	f7fe fb9a 	bl	80019e8 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032b8:	f7fe fb96 	bl	80019e8 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b64      	cmp	r3, #100	@ 0x64
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e262      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032ca:	4b88      	ldr	r3, [pc, #544]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1f0      	bne.n	80032b8 <HAL_RCC_OscConfig+0x2d0>
 80032d6:	e000      	b.n	80032da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d060      	beq.n	80033a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	2b04      	cmp	r3, #4
 80032ea:	d005      	beq.n	80032f8 <HAL_RCC_OscConfig+0x310>
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	2b0c      	cmp	r3, #12
 80032f0:	d119      	bne.n	8003326 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d116      	bne.n	8003326 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032f8:	4b7c      	ldr	r3, [pc, #496]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003300:	2b00      	cmp	r3, #0
 8003302:	d005      	beq.n	8003310 <HAL_RCC_OscConfig+0x328>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e23f      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003310:	4b76      	ldr	r3, [pc, #472]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	061b      	lsls	r3, r3, #24
 800331e:	4973      	ldr	r1, [pc, #460]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 8003320:	4313      	orrs	r3, r2
 8003322:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003324:	e040      	b.n	80033a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d023      	beq.n	8003376 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800332e:	4b6f      	ldr	r3, [pc, #444]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a6e      	ldr	r2, [pc, #440]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 8003334:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003338:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333a:	f7fe fb55 	bl	80019e8 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003342:	f7fe fb51 	bl	80019e8 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e21d      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003354:	4b65      	ldr	r3, [pc, #404]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0f0      	beq.n	8003342 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003360:	4b62      	ldr	r3, [pc, #392]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	061b      	lsls	r3, r3, #24
 800336e:	495f      	ldr	r1, [pc, #380]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 8003370:	4313      	orrs	r3, r2
 8003372:	604b      	str	r3, [r1, #4]
 8003374:	e018      	b.n	80033a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003376:	4b5d      	ldr	r3, [pc, #372]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a5c      	ldr	r2, [pc, #368]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 800337c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003380:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003382:	f7fe fb31 	bl	80019e8 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800338a:	f7fe fb2d 	bl	80019e8 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e1f9      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800339c:	4b53      	ldr	r3, [pc, #332]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1f0      	bne.n	800338a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0308 	and.w	r3, r3, #8
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d03c      	beq.n	800342e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d01c      	beq.n	80033f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033bc:	4b4b      	ldr	r3, [pc, #300]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 80033be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033c2:	4a4a      	ldr	r2, [pc, #296]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 80033c4:	f043 0301 	orr.w	r3, r3, #1
 80033c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033cc:	f7fe fb0c 	bl	80019e8 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033d4:	f7fe fb08 	bl	80019e8 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e1d4      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033e6:	4b41      	ldr	r3, [pc, #260]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 80033e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0ef      	beq.n	80033d4 <HAL_RCC_OscConfig+0x3ec>
 80033f4:	e01b      	b.n	800342e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033f6:	4b3d      	ldr	r3, [pc, #244]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 80033f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033fc:	4a3b      	ldr	r2, [pc, #236]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 80033fe:	f023 0301 	bic.w	r3, r3, #1
 8003402:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003406:	f7fe faef 	bl	80019e8 <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800340e:	f7fe faeb 	bl	80019e8 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e1b7      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003420:	4b32      	ldr	r3, [pc, #200]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 8003422:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1ef      	bne.n	800340e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0304 	and.w	r3, r3, #4
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 80a6 	beq.w	8003588 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800343c:	2300      	movs	r3, #0
 800343e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003440:	4b2a      	ldr	r3, [pc, #168]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 8003442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003444:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10d      	bne.n	8003468 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800344c:	4b27      	ldr	r3, [pc, #156]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 800344e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003450:	4a26      	ldr	r2, [pc, #152]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 8003452:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003456:	6593      	str	r3, [r2, #88]	@ 0x58
 8003458:	4b24      	ldr	r3, [pc, #144]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 800345a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800345c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003460:	60bb      	str	r3, [r7, #8]
 8003462:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003464:	2301      	movs	r3, #1
 8003466:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003468:	4b21      	ldr	r3, [pc, #132]	@ (80034f0 <HAL_RCC_OscConfig+0x508>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003470:	2b00      	cmp	r3, #0
 8003472:	d118      	bne.n	80034a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003474:	4b1e      	ldr	r3, [pc, #120]	@ (80034f0 <HAL_RCC_OscConfig+0x508>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a1d      	ldr	r2, [pc, #116]	@ (80034f0 <HAL_RCC_OscConfig+0x508>)
 800347a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800347e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003480:	f7fe fab2 	bl	80019e8 <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003486:	e008      	b.n	800349a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003488:	f7fe faae 	bl	80019e8 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e17a      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800349a:	4b15      	ldr	r3, [pc, #84]	@ (80034f0 <HAL_RCC_OscConfig+0x508>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d0f0      	beq.n	8003488 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d108      	bne.n	80034c0 <HAL_RCC_OscConfig+0x4d8>
 80034ae:	4b0f      	ldr	r3, [pc, #60]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 80034b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034b4:	4a0d      	ldr	r2, [pc, #52]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034be:	e029      	b.n	8003514 <HAL_RCC_OscConfig+0x52c>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	2b05      	cmp	r3, #5
 80034c6:	d115      	bne.n	80034f4 <HAL_RCC_OscConfig+0x50c>
 80034c8:	4b08      	ldr	r3, [pc, #32]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 80034ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ce:	4a07      	ldr	r2, [pc, #28]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 80034d0:	f043 0304 	orr.w	r3, r3, #4
 80034d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034d8:	4b04      	ldr	r3, [pc, #16]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 80034da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034de:	4a03      	ldr	r2, [pc, #12]	@ (80034ec <HAL_RCC_OscConfig+0x504>)
 80034e0:	f043 0301 	orr.w	r3, r3, #1
 80034e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034e8:	e014      	b.n	8003514 <HAL_RCC_OscConfig+0x52c>
 80034ea:	bf00      	nop
 80034ec:	40021000 	.word	0x40021000
 80034f0:	40007000 	.word	0x40007000
 80034f4:	4b9c      	ldr	r3, [pc, #624]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 80034f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034fa:	4a9b      	ldr	r2, [pc, #620]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 80034fc:	f023 0301 	bic.w	r3, r3, #1
 8003500:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003504:	4b98      	ldr	r3, [pc, #608]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 8003506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800350a:	4a97      	ldr	r2, [pc, #604]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 800350c:	f023 0304 	bic.w	r3, r3, #4
 8003510:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d016      	beq.n	800354a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351c:	f7fe fa64 	bl	80019e8 <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003522:	e00a      	b.n	800353a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003524:	f7fe fa60 	bl	80019e8 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003532:	4293      	cmp	r3, r2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e12a      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800353a:	4b8b      	ldr	r3, [pc, #556]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 800353c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0ed      	beq.n	8003524 <HAL_RCC_OscConfig+0x53c>
 8003548:	e015      	b.n	8003576 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800354a:	f7fe fa4d 	bl	80019e8 <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003550:	e00a      	b.n	8003568 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003552:	f7fe fa49 	bl	80019e8 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003560:	4293      	cmp	r3, r2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e113      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003568:	4b7f      	ldr	r3, [pc, #508]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 800356a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1ed      	bne.n	8003552 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003576:	7ffb      	ldrb	r3, [r7, #31]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d105      	bne.n	8003588 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800357c:	4b7a      	ldr	r3, [pc, #488]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 800357e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003580:	4a79      	ldr	r2, [pc, #484]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 8003582:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003586:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 80fe 	beq.w	800378e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003596:	2b02      	cmp	r3, #2
 8003598:	f040 80d0 	bne.w	800373c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800359c:	4b72      	ldr	r3, [pc, #456]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f003 0203 	and.w	r2, r3, #3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d130      	bne.n	8003612 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ba:	3b01      	subs	r3, #1
 80035bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035be:	429a      	cmp	r2, r3
 80035c0:	d127      	bne.n	8003612 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d11f      	bne.n	8003612 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80035dc:	2a07      	cmp	r2, #7
 80035de:	bf14      	ite	ne
 80035e0:	2201      	movne	r2, #1
 80035e2:	2200      	moveq	r2, #0
 80035e4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d113      	bne.n	8003612 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f4:	085b      	lsrs	r3, r3, #1
 80035f6:	3b01      	subs	r3, #1
 80035f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d109      	bne.n	8003612 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003608:	085b      	lsrs	r3, r3, #1
 800360a:	3b01      	subs	r3, #1
 800360c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800360e:	429a      	cmp	r2, r3
 8003610:	d06e      	beq.n	80036f0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	2b0c      	cmp	r3, #12
 8003616:	d069      	beq.n	80036ec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003618:	4b53      	ldr	r3, [pc, #332]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d105      	bne.n	8003630 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003624:	4b50      	ldr	r3, [pc, #320]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e0ad      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003634:	4b4c      	ldr	r3, [pc, #304]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a4b      	ldr	r2, [pc, #300]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 800363a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800363e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003640:	f7fe f9d2 	bl	80019e8 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003648:	f7fe f9ce 	bl	80019e8 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e09a      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800365a:	4b43      	ldr	r3, [pc, #268]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f0      	bne.n	8003648 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003666:	4b40      	ldr	r3, [pc, #256]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	4b40      	ldr	r3, [pc, #256]	@ (800376c <HAL_RCC_OscConfig+0x784>)
 800366c:	4013      	ands	r3, r2
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003676:	3a01      	subs	r2, #1
 8003678:	0112      	lsls	r2, r2, #4
 800367a:	4311      	orrs	r1, r2
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003680:	0212      	lsls	r2, r2, #8
 8003682:	4311      	orrs	r1, r2
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003688:	0852      	lsrs	r2, r2, #1
 800368a:	3a01      	subs	r2, #1
 800368c:	0552      	lsls	r2, r2, #21
 800368e:	4311      	orrs	r1, r2
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003694:	0852      	lsrs	r2, r2, #1
 8003696:	3a01      	subs	r2, #1
 8003698:	0652      	lsls	r2, r2, #25
 800369a:	4311      	orrs	r1, r2
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80036a0:	0912      	lsrs	r2, r2, #4
 80036a2:	0452      	lsls	r2, r2, #17
 80036a4:	430a      	orrs	r2, r1
 80036a6:	4930      	ldr	r1, [pc, #192]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80036ac:	4b2e      	ldr	r3, [pc, #184]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a2d      	ldr	r2, [pc, #180]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 80036b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	4a2a      	ldr	r2, [pc, #168]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 80036be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036c4:	f7fe f990 	bl	80019e8 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036cc:	f7fe f98c 	bl	80019e8 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e058      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036de:	4b22      	ldr	r3, [pc, #136]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0f0      	beq.n	80036cc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036ea:	e050      	b.n	800378e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e04f      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d148      	bne.n	800378e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80036fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a19      	ldr	r2, [pc, #100]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 8003702:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003706:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003708:	4b17      	ldr	r3, [pc, #92]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	4a16      	ldr	r2, [pc, #88]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 800370e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003712:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003714:	f7fe f968 	bl	80019e8 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800371c:	f7fe f964 	bl	80019e8 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e030      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800372e:	4b0e      	ldr	r3, [pc, #56]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0f0      	beq.n	800371c <HAL_RCC_OscConfig+0x734>
 800373a:	e028      	b.n	800378e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	2b0c      	cmp	r3, #12
 8003740:	d023      	beq.n	800378a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003742:	4b09      	ldr	r3, [pc, #36]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a08      	ldr	r2, [pc, #32]	@ (8003768 <HAL_RCC_OscConfig+0x780>)
 8003748:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800374c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374e:	f7fe f94b 	bl	80019e8 <HAL_GetTick>
 8003752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003754:	e00c      	b.n	8003770 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003756:	f7fe f947 	bl	80019e8 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d905      	bls.n	8003770 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e013      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
 8003768:	40021000 	.word	0x40021000
 800376c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003770:	4b09      	ldr	r3, [pc, #36]	@ (8003798 <HAL_RCC_OscConfig+0x7b0>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1ec      	bne.n	8003756 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800377c:	4b06      	ldr	r3, [pc, #24]	@ (8003798 <HAL_RCC_OscConfig+0x7b0>)
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	4905      	ldr	r1, [pc, #20]	@ (8003798 <HAL_RCC_OscConfig+0x7b0>)
 8003782:	4b06      	ldr	r3, [pc, #24]	@ (800379c <HAL_RCC_OscConfig+0x7b4>)
 8003784:	4013      	ands	r3, r2
 8003786:	60cb      	str	r3, [r1, #12]
 8003788:	e001      	b.n	800378e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e000      	b.n	8003790 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3720      	adds	r7, #32
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40021000 	.word	0x40021000
 800379c:	feeefffc 	.word	0xfeeefffc

080037a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d101      	bne.n	80037b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e0e7      	b.n	8003984 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037b4:	4b75      	ldr	r3, [pc, #468]	@ (800398c <HAL_RCC_ClockConfig+0x1ec>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d910      	bls.n	80037e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037c2:	4b72      	ldr	r3, [pc, #456]	@ (800398c <HAL_RCC_ClockConfig+0x1ec>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f023 0207 	bic.w	r2, r3, #7
 80037ca:	4970      	ldr	r1, [pc, #448]	@ (800398c <HAL_RCC_ClockConfig+0x1ec>)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d2:	4b6e      	ldr	r3, [pc, #440]	@ (800398c <HAL_RCC_ClockConfig+0x1ec>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d001      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e0cf      	b.n	8003984 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d010      	beq.n	8003812 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	4b66      	ldr	r3, [pc, #408]	@ (8003990 <HAL_RCC_ClockConfig+0x1f0>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d908      	bls.n	8003812 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003800:	4b63      	ldr	r3, [pc, #396]	@ (8003990 <HAL_RCC_ClockConfig+0x1f0>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	4960      	ldr	r1, [pc, #384]	@ (8003990 <HAL_RCC_ClockConfig+0x1f0>)
 800380e:	4313      	orrs	r3, r2
 8003810:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d04c      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	2b03      	cmp	r3, #3
 8003824:	d107      	bne.n	8003836 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003826:	4b5a      	ldr	r3, [pc, #360]	@ (8003990 <HAL_RCC_ClockConfig+0x1f0>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d121      	bne.n	8003876 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e0a6      	b.n	8003984 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2b02      	cmp	r3, #2
 800383c:	d107      	bne.n	800384e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800383e:	4b54      	ldr	r3, [pc, #336]	@ (8003990 <HAL_RCC_ClockConfig+0x1f0>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d115      	bne.n	8003876 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e09a      	b.n	8003984 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d107      	bne.n	8003866 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003856:	4b4e      	ldr	r3, [pc, #312]	@ (8003990 <HAL_RCC_ClockConfig+0x1f0>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d109      	bne.n	8003876 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e08e      	b.n	8003984 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003866:	4b4a      	ldr	r3, [pc, #296]	@ (8003990 <HAL_RCC_ClockConfig+0x1f0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e086      	b.n	8003984 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003876:	4b46      	ldr	r3, [pc, #280]	@ (8003990 <HAL_RCC_ClockConfig+0x1f0>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f023 0203 	bic.w	r2, r3, #3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	4943      	ldr	r1, [pc, #268]	@ (8003990 <HAL_RCC_ClockConfig+0x1f0>)
 8003884:	4313      	orrs	r3, r2
 8003886:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003888:	f7fe f8ae 	bl	80019e8 <HAL_GetTick>
 800388c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388e:	e00a      	b.n	80038a6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003890:	f7fe f8aa 	bl	80019e8 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800389e:	4293      	cmp	r3, r2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e06e      	b.n	8003984 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a6:	4b3a      	ldr	r3, [pc, #232]	@ (8003990 <HAL_RCC_ClockConfig+0x1f0>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 020c 	and.w	r2, r3, #12
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d1eb      	bne.n	8003890 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d010      	beq.n	80038e6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	4b31      	ldr	r3, [pc, #196]	@ (8003990 <HAL_RCC_ClockConfig+0x1f0>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d208      	bcs.n	80038e6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038d4:	4b2e      	ldr	r3, [pc, #184]	@ (8003990 <HAL_RCC_ClockConfig+0x1f0>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	492b      	ldr	r1, [pc, #172]	@ (8003990 <HAL_RCC_ClockConfig+0x1f0>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038e6:	4b29      	ldr	r3, [pc, #164]	@ (800398c <HAL_RCC_ClockConfig+0x1ec>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d210      	bcs.n	8003916 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038f4:	4b25      	ldr	r3, [pc, #148]	@ (800398c <HAL_RCC_ClockConfig+0x1ec>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f023 0207 	bic.w	r2, r3, #7
 80038fc:	4923      	ldr	r1, [pc, #140]	@ (800398c <HAL_RCC_ClockConfig+0x1ec>)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	4313      	orrs	r3, r2
 8003902:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003904:	4b21      	ldr	r3, [pc, #132]	@ (800398c <HAL_RCC_ClockConfig+0x1ec>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	429a      	cmp	r2, r3
 8003910:	d001      	beq.n	8003916 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e036      	b.n	8003984 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0304 	and.w	r3, r3, #4
 800391e:	2b00      	cmp	r3, #0
 8003920:	d008      	beq.n	8003934 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003922:	4b1b      	ldr	r3, [pc, #108]	@ (8003990 <HAL_RCC_ClockConfig+0x1f0>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	4918      	ldr	r1, [pc, #96]	@ (8003990 <HAL_RCC_ClockConfig+0x1f0>)
 8003930:	4313      	orrs	r3, r2
 8003932:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0308 	and.w	r3, r3, #8
 800393c:	2b00      	cmp	r3, #0
 800393e:	d009      	beq.n	8003954 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003940:	4b13      	ldr	r3, [pc, #76]	@ (8003990 <HAL_RCC_ClockConfig+0x1f0>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	4910      	ldr	r1, [pc, #64]	@ (8003990 <HAL_RCC_ClockConfig+0x1f0>)
 8003950:	4313      	orrs	r3, r2
 8003952:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003954:	f000 f824 	bl	80039a0 <HAL_RCC_GetSysClockFreq>
 8003958:	4602      	mov	r2, r0
 800395a:	4b0d      	ldr	r3, [pc, #52]	@ (8003990 <HAL_RCC_ClockConfig+0x1f0>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	091b      	lsrs	r3, r3, #4
 8003960:	f003 030f 	and.w	r3, r3, #15
 8003964:	490b      	ldr	r1, [pc, #44]	@ (8003994 <HAL_RCC_ClockConfig+0x1f4>)
 8003966:	5ccb      	ldrb	r3, [r1, r3]
 8003968:	f003 031f 	and.w	r3, r3, #31
 800396c:	fa22 f303 	lsr.w	r3, r2, r3
 8003970:	4a09      	ldr	r2, [pc, #36]	@ (8003998 <HAL_RCC_ClockConfig+0x1f8>)
 8003972:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003974:	4b09      	ldr	r3, [pc, #36]	@ (800399c <HAL_RCC_ClockConfig+0x1fc>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4618      	mov	r0, r3
 800397a:	f7fd ffe5 	bl	8001948 <HAL_InitTick>
 800397e:	4603      	mov	r3, r0
 8003980:	72fb      	strb	r3, [r7, #11]

  return status;
 8003982:	7afb      	ldrb	r3, [r7, #11]
}
 8003984:	4618      	mov	r0, r3
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40022000 	.word	0x40022000
 8003990:	40021000 	.word	0x40021000
 8003994:	08005f48 	.word	0x08005f48
 8003998:	20000000 	.word	0x20000000
 800399c:	20000004 	.word	0x20000004

080039a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b089      	sub	sp, #36	@ 0x24
 80039a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	61fb      	str	r3, [r7, #28]
 80039aa:	2300      	movs	r3, #0
 80039ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039ae:	4b3e      	ldr	r3, [pc, #248]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f003 030c 	and.w	r3, r3, #12
 80039b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039b8:	4b3b      	ldr	r3, [pc, #236]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	f003 0303 	and.w	r3, r3, #3
 80039c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d005      	beq.n	80039d4 <HAL_RCC_GetSysClockFreq+0x34>
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	2b0c      	cmp	r3, #12
 80039cc:	d121      	bne.n	8003a12 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d11e      	bne.n	8003a12 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80039d4:	4b34      	ldr	r3, [pc, #208]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0308 	and.w	r3, r3, #8
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d107      	bne.n	80039f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80039e0:	4b31      	ldr	r3, [pc, #196]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 80039e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039e6:	0a1b      	lsrs	r3, r3, #8
 80039e8:	f003 030f 	and.w	r3, r3, #15
 80039ec:	61fb      	str	r3, [r7, #28]
 80039ee:	e005      	b.n	80039fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80039f0:	4b2d      	ldr	r3, [pc, #180]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	091b      	lsrs	r3, r3, #4
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80039fc:	4a2b      	ldr	r2, [pc, #172]	@ (8003aac <HAL_RCC_GetSysClockFreq+0x10c>)
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a04:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10d      	bne.n	8003a28 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a10:	e00a      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	2b04      	cmp	r3, #4
 8003a16:	d102      	bne.n	8003a1e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a18:	4b25      	ldr	r3, [pc, #148]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a1a:	61bb      	str	r3, [r7, #24]
 8003a1c:	e004      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d101      	bne.n	8003a28 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a24:	4b23      	ldr	r3, [pc, #140]	@ (8003ab4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a26:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	2b0c      	cmp	r3, #12
 8003a2c:	d134      	bne.n	8003a98 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f003 0303 	and.w	r3, r3, #3
 8003a36:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d003      	beq.n	8003a46 <HAL_RCC_GetSysClockFreq+0xa6>
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	2b03      	cmp	r3, #3
 8003a42:	d003      	beq.n	8003a4c <HAL_RCC_GetSysClockFreq+0xac>
 8003a44:	e005      	b.n	8003a52 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a46:	4b1a      	ldr	r3, [pc, #104]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a48:	617b      	str	r3, [r7, #20]
      break;
 8003a4a:	e005      	b.n	8003a58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a4c:	4b19      	ldr	r3, [pc, #100]	@ (8003ab4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a4e:	617b      	str	r3, [r7, #20]
      break;
 8003a50:	e002      	b.n	8003a58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	617b      	str	r3, [r7, #20]
      break;
 8003a56:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a58:	4b13      	ldr	r3, [pc, #76]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	091b      	lsrs	r3, r3, #4
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	3301      	adds	r3, #1
 8003a64:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a66:	4b10      	ldr	r3, [pc, #64]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	0a1b      	lsrs	r3, r3, #8
 8003a6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	fb03 f202 	mul.w	r2, r3, r2
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	0e5b      	lsrs	r3, r3, #25
 8003a84:	f003 0303 	and.w	r3, r3, #3
 8003a88:	3301      	adds	r3, #1
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a96:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a98:	69bb      	ldr	r3, [r7, #24]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3724      	adds	r7, #36	@ 0x24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	08005f60 	.word	0x08005f60
 8003ab0:	00f42400 	.word	0x00f42400
 8003ab4:	007a1200 	.word	0x007a1200

08003ab8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003abc:	4b03      	ldr	r3, [pc, #12]	@ (8003acc <HAL_RCC_GetHCLKFreq+0x14>)
 8003abe:	681b      	ldr	r3, [r3, #0]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	20000000 	.word	0x20000000

08003ad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ad4:	f7ff fff0 	bl	8003ab8 <HAL_RCC_GetHCLKFreq>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	4b06      	ldr	r3, [pc, #24]	@ (8003af4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	0a1b      	lsrs	r3, r3, #8
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	4904      	ldr	r1, [pc, #16]	@ (8003af8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ae6:	5ccb      	ldrb	r3, [r1, r3]
 8003ae8:	f003 031f 	and.w	r3, r3, #31
 8003aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	40021000 	.word	0x40021000
 8003af8:	08005f58 	.word	0x08005f58

08003afc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b00:	f7ff ffda 	bl	8003ab8 <HAL_RCC_GetHCLKFreq>
 8003b04:	4602      	mov	r2, r0
 8003b06:	4b06      	ldr	r3, [pc, #24]	@ (8003b20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	0adb      	lsrs	r3, r3, #11
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	4904      	ldr	r1, [pc, #16]	@ (8003b24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b12:	5ccb      	ldrb	r3, [r1, r3]
 8003b14:	f003 031f 	and.w	r3, r3, #31
 8003b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40021000 	.word	0x40021000
 8003b24:	08005f58 	.word	0x08005f58

08003b28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b30:	2300      	movs	r3, #0
 8003b32:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b34:	4b2a      	ldr	r3, [pc, #168]	@ (8003be0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b40:	f7ff f9ee 	bl	8002f20 <HAL_PWREx_GetVoltageRange>
 8003b44:	6178      	str	r0, [r7, #20]
 8003b46:	e014      	b.n	8003b72 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b48:	4b25      	ldr	r3, [pc, #148]	@ (8003be0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b4c:	4a24      	ldr	r2, [pc, #144]	@ (8003be0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b52:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b54:	4b22      	ldr	r3, [pc, #136]	@ (8003be0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b5c:	60fb      	str	r3, [r7, #12]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b60:	f7ff f9de 	bl	8002f20 <HAL_PWREx_GetVoltageRange>
 8003b64:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b66:	4b1e      	ldr	r3, [pc, #120]	@ (8003be0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b6a:	4a1d      	ldr	r2, [pc, #116]	@ (8003be0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b70:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b78:	d10b      	bne.n	8003b92 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b80      	cmp	r3, #128	@ 0x80
 8003b7e:	d919      	bls.n	8003bb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2ba0      	cmp	r3, #160	@ 0xa0
 8003b84:	d902      	bls.n	8003b8c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b86:	2302      	movs	r3, #2
 8003b88:	613b      	str	r3, [r7, #16]
 8003b8a:	e013      	b.n	8003bb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	613b      	str	r3, [r7, #16]
 8003b90:	e010      	b.n	8003bb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b80      	cmp	r3, #128	@ 0x80
 8003b96:	d902      	bls.n	8003b9e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b98:	2303      	movs	r3, #3
 8003b9a:	613b      	str	r3, [r7, #16]
 8003b9c:	e00a      	b.n	8003bb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b80      	cmp	r3, #128	@ 0x80
 8003ba2:	d102      	bne.n	8003baa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	613b      	str	r3, [r7, #16]
 8003ba8:	e004      	b.n	8003bb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b70      	cmp	r3, #112	@ 0x70
 8003bae:	d101      	bne.n	8003bb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8003be4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f023 0207 	bic.w	r2, r3, #7
 8003bbc:	4909      	ldr	r1, [pc, #36]	@ (8003be4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003bc4:	4b07      	ldr	r3, [pc, #28]	@ (8003be4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0307 	and.w	r3, r3, #7
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d001      	beq.n	8003bd6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e000      	b.n	8003bd8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3718      	adds	r7, #24
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	40021000 	.word	0x40021000
 8003be4:	40022000 	.word	0x40022000

08003be8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d041      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c08:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c0c:	d02a      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003c0e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c12:	d824      	bhi.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c14:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c18:	d008      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c1a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c1e:	d81e      	bhi.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00a      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003c24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c28:	d010      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c2a:	e018      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c2c:	4b86      	ldr	r3, [pc, #536]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	4a85      	ldr	r2, [pc, #532]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c36:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c38:	e015      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	2100      	movs	r1, #0
 8003c40:	4618      	mov	r0, r3
 8003c42:	f000 fabb 	bl	80041bc <RCCEx_PLLSAI1_Config>
 8003c46:	4603      	mov	r3, r0
 8003c48:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c4a:	e00c      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3320      	adds	r3, #32
 8003c50:	2100      	movs	r1, #0
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 fba6 	bl	80043a4 <RCCEx_PLLSAI2_Config>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c5c:	e003      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	74fb      	strb	r3, [r7, #19]
      break;
 8003c62:	e000      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003c64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c66:	7cfb      	ldrb	r3, [r7, #19]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10b      	bne.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c6c:	4b76      	ldr	r3, [pc, #472]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c72:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c7a:	4973      	ldr	r1, [pc, #460]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003c82:	e001      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c84:	7cfb      	ldrb	r3, [r7, #19]
 8003c86:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d041      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c98:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c9c:	d02a      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003c9e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ca2:	d824      	bhi.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ca4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ca8:	d008      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003caa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003cae:	d81e      	bhi.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00a      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003cb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003cb8:	d010      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003cba:	e018      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003cbc:	4b62      	ldr	r3, [pc, #392]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	4a61      	ldr	r2, [pc, #388]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cc6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003cc8:	e015      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	3304      	adds	r3, #4
 8003cce:	2100      	movs	r1, #0
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 fa73 	bl	80041bc <RCCEx_PLLSAI1_Config>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003cda:	e00c      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3320      	adds	r3, #32
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 fb5e 	bl	80043a4 <RCCEx_PLLSAI2_Config>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003cec:	e003      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	74fb      	strb	r3, [r7, #19]
      break;
 8003cf2:	e000      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003cf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cf6:	7cfb      	ldrb	r3, [r7, #19]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10b      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003cfc:	4b52      	ldr	r3, [pc, #328]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d02:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d0a:	494f      	ldr	r1, [pc, #316]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003d12:	e001      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d14:	7cfb      	ldrb	r3, [r7, #19]
 8003d16:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 80a0 	beq.w	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d26:	2300      	movs	r3, #0
 8003d28:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d2a:	4b47      	ldr	r3, [pc, #284]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003d36:	2301      	movs	r3, #1
 8003d38:	e000      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00d      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d40:	4b41      	ldr	r3, [pc, #260]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d44:	4a40      	ldr	r2, [pc, #256]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d4c:	4b3e      	ldr	r3, [pc, #248]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d54:	60bb      	str	r3, [r7, #8]
 8003d56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d5c:	4b3b      	ldr	r3, [pc, #236]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a3a      	ldr	r2, [pc, #232]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d68:	f7fd fe3e 	bl	80019e8 <HAL_GetTick>
 8003d6c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d6e:	e009      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d70:	f7fd fe3a 	bl	80019e8 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d902      	bls.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	74fb      	strb	r3, [r7, #19]
        break;
 8003d82:	e005      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d84:	4b31      	ldr	r3, [pc, #196]	@ (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0ef      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003d90:	7cfb      	ldrb	r3, [r7, #19]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d15c      	bne.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d96:	4b2c      	ldr	r3, [pc, #176]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003da0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d01f      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d019      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003db4:	4b24      	ldr	r3, [pc, #144]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dbe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dc0:	4b21      	ldr	r3, [pc, #132]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dc6:	4a20      	ldr	r2, [pc, #128]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd6:	4a1c      	ldr	r2, [pc, #112]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ddc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003de0:	4a19      	ldr	r2, [pc, #100]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d016      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df2:	f7fd fdf9 	bl	80019e8 <HAL_GetTick>
 8003df6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003df8:	e00b      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dfa:	f7fd fdf5 	bl	80019e8 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d902      	bls.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	74fb      	strb	r3, [r7, #19]
            break;
 8003e10:	e006      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e12:	4b0d      	ldr	r3, [pc, #52]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0ec      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003e20:	7cfb      	ldrb	r3, [r7, #19]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10c      	bne.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e26:	4b08      	ldr	r3, [pc, #32]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e36:	4904      	ldr	r1, [pc, #16]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003e3e:	e009      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e40:	7cfb      	ldrb	r3, [r7, #19]
 8003e42:	74bb      	strb	r3, [r7, #18]
 8003e44:	e006      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003e46:	bf00      	nop
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e50:	7cfb      	ldrb	r3, [r7, #19]
 8003e52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e54:	7c7b      	ldrb	r3, [r7, #17]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d105      	bne.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e5a:	4b9e      	ldr	r3, [pc, #632]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e5e:	4a9d      	ldr	r2, [pc, #628]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e64:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00a      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e72:	4b98      	ldr	r3, [pc, #608]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e78:	f023 0203 	bic.w	r2, r3, #3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e80:	4994      	ldr	r1, [pc, #592]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00a      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e94:	4b8f      	ldr	r3, [pc, #572]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e9a:	f023 020c 	bic.w	r2, r3, #12
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ea2:	498c      	ldr	r1, [pc, #560]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0304 	and.w	r3, r3, #4
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00a      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003eb6:	4b87      	ldr	r3, [pc, #540]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ebc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec4:	4983      	ldr	r1, [pc, #524]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0308 	and.w	r3, r3, #8
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00a      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ed8:	4b7e      	ldr	r3, [pc, #504]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ede:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee6:	497b      	ldr	r1, [pc, #492]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0310 	and.w	r3, r3, #16
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003efa:	4b76      	ldr	r3, [pc, #472]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f08:	4972      	ldr	r1, [pc, #456]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0320 	and.w	r3, r3, #32
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00a      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f1c:	4b6d      	ldr	r3, [pc, #436]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f22:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f2a:	496a      	ldr	r1, [pc, #424]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00a      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f3e:	4b65      	ldr	r3, [pc, #404]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f44:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f4c:	4961      	ldr	r1, [pc, #388]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00a      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f60:	4b5c      	ldr	r3, [pc, #368]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f66:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f6e:	4959      	ldr	r1, [pc, #356]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00a      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f82:	4b54      	ldr	r3, [pc, #336]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f88:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f90:	4950      	ldr	r1, [pc, #320]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00a      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fa4:	4b4b      	ldr	r3, [pc, #300]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003faa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fb2:	4948      	ldr	r1, [pc, #288]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00a      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fc6:	4b43      	ldr	r3, [pc, #268]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fcc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fd4:	493f      	ldr	r1, [pc, #252]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d028      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fe8:	4b3a      	ldr	r3, [pc, #232]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ff6:	4937      	ldr	r1, [pc, #220]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004002:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004006:	d106      	bne.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004008:	4b32      	ldr	r3, [pc, #200]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	4a31      	ldr	r2, [pc, #196]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004012:	60d3      	str	r3, [r2, #12]
 8004014:	e011      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800401a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800401e:	d10c      	bne.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	3304      	adds	r3, #4
 8004024:	2101      	movs	r1, #1
 8004026:	4618      	mov	r0, r3
 8004028:	f000 f8c8 	bl	80041bc <RCCEx_PLLSAI1_Config>
 800402c:	4603      	mov	r3, r0
 800402e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004030:	7cfb      	ldrb	r3, [r7, #19]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004036:	7cfb      	ldrb	r3, [r7, #19]
 8004038:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d028      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004046:	4b23      	ldr	r3, [pc, #140]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800404c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004054:	491f      	ldr	r1, [pc, #124]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004056:	4313      	orrs	r3, r2
 8004058:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004060:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004064:	d106      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004066:	4b1b      	ldr	r3, [pc, #108]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	4a1a      	ldr	r2, [pc, #104]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800406c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004070:	60d3      	str	r3, [r2, #12]
 8004072:	e011      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004078:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800407c:	d10c      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	3304      	adds	r3, #4
 8004082:	2101      	movs	r1, #1
 8004084:	4618      	mov	r0, r3
 8004086:	f000 f899 	bl	80041bc <RCCEx_PLLSAI1_Config>
 800408a:	4603      	mov	r3, r0
 800408c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800408e:	7cfb      	ldrb	r3, [r7, #19]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004094:	7cfb      	ldrb	r3, [r7, #19]
 8004096:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d02b      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040a4:	4b0b      	ldr	r3, [pc, #44]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040b2:	4908      	ldr	r1, [pc, #32]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040c2:	d109      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040c4:	4b03      	ldr	r3, [pc, #12]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	4a02      	ldr	r2, [pc, #8]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040ce:	60d3      	str	r3, [r2, #12]
 80040d0:	e014      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80040d2:	bf00      	nop
 80040d4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80040e0:	d10c      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3304      	adds	r3, #4
 80040e6:	2101      	movs	r1, #1
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 f867 	bl	80041bc <RCCEx_PLLSAI1_Config>
 80040ee:	4603      	mov	r3, r0
 80040f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040f2:	7cfb      	ldrb	r3, [r7, #19]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80040f8:	7cfb      	ldrb	r3, [r7, #19]
 80040fa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d02f      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004108:	4b2b      	ldr	r3, [pc, #172]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800410a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800410e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004116:	4928      	ldr	r1, [pc, #160]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004118:	4313      	orrs	r3, r2
 800411a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004122:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004126:	d10d      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	3304      	adds	r3, #4
 800412c:	2102      	movs	r1, #2
 800412e:	4618      	mov	r0, r3
 8004130:	f000 f844 	bl	80041bc <RCCEx_PLLSAI1_Config>
 8004134:	4603      	mov	r3, r0
 8004136:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004138:	7cfb      	ldrb	r3, [r7, #19]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d014      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800413e:	7cfb      	ldrb	r3, [r7, #19]
 8004140:	74bb      	strb	r3, [r7, #18]
 8004142:	e011      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004148:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800414c:	d10c      	bne.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3320      	adds	r3, #32
 8004152:	2102      	movs	r1, #2
 8004154:	4618      	mov	r0, r3
 8004156:	f000 f925 	bl	80043a4 <RCCEx_PLLSAI2_Config>
 800415a:	4603      	mov	r3, r0
 800415c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800415e:	7cfb      	ldrb	r3, [r7, #19]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004164:	7cfb      	ldrb	r3, [r7, #19]
 8004166:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00a      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004174:	4b10      	ldr	r3, [pc, #64]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800417a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004182:	490d      	ldr	r1, [pc, #52]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004184:	4313      	orrs	r3, r2
 8004186:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00b      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004196:	4b08      	ldr	r3, [pc, #32]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004198:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800419c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041a6:	4904      	ldr	r1, [pc, #16]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80041ae:	7cbb      	ldrb	r3, [r7, #18]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3718      	adds	r7, #24
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40021000 	.word	0x40021000

080041bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041c6:	2300      	movs	r3, #0
 80041c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041ca:	4b75      	ldr	r3, [pc, #468]	@ (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	f003 0303 	and.w	r3, r3, #3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d018      	beq.n	8004208 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80041d6:	4b72      	ldr	r3, [pc, #456]	@ (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	f003 0203 	and.w	r2, r3, #3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d10d      	bne.n	8004202 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
       ||
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d009      	beq.n	8004202 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80041ee:	4b6c      	ldr	r3, [pc, #432]	@ (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	091b      	lsrs	r3, r3, #4
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
       ||
 80041fe:	429a      	cmp	r2, r3
 8004200:	d047      	beq.n	8004292 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	73fb      	strb	r3, [r7, #15]
 8004206:	e044      	b.n	8004292 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b03      	cmp	r3, #3
 800420e:	d018      	beq.n	8004242 <RCCEx_PLLSAI1_Config+0x86>
 8004210:	2b03      	cmp	r3, #3
 8004212:	d825      	bhi.n	8004260 <RCCEx_PLLSAI1_Config+0xa4>
 8004214:	2b01      	cmp	r3, #1
 8004216:	d002      	beq.n	800421e <RCCEx_PLLSAI1_Config+0x62>
 8004218:	2b02      	cmp	r3, #2
 800421a:	d009      	beq.n	8004230 <RCCEx_PLLSAI1_Config+0x74>
 800421c:	e020      	b.n	8004260 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800421e:	4b60      	ldr	r3, [pc, #384]	@ (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d11d      	bne.n	8004266 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800422e:	e01a      	b.n	8004266 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004230:	4b5b      	ldr	r3, [pc, #364]	@ (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004238:	2b00      	cmp	r3, #0
 800423a:	d116      	bne.n	800426a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004240:	e013      	b.n	800426a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004242:	4b57      	ldr	r3, [pc, #348]	@ (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10f      	bne.n	800426e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800424e:	4b54      	ldr	r3, [pc, #336]	@ (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d109      	bne.n	800426e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800425e:	e006      	b.n	800426e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	73fb      	strb	r3, [r7, #15]
      break;
 8004264:	e004      	b.n	8004270 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004266:	bf00      	nop
 8004268:	e002      	b.n	8004270 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800426a:	bf00      	nop
 800426c:	e000      	b.n	8004270 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800426e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004270:	7bfb      	ldrb	r3, [r7, #15]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10d      	bne.n	8004292 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004276:	4b4a      	ldr	r3, [pc, #296]	@ (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6819      	ldr	r1, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	3b01      	subs	r3, #1
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	430b      	orrs	r3, r1
 800428c:	4944      	ldr	r1, [pc, #272]	@ (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800428e:	4313      	orrs	r3, r2
 8004290:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004292:	7bfb      	ldrb	r3, [r7, #15]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d17d      	bne.n	8004394 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004298:	4b41      	ldr	r3, [pc, #260]	@ (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a40      	ldr	r2, [pc, #256]	@ (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800429e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80042a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042a4:	f7fd fba0 	bl	80019e8 <HAL_GetTick>
 80042a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042aa:	e009      	b.n	80042c0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042ac:	f7fd fb9c 	bl	80019e8 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d902      	bls.n	80042c0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	73fb      	strb	r3, [r7, #15]
        break;
 80042be:	e005      	b.n	80042cc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042c0:	4b37      	ldr	r3, [pc, #220]	@ (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1ef      	bne.n	80042ac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d160      	bne.n	8004394 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d111      	bne.n	80042fc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042d8:	4b31      	ldr	r3, [pc, #196]	@ (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80042e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	6892      	ldr	r2, [r2, #8]
 80042e8:	0211      	lsls	r1, r2, #8
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	68d2      	ldr	r2, [r2, #12]
 80042ee:	0912      	lsrs	r2, r2, #4
 80042f0:	0452      	lsls	r2, r2, #17
 80042f2:	430a      	orrs	r2, r1
 80042f4:	492a      	ldr	r1, [pc, #168]	@ (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	610b      	str	r3, [r1, #16]
 80042fa:	e027      	b.n	800434c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d112      	bne.n	8004328 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004302:	4b27      	ldr	r3, [pc, #156]	@ (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800430a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	6892      	ldr	r2, [r2, #8]
 8004312:	0211      	lsls	r1, r2, #8
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	6912      	ldr	r2, [r2, #16]
 8004318:	0852      	lsrs	r2, r2, #1
 800431a:	3a01      	subs	r2, #1
 800431c:	0552      	lsls	r2, r2, #21
 800431e:	430a      	orrs	r2, r1
 8004320:	491f      	ldr	r1, [pc, #124]	@ (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004322:	4313      	orrs	r3, r2
 8004324:	610b      	str	r3, [r1, #16]
 8004326:	e011      	b.n	800434c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004328:	4b1d      	ldr	r3, [pc, #116]	@ (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004330:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	6892      	ldr	r2, [r2, #8]
 8004338:	0211      	lsls	r1, r2, #8
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	6952      	ldr	r2, [r2, #20]
 800433e:	0852      	lsrs	r2, r2, #1
 8004340:	3a01      	subs	r2, #1
 8004342:	0652      	lsls	r2, r2, #25
 8004344:	430a      	orrs	r2, r1
 8004346:	4916      	ldr	r1, [pc, #88]	@ (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004348:	4313      	orrs	r3, r2
 800434a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800434c:	4b14      	ldr	r3, [pc, #80]	@ (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a13      	ldr	r2, [pc, #76]	@ (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004352:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004356:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004358:	f7fd fb46 	bl	80019e8 <HAL_GetTick>
 800435c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800435e:	e009      	b.n	8004374 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004360:	f7fd fb42 	bl	80019e8 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d902      	bls.n	8004374 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	73fb      	strb	r3, [r7, #15]
          break;
 8004372:	e005      	b.n	8004380 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004374:	4b0a      	ldr	r3, [pc, #40]	@ (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d0ef      	beq.n	8004360 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004380:	7bfb      	ldrb	r3, [r7, #15]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d106      	bne.n	8004394 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004386:	4b06      	ldr	r3, [pc, #24]	@ (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004388:	691a      	ldr	r2, [r3, #16]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	4904      	ldr	r1, [pc, #16]	@ (80043a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004390:	4313      	orrs	r3, r2
 8004392:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004394:	7bfb      	ldrb	r3, [r7, #15]
}
 8004396:	4618      	mov	r0, r3
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	40021000 	.word	0x40021000

080043a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043ae:	2300      	movs	r3, #0
 80043b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043b2:	4b6a      	ldr	r3, [pc, #424]	@ (800455c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d018      	beq.n	80043f0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80043be:	4b67      	ldr	r3, [pc, #412]	@ (800455c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	f003 0203 	and.w	r2, r3, #3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d10d      	bne.n	80043ea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
       ||
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d009      	beq.n	80043ea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80043d6:	4b61      	ldr	r3, [pc, #388]	@ (800455c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	091b      	lsrs	r3, r3, #4
 80043dc:	f003 0307 	and.w	r3, r3, #7
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
       ||
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d047      	beq.n	800447a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	73fb      	strb	r3, [r7, #15]
 80043ee:	e044      	b.n	800447a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2b03      	cmp	r3, #3
 80043f6:	d018      	beq.n	800442a <RCCEx_PLLSAI2_Config+0x86>
 80043f8:	2b03      	cmp	r3, #3
 80043fa:	d825      	bhi.n	8004448 <RCCEx_PLLSAI2_Config+0xa4>
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d002      	beq.n	8004406 <RCCEx_PLLSAI2_Config+0x62>
 8004400:	2b02      	cmp	r3, #2
 8004402:	d009      	beq.n	8004418 <RCCEx_PLLSAI2_Config+0x74>
 8004404:	e020      	b.n	8004448 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004406:	4b55      	ldr	r3, [pc, #340]	@ (800455c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d11d      	bne.n	800444e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004416:	e01a      	b.n	800444e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004418:	4b50      	ldr	r3, [pc, #320]	@ (800455c <RCCEx_PLLSAI2_Config+0x1b8>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004420:	2b00      	cmp	r3, #0
 8004422:	d116      	bne.n	8004452 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004428:	e013      	b.n	8004452 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800442a:	4b4c      	ldr	r3, [pc, #304]	@ (800455c <RCCEx_PLLSAI2_Config+0x1b8>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10f      	bne.n	8004456 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004436:	4b49      	ldr	r3, [pc, #292]	@ (800455c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d109      	bne.n	8004456 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004446:	e006      	b.n	8004456 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	73fb      	strb	r3, [r7, #15]
      break;
 800444c:	e004      	b.n	8004458 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800444e:	bf00      	nop
 8004450:	e002      	b.n	8004458 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004452:	bf00      	nop
 8004454:	e000      	b.n	8004458 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004456:	bf00      	nop
    }

    if(status == HAL_OK)
 8004458:	7bfb      	ldrb	r3, [r7, #15]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10d      	bne.n	800447a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800445e:	4b3f      	ldr	r3, [pc, #252]	@ (800455c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6819      	ldr	r1, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	3b01      	subs	r3, #1
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	430b      	orrs	r3, r1
 8004474:	4939      	ldr	r1, [pc, #228]	@ (800455c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004476:	4313      	orrs	r3, r2
 8004478:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800447a:	7bfb      	ldrb	r3, [r7, #15]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d167      	bne.n	8004550 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004480:	4b36      	ldr	r3, [pc, #216]	@ (800455c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a35      	ldr	r2, [pc, #212]	@ (800455c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004486:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800448a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800448c:	f7fd faac 	bl	80019e8 <HAL_GetTick>
 8004490:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004492:	e009      	b.n	80044a8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004494:	f7fd faa8 	bl	80019e8 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d902      	bls.n	80044a8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	73fb      	strb	r3, [r7, #15]
        break;
 80044a6:	e005      	b.n	80044b4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80044a8:	4b2c      	ldr	r3, [pc, #176]	@ (800455c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1ef      	bne.n	8004494 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d14a      	bne.n	8004550 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d111      	bne.n	80044e4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044c0:	4b26      	ldr	r3, [pc, #152]	@ (800455c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80044c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6892      	ldr	r2, [r2, #8]
 80044d0:	0211      	lsls	r1, r2, #8
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	68d2      	ldr	r2, [r2, #12]
 80044d6:	0912      	lsrs	r2, r2, #4
 80044d8:	0452      	lsls	r2, r2, #17
 80044da:	430a      	orrs	r2, r1
 80044dc:	491f      	ldr	r1, [pc, #124]	@ (800455c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	614b      	str	r3, [r1, #20]
 80044e2:	e011      	b.n	8004508 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80044e4:	4b1d      	ldr	r3, [pc, #116]	@ (800455c <RCCEx_PLLSAI2_Config+0x1b8>)
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80044ec:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	6892      	ldr	r2, [r2, #8]
 80044f4:	0211      	lsls	r1, r2, #8
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	6912      	ldr	r2, [r2, #16]
 80044fa:	0852      	lsrs	r2, r2, #1
 80044fc:	3a01      	subs	r2, #1
 80044fe:	0652      	lsls	r2, r2, #25
 8004500:	430a      	orrs	r2, r1
 8004502:	4916      	ldr	r1, [pc, #88]	@ (800455c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004504:	4313      	orrs	r3, r2
 8004506:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004508:	4b14      	ldr	r3, [pc, #80]	@ (800455c <RCCEx_PLLSAI2_Config+0x1b8>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a13      	ldr	r2, [pc, #76]	@ (800455c <RCCEx_PLLSAI2_Config+0x1b8>)
 800450e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004512:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004514:	f7fd fa68 	bl	80019e8 <HAL_GetTick>
 8004518:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800451a:	e009      	b.n	8004530 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800451c:	f7fd fa64 	bl	80019e8 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d902      	bls.n	8004530 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	73fb      	strb	r3, [r7, #15]
          break;
 800452e:	e005      	b.n	800453c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004530:	4b0a      	ldr	r3, [pc, #40]	@ (800455c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0ef      	beq.n	800451c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800453c:	7bfb      	ldrb	r3, [r7, #15]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d106      	bne.n	8004550 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004542:	4b06      	ldr	r3, [pc, #24]	@ (800455c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004544:	695a      	ldr	r2, [r3, #20]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	4904      	ldr	r1, [pc, #16]	@ (800455c <RCCEx_PLLSAI2_Config+0x1b8>)
 800454c:	4313      	orrs	r3, r2
 800454e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004550:	7bfb      	ldrb	r3, [r7, #15]
}
 8004552:	4618      	mov	r0, r3
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	40021000 	.word	0x40021000

08004560 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e040      	b.n	80045f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004576:	2b00      	cmp	r3, #0
 8004578:	d106      	bne.n	8004588 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f7fc f9ac 	bl	80008e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2224      	movs	r2, #36	@ 0x24
 800458c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 0201 	bic.w	r2, r2, #1
 800459c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d002      	beq.n	80045ac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 fb6a 	bl	8004c80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 f8af 	bl	8004710 <UART_SetConfig>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d101      	bne.n	80045bc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e01b      	b.n	80045f4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80045ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689a      	ldr	r2, [r3, #8]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80045da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f042 0201 	orr.w	r2, r2, #1
 80045ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 fbe9 	bl	8004dc4 <UART_CheckIdleState>
 80045f2:	4603      	mov	r3, r0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b08a      	sub	sp, #40	@ 0x28
 8004600:	af02      	add	r7, sp, #8
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	603b      	str	r3, [r7, #0]
 8004608:	4613      	mov	r3, r2
 800460a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004610:	2b20      	cmp	r3, #32
 8004612:	d177      	bne.n	8004704 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d002      	beq.n	8004620 <HAL_UART_Transmit+0x24>
 800461a:	88fb      	ldrh	r3, [r7, #6]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e070      	b.n	8004706 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2221      	movs	r2, #33	@ 0x21
 8004630:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004632:	f7fd f9d9 	bl	80019e8 <HAL_GetTick>
 8004636:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	88fa      	ldrh	r2, [r7, #6]
 800463c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	88fa      	ldrh	r2, [r7, #6]
 8004644:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004650:	d108      	bne.n	8004664 <HAL_UART_Transmit+0x68>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d104      	bne.n	8004664 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800465a:	2300      	movs	r3, #0
 800465c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	61bb      	str	r3, [r7, #24]
 8004662:	e003      	b.n	800466c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004668:	2300      	movs	r3, #0
 800466a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800466c:	e02f      	b.n	80046ce <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	2200      	movs	r2, #0
 8004676:	2180      	movs	r1, #128	@ 0x80
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 fc4b 	bl	8004f14 <UART_WaitOnFlagUntilTimeout>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d004      	beq.n	800468e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2220      	movs	r2, #32
 8004688:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e03b      	b.n	8004706 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10b      	bne.n	80046ac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	881a      	ldrh	r2, [r3, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046a0:	b292      	uxth	r2, r2
 80046a2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	3302      	adds	r3, #2
 80046a8:	61bb      	str	r3, [r7, #24]
 80046aa:	e007      	b.n	80046bc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	781a      	ldrb	r2, [r3, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	3301      	adds	r3, #1
 80046ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1c9      	bne.n	800466e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	9300      	str	r3, [sp, #0]
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	2200      	movs	r2, #0
 80046e2:	2140      	movs	r1, #64	@ 0x40
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	f000 fc15 	bl	8004f14 <UART_WaitOnFlagUntilTimeout>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d004      	beq.n	80046fa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2220      	movs	r2, #32
 80046f4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e005      	b.n	8004706 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2220      	movs	r2, #32
 80046fe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004700:	2300      	movs	r3, #0
 8004702:	e000      	b.n	8004706 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004704:	2302      	movs	r3, #2
  }
}
 8004706:	4618      	mov	r0, r3
 8004708:	3720      	adds	r7, #32
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
	...

08004710 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004714:	b08a      	sub	sp, #40	@ 0x28
 8004716:	af00      	add	r7, sp, #0
 8004718:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800471a:	2300      	movs	r3, #0
 800471c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	431a      	orrs	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	431a      	orrs	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	69db      	ldr	r3, [r3, #28]
 8004734:	4313      	orrs	r3, r2
 8004736:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	4ba4      	ldr	r3, [pc, #656]	@ (80049d0 <UART_SetConfig+0x2c0>)
 8004740:	4013      	ands	r3, r2
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	6812      	ldr	r2, [r2, #0]
 8004746:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004748:	430b      	orrs	r3, r1
 800474a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	68da      	ldr	r2, [r3, #12]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a99      	ldr	r2, [pc, #612]	@ (80049d4 <UART_SetConfig+0x2c4>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d004      	beq.n	800477c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004778:	4313      	orrs	r3, r2
 800477a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800478c:	430a      	orrs	r2, r1
 800478e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a90      	ldr	r2, [pc, #576]	@ (80049d8 <UART_SetConfig+0x2c8>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d126      	bne.n	80047e8 <UART_SetConfig+0xd8>
 800479a:	4b90      	ldr	r3, [pc, #576]	@ (80049dc <UART_SetConfig+0x2cc>)
 800479c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047a0:	f003 0303 	and.w	r3, r3, #3
 80047a4:	2b03      	cmp	r3, #3
 80047a6:	d81b      	bhi.n	80047e0 <UART_SetConfig+0xd0>
 80047a8:	a201      	add	r2, pc, #4	@ (adr r2, 80047b0 <UART_SetConfig+0xa0>)
 80047aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ae:	bf00      	nop
 80047b0:	080047c1 	.word	0x080047c1
 80047b4:	080047d1 	.word	0x080047d1
 80047b8:	080047c9 	.word	0x080047c9
 80047bc:	080047d9 	.word	0x080047d9
 80047c0:	2301      	movs	r3, #1
 80047c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047c6:	e116      	b.n	80049f6 <UART_SetConfig+0x2e6>
 80047c8:	2302      	movs	r3, #2
 80047ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047ce:	e112      	b.n	80049f6 <UART_SetConfig+0x2e6>
 80047d0:	2304      	movs	r3, #4
 80047d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047d6:	e10e      	b.n	80049f6 <UART_SetConfig+0x2e6>
 80047d8:	2308      	movs	r3, #8
 80047da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047de:	e10a      	b.n	80049f6 <UART_SetConfig+0x2e6>
 80047e0:	2310      	movs	r3, #16
 80047e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047e6:	e106      	b.n	80049f6 <UART_SetConfig+0x2e6>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a7c      	ldr	r2, [pc, #496]	@ (80049e0 <UART_SetConfig+0x2d0>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d138      	bne.n	8004864 <UART_SetConfig+0x154>
 80047f2:	4b7a      	ldr	r3, [pc, #488]	@ (80049dc <UART_SetConfig+0x2cc>)
 80047f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047f8:	f003 030c 	and.w	r3, r3, #12
 80047fc:	2b0c      	cmp	r3, #12
 80047fe:	d82d      	bhi.n	800485c <UART_SetConfig+0x14c>
 8004800:	a201      	add	r2, pc, #4	@ (adr r2, 8004808 <UART_SetConfig+0xf8>)
 8004802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004806:	bf00      	nop
 8004808:	0800483d 	.word	0x0800483d
 800480c:	0800485d 	.word	0x0800485d
 8004810:	0800485d 	.word	0x0800485d
 8004814:	0800485d 	.word	0x0800485d
 8004818:	0800484d 	.word	0x0800484d
 800481c:	0800485d 	.word	0x0800485d
 8004820:	0800485d 	.word	0x0800485d
 8004824:	0800485d 	.word	0x0800485d
 8004828:	08004845 	.word	0x08004845
 800482c:	0800485d 	.word	0x0800485d
 8004830:	0800485d 	.word	0x0800485d
 8004834:	0800485d 	.word	0x0800485d
 8004838:	08004855 	.word	0x08004855
 800483c:	2300      	movs	r3, #0
 800483e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004842:	e0d8      	b.n	80049f6 <UART_SetConfig+0x2e6>
 8004844:	2302      	movs	r3, #2
 8004846:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800484a:	e0d4      	b.n	80049f6 <UART_SetConfig+0x2e6>
 800484c:	2304      	movs	r3, #4
 800484e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004852:	e0d0      	b.n	80049f6 <UART_SetConfig+0x2e6>
 8004854:	2308      	movs	r3, #8
 8004856:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800485a:	e0cc      	b.n	80049f6 <UART_SetConfig+0x2e6>
 800485c:	2310      	movs	r3, #16
 800485e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004862:	e0c8      	b.n	80049f6 <UART_SetConfig+0x2e6>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a5e      	ldr	r2, [pc, #376]	@ (80049e4 <UART_SetConfig+0x2d4>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d125      	bne.n	80048ba <UART_SetConfig+0x1aa>
 800486e:	4b5b      	ldr	r3, [pc, #364]	@ (80049dc <UART_SetConfig+0x2cc>)
 8004870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004874:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004878:	2b30      	cmp	r3, #48	@ 0x30
 800487a:	d016      	beq.n	80048aa <UART_SetConfig+0x19a>
 800487c:	2b30      	cmp	r3, #48	@ 0x30
 800487e:	d818      	bhi.n	80048b2 <UART_SetConfig+0x1a2>
 8004880:	2b20      	cmp	r3, #32
 8004882:	d00a      	beq.n	800489a <UART_SetConfig+0x18a>
 8004884:	2b20      	cmp	r3, #32
 8004886:	d814      	bhi.n	80048b2 <UART_SetConfig+0x1a2>
 8004888:	2b00      	cmp	r3, #0
 800488a:	d002      	beq.n	8004892 <UART_SetConfig+0x182>
 800488c:	2b10      	cmp	r3, #16
 800488e:	d008      	beq.n	80048a2 <UART_SetConfig+0x192>
 8004890:	e00f      	b.n	80048b2 <UART_SetConfig+0x1a2>
 8004892:	2300      	movs	r3, #0
 8004894:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004898:	e0ad      	b.n	80049f6 <UART_SetConfig+0x2e6>
 800489a:	2302      	movs	r3, #2
 800489c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048a0:	e0a9      	b.n	80049f6 <UART_SetConfig+0x2e6>
 80048a2:	2304      	movs	r3, #4
 80048a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048a8:	e0a5      	b.n	80049f6 <UART_SetConfig+0x2e6>
 80048aa:	2308      	movs	r3, #8
 80048ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048b0:	e0a1      	b.n	80049f6 <UART_SetConfig+0x2e6>
 80048b2:	2310      	movs	r3, #16
 80048b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048b8:	e09d      	b.n	80049f6 <UART_SetConfig+0x2e6>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a4a      	ldr	r2, [pc, #296]	@ (80049e8 <UART_SetConfig+0x2d8>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d125      	bne.n	8004910 <UART_SetConfig+0x200>
 80048c4:	4b45      	ldr	r3, [pc, #276]	@ (80049dc <UART_SetConfig+0x2cc>)
 80048c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80048ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80048d0:	d016      	beq.n	8004900 <UART_SetConfig+0x1f0>
 80048d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80048d4:	d818      	bhi.n	8004908 <UART_SetConfig+0x1f8>
 80048d6:	2b80      	cmp	r3, #128	@ 0x80
 80048d8:	d00a      	beq.n	80048f0 <UART_SetConfig+0x1e0>
 80048da:	2b80      	cmp	r3, #128	@ 0x80
 80048dc:	d814      	bhi.n	8004908 <UART_SetConfig+0x1f8>
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d002      	beq.n	80048e8 <UART_SetConfig+0x1d8>
 80048e2:	2b40      	cmp	r3, #64	@ 0x40
 80048e4:	d008      	beq.n	80048f8 <UART_SetConfig+0x1e8>
 80048e6:	e00f      	b.n	8004908 <UART_SetConfig+0x1f8>
 80048e8:	2300      	movs	r3, #0
 80048ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048ee:	e082      	b.n	80049f6 <UART_SetConfig+0x2e6>
 80048f0:	2302      	movs	r3, #2
 80048f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048f6:	e07e      	b.n	80049f6 <UART_SetConfig+0x2e6>
 80048f8:	2304      	movs	r3, #4
 80048fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048fe:	e07a      	b.n	80049f6 <UART_SetConfig+0x2e6>
 8004900:	2308      	movs	r3, #8
 8004902:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004906:	e076      	b.n	80049f6 <UART_SetConfig+0x2e6>
 8004908:	2310      	movs	r3, #16
 800490a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800490e:	e072      	b.n	80049f6 <UART_SetConfig+0x2e6>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a35      	ldr	r2, [pc, #212]	@ (80049ec <UART_SetConfig+0x2dc>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d12a      	bne.n	8004970 <UART_SetConfig+0x260>
 800491a:	4b30      	ldr	r3, [pc, #192]	@ (80049dc <UART_SetConfig+0x2cc>)
 800491c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004920:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004924:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004928:	d01a      	beq.n	8004960 <UART_SetConfig+0x250>
 800492a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800492e:	d81b      	bhi.n	8004968 <UART_SetConfig+0x258>
 8004930:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004934:	d00c      	beq.n	8004950 <UART_SetConfig+0x240>
 8004936:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800493a:	d815      	bhi.n	8004968 <UART_SetConfig+0x258>
 800493c:	2b00      	cmp	r3, #0
 800493e:	d003      	beq.n	8004948 <UART_SetConfig+0x238>
 8004940:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004944:	d008      	beq.n	8004958 <UART_SetConfig+0x248>
 8004946:	e00f      	b.n	8004968 <UART_SetConfig+0x258>
 8004948:	2300      	movs	r3, #0
 800494a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800494e:	e052      	b.n	80049f6 <UART_SetConfig+0x2e6>
 8004950:	2302      	movs	r3, #2
 8004952:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004956:	e04e      	b.n	80049f6 <UART_SetConfig+0x2e6>
 8004958:	2304      	movs	r3, #4
 800495a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800495e:	e04a      	b.n	80049f6 <UART_SetConfig+0x2e6>
 8004960:	2308      	movs	r3, #8
 8004962:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004966:	e046      	b.n	80049f6 <UART_SetConfig+0x2e6>
 8004968:	2310      	movs	r3, #16
 800496a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800496e:	e042      	b.n	80049f6 <UART_SetConfig+0x2e6>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a17      	ldr	r2, [pc, #92]	@ (80049d4 <UART_SetConfig+0x2c4>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d13a      	bne.n	80049f0 <UART_SetConfig+0x2e0>
 800497a:	4b18      	ldr	r3, [pc, #96]	@ (80049dc <UART_SetConfig+0x2cc>)
 800497c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004980:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004984:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004988:	d01a      	beq.n	80049c0 <UART_SetConfig+0x2b0>
 800498a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800498e:	d81b      	bhi.n	80049c8 <UART_SetConfig+0x2b8>
 8004990:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004994:	d00c      	beq.n	80049b0 <UART_SetConfig+0x2a0>
 8004996:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800499a:	d815      	bhi.n	80049c8 <UART_SetConfig+0x2b8>
 800499c:	2b00      	cmp	r3, #0
 800499e:	d003      	beq.n	80049a8 <UART_SetConfig+0x298>
 80049a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049a4:	d008      	beq.n	80049b8 <UART_SetConfig+0x2a8>
 80049a6:	e00f      	b.n	80049c8 <UART_SetConfig+0x2b8>
 80049a8:	2300      	movs	r3, #0
 80049aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ae:	e022      	b.n	80049f6 <UART_SetConfig+0x2e6>
 80049b0:	2302      	movs	r3, #2
 80049b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049b6:	e01e      	b.n	80049f6 <UART_SetConfig+0x2e6>
 80049b8:	2304      	movs	r3, #4
 80049ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049be:	e01a      	b.n	80049f6 <UART_SetConfig+0x2e6>
 80049c0:	2308      	movs	r3, #8
 80049c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049c6:	e016      	b.n	80049f6 <UART_SetConfig+0x2e6>
 80049c8:	2310      	movs	r3, #16
 80049ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ce:	e012      	b.n	80049f6 <UART_SetConfig+0x2e6>
 80049d0:	efff69f3 	.word	0xefff69f3
 80049d4:	40008000 	.word	0x40008000
 80049d8:	40013800 	.word	0x40013800
 80049dc:	40021000 	.word	0x40021000
 80049e0:	40004400 	.word	0x40004400
 80049e4:	40004800 	.word	0x40004800
 80049e8:	40004c00 	.word	0x40004c00
 80049ec:	40005000 	.word	0x40005000
 80049f0:	2310      	movs	r3, #16
 80049f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a9f      	ldr	r2, [pc, #636]	@ (8004c78 <UART_SetConfig+0x568>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d17a      	bne.n	8004af6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a00:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	d824      	bhi.n	8004a52 <UART_SetConfig+0x342>
 8004a08:	a201      	add	r2, pc, #4	@ (adr r2, 8004a10 <UART_SetConfig+0x300>)
 8004a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0e:	bf00      	nop
 8004a10:	08004a35 	.word	0x08004a35
 8004a14:	08004a53 	.word	0x08004a53
 8004a18:	08004a3d 	.word	0x08004a3d
 8004a1c:	08004a53 	.word	0x08004a53
 8004a20:	08004a43 	.word	0x08004a43
 8004a24:	08004a53 	.word	0x08004a53
 8004a28:	08004a53 	.word	0x08004a53
 8004a2c:	08004a53 	.word	0x08004a53
 8004a30:	08004a4b 	.word	0x08004a4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a34:	f7ff f84c 	bl	8003ad0 <HAL_RCC_GetPCLK1Freq>
 8004a38:	61f8      	str	r0, [r7, #28]
        break;
 8004a3a:	e010      	b.n	8004a5e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a3c:	4b8f      	ldr	r3, [pc, #572]	@ (8004c7c <UART_SetConfig+0x56c>)
 8004a3e:	61fb      	str	r3, [r7, #28]
        break;
 8004a40:	e00d      	b.n	8004a5e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a42:	f7fe ffad 	bl	80039a0 <HAL_RCC_GetSysClockFreq>
 8004a46:	61f8      	str	r0, [r7, #28]
        break;
 8004a48:	e009      	b.n	8004a5e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a4e:	61fb      	str	r3, [r7, #28]
        break;
 8004a50:	e005      	b.n	8004a5e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004a52:	2300      	movs	r3, #0
 8004a54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004a5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f000 80fb 	beq.w	8004c5c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	685a      	ldr	r2, [r3, #4]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	005b      	lsls	r3, r3, #1
 8004a6e:	4413      	add	r3, r2
 8004a70:	69fa      	ldr	r2, [r7, #28]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d305      	bcc.n	8004a82 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a7c:	69fa      	ldr	r2, [r7, #28]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d903      	bls.n	8004a8a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004a88:	e0e8      	b.n	8004c5c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	461c      	mov	r4, r3
 8004a90:	4615      	mov	r5, r2
 8004a92:	f04f 0200 	mov.w	r2, #0
 8004a96:	f04f 0300 	mov.w	r3, #0
 8004a9a:	022b      	lsls	r3, r5, #8
 8004a9c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004aa0:	0222      	lsls	r2, r4, #8
 8004aa2:	68f9      	ldr	r1, [r7, #12]
 8004aa4:	6849      	ldr	r1, [r1, #4]
 8004aa6:	0849      	lsrs	r1, r1, #1
 8004aa8:	2000      	movs	r0, #0
 8004aaa:	4688      	mov	r8, r1
 8004aac:	4681      	mov	r9, r0
 8004aae:	eb12 0a08 	adds.w	sl, r2, r8
 8004ab2:	eb43 0b09 	adc.w	fp, r3, r9
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	603b      	str	r3, [r7, #0]
 8004abe:	607a      	str	r2, [r7, #4]
 8004ac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ac4:	4650      	mov	r0, sl
 8004ac6:	4659      	mov	r1, fp
 8004ac8:	f7fb fbd2 	bl	8000270 <__aeabi_uldivmod>
 8004acc:	4602      	mov	r2, r0
 8004ace:	460b      	mov	r3, r1
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ada:	d308      	bcc.n	8004aee <UART_SetConfig+0x3de>
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ae2:	d204      	bcs.n	8004aee <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	60da      	str	r2, [r3, #12]
 8004aec:	e0b6      	b.n	8004c5c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004af4:	e0b2      	b.n	8004c5c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004afe:	d15e      	bne.n	8004bbe <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004b00:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004b04:	2b08      	cmp	r3, #8
 8004b06:	d828      	bhi.n	8004b5a <UART_SetConfig+0x44a>
 8004b08:	a201      	add	r2, pc, #4	@ (adr r2, 8004b10 <UART_SetConfig+0x400>)
 8004b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0e:	bf00      	nop
 8004b10:	08004b35 	.word	0x08004b35
 8004b14:	08004b3d 	.word	0x08004b3d
 8004b18:	08004b45 	.word	0x08004b45
 8004b1c:	08004b5b 	.word	0x08004b5b
 8004b20:	08004b4b 	.word	0x08004b4b
 8004b24:	08004b5b 	.word	0x08004b5b
 8004b28:	08004b5b 	.word	0x08004b5b
 8004b2c:	08004b5b 	.word	0x08004b5b
 8004b30:	08004b53 	.word	0x08004b53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b34:	f7fe ffcc 	bl	8003ad0 <HAL_RCC_GetPCLK1Freq>
 8004b38:	61f8      	str	r0, [r7, #28]
        break;
 8004b3a:	e014      	b.n	8004b66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b3c:	f7fe ffde 	bl	8003afc <HAL_RCC_GetPCLK2Freq>
 8004b40:	61f8      	str	r0, [r7, #28]
        break;
 8004b42:	e010      	b.n	8004b66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b44:	4b4d      	ldr	r3, [pc, #308]	@ (8004c7c <UART_SetConfig+0x56c>)
 8004b46:	61fb      	str	r3, [r7, #28]
        break;
 8004b48:	e00d      	b.n	8004b66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b4a:	f7fe ff29 	bl	80039a0 <HAL_RCC_GetSysClockFreq>
 8004b4e:	61f8      	str	r0, [r7, #28]
        break;
 8004b50:	e009      	b.n	8004b66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b56:	61fb      	str	r3, [r7, #28]
        break;
 8004b58:	e005      	b.n	8004b66 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004b64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d077      	beq.n	8004c5c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	005a      	lsls	r2, r3, #1
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	085b      	lsrs	r3, r3, #1
 8004b76:	441a      	add	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b80:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	2b0f      	cmp	r3, #15
 8004b86:	d916      	bls.n	8004bb6 <UART_SetConfig+0x4a6>
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b8e:	d212      	bcs.n	8004bb6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	f023 030f 	bic.w	r3, r3, #15
 8004b98:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	085b      	lsrs	r3, r3, #1
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	f003 0307 	and.w	r3, r3, #7
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	8afb      	ldrh	r3, [r7, #22]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	8afa      	ldrh	r2, [r7, #22]
 8004bb2:	60da      	str	r2, [r3, #12]
 8004bb4:	e052      	b.n	8004c5c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004bbc:	e04e      	b.n	8004c5c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bbe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004bc2:	2b08      	cmp	r3, #8
 8004bc4:	d827      	bhi.n	8004c16 <UART_SetConfig+0x506>
 8004bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8004bcc <UART_SetConfig+0x4bc>)
 8004bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bcc:	08004bf1 	.word	0x08004bf1
 8004bd0:	08004bf9 	.word	0x08004bf9
 8004bd4:	08004c01 	.word	0x08004c01
 8004bd8:	08004c17 	.word	0x08004c17
 8004bdc:	08004c07 	.word	0x08004c07
 8004be0:	08004c17 	.word	0x08004c17
 8004be4:	08004c17 	.word	0x08004c17
 8004be8:	08004c17 	.word	0x08004c17
 8004bec:	08004c0f 	.word	0x08004c0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bf0:	f7fe ff6e 	bl	8003ad0 <HAL_RCC_GetPCLK1Freq>
 8004bf4:	61f8      	str	r0, [r7, #28]
        break;
 8004bf6:	e014      	b.n	8004c22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bf8:	f7fe ff80 	bl	8003afc <HAL_RCC_GetPCLK2Freq>
 8004bfc:	61f8      	str	r0, [r7, #28]
        break;
 8004bfe:	e010      	b.n	8004c22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c00:	4b1e      	ldr	r3, [pc, #120]	@ (8004c7c <UART_SetConfig+0x56c>)
 8004c02:	61fb      	str	r3, [r7, #28]
        break;
 8004c04:	e00d      	b.n	8004c22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c06:	f7fe fecb 	bl	80039a0 <HAL_RCC_GetSysClockFreq>
 8004c0a:	61f8      	str	r0, [r7, #28]
        break;
 8004c0c:	e009      	b.n	8004c22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c12:	61fb      	str	r3, [r7, #28]
        break;
 8004c14:	e005      	b.n	8004c22 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004c16:	2300      	movs	r3, #0
 8004c18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004c20:	bf00      	nop
    }

    if (pclk != 0U)
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d019      	beq.n	8004c5c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	085a      	lsrs	r2, r3, #1
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	441a      	add	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c3a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	2b0f      	cmp	r3, #15
 8004c40:	d909      	bls.n	8004c56 <UART_SetConfig+0x546>
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c48:	d205      	bcs.n	8004c56 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	60da      	str	r2, [r3, #12]
 8004c54:	e002      	b.n	8004c5c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004c68:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3728      	adds	r7, #40	@ 0x28
 8004c70:	46bd      	mov	sp, r7
 8004c72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c76:	bf00      	nop
 8004c78:	40008000 	.word	0x40008000
 8004c7c:	00f42400 	.word	0x00f42400

08004c80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8c:	f003 0308 	and.w	r3, r3, #8
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00a      	beq.n	8004caa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00a      	beq.n	8004ccc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00a      	beq.n	8004cee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf2:	f003 0304 	and.w	r3, r3, #4
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00a      	beq.n	8004d10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d14:	f003 0310 	and.w	r3, r3, #16
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00a      	beq.n	8004d32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d36:	f003 0320 	and.w	r3, r3, #32
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00a      	beq.n	8004d54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	430a      	orrs	r2, r1
 8004d52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d01a      	beq.n	8004d96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	430a      	orrs	r2, r1
 8004d74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d7e:	d10a      	bne.n	8004d96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00a      	beq.n	8004db8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	605a      	str	r2, [r3, #4]
  }
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b098      	sub	sp, #96	@ 0x60
 8004dc8:	af02      	add	r7, sp, #8
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004dd4:	f7fc fe08 	bl	80019e8 <HAL_GetTick>
 8004dd8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0308 	and.w	r3, r3, #8
 8004de4:	2b08      	cmp	r3, #8
 8004de6:	d12e      	bne.n	8004e46 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004de8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004df0:	2200      	movs	r2, #0
 8004df2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f88c 	bl	8004f14 <UART_WaitOnFlagUntilTimeout>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d021      	beq.n	8004e46 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e0a:	e853 3f00 	ldrex	r3, [r3]
 8004e0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e16:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e20:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e22:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e28:	e841 2300 	strex	r3, r2, [r1]
 8004e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1e6      	bne.n	8004e02 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2220      	movs	r2, #32
 8004e38:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e062      	b.n	8004f0c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0304 	and.w	r3, r3, #4
 8004e50:	2b04      	cmp	r3, #4
 8004e52:	d149      	bne.n	8004ee8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f856 	bl	8004f14 <UART_WaitOnFlagUntilTimeout>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d03c      	beq.n	8004ee8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e76:	e853 3f00 	ldrex	r3, [r3]
 8004e7a:	623b      	str	r3, [r7, #32]
   return(result);
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	461a      	mov	r2, r3
 8004e8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e94:	e841 2300 	strex	r3, r2, [r1]
 8004e98:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1e6      	bne.n	8004e6e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	3308      	adds	r3, #8
 8004ea6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	e853 3f00 	ldrex	r3, [r3]
 8004eae:	60fb      	str	r3, [r7, #12]
   return(result);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f023 0301 	bic.w	r3, r3, #1
 8004eb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	3308      	adds	r3, #8
 8004ebe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ec0:	61fa      	str	r2, [r7, #28]
 8004ec2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec4:	69b9      	ldr	r1, [r7, #24]
 8004ec6:	69fa      	ldr	r2, [r7, #28]
 8004ec8:	e841 2300 	strex	r3, r2, [r1]
 8004ecc:	617b      	str	r3, [r7, #20]
   return(result);
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1e5      	bne.n	8004ea0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e011      	b.n	8004f0c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2220      	movs	r2, #32
 8004eec:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3758      	adds	r7, #88	@ 0x58
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	603b      	str	r3, [r7, #0]
 8004f20:	4613      	mov	r3, r2
 8004f22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f24:	e04f      	b.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2c:	d04b      	beq.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f2e:	f7fc fd5b 	bl	80019e8 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d302      	bcc.n	8004f44 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e04e      	b.n	8004fe6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0304 	and.w	r3, r3, #4
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d037      	beq.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	2b80      	cmp	r3, #128	@ 0x80
 8004f5a:	d034      	beq.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	2b40      	cmp	r3, #64	@ 0x40
 8004f60:	d031      	beq.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	69db      	ldr	r3, [r3, #28]
 8004f68:	f003 0308 	and.w	r3, r3, #8
 8004f6c:	2b08      	cmp	r3, #8
 8004f6e:	d110      	bne.n	8004f92 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2208      	movs	r2, #8
 8004f76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f000 f838 	bl	8004fee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2208      	movs	r2, #8
 8004f82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e029      	b.n	8004fe6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	69db      	ldr	r3, [r3, #28]
 8004f98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fa0:	d111      	bne.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004faa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f000 f81e 	bl	8004fee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e00f      	b.n	8004fe6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	69da      	ldr	r2, [r3, #28]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	4013      	ands	r3, r2
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	bf0c      	ite	eq
 8004fd6:	2301      	moveq	r3, #1
 8004fd8:	2300      	movne	r3, #0
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	461a      	mov	r2, r3
 8004fde:	79fb      	ldrb	r3, [r7, #7]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d0a0      	beq.n	8004f26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b095      	sub	sp, #84	@ 0x54
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ffe:	e853 3f00 	ldrex	r3, [r3]
 8005002:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005006:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800500a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	461a      	mov	r2, r3
 8005012:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005014:	643b      	str	r3, [r7, #64]	@ 0x40
 8005016:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005018:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800501a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800501c:	e841 2300 	strex	r3, r2, [r1]
 8005020:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1e6      	bne.n	8004ff6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	3308      	adds	r3, #8
 800502e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	e853 3f00 	ldrex	r3, [r3]
 8005036:	61fb      	str	r3, [r7, #28]
   return(result);
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	f023 0301 	bic.w	r3, r3, #1
 800503e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	3308      	adds	r3, #8
 8005046:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005048:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800504a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800504e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005050:	e841 2300 	strex	r3, r2, [r1]
 8005054:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1e5      	bne.n	8005028 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005060:	2b01      	cmp	r3, #1
 8005062:	d118      	bne.n	8005096 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	e853 3f00 	ldrex	r3, [r3]
 8005070:	60bb      	str	r3, [r7, #8]
   return(result);
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	f023 0310 	bic.w	r3, r3, #16
 8005078:	647b      	str	r3, [r7, #68]	@ 0x44
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	461a      	mov	r2, r3
 8005080:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005082:	61bb      	str	r3, [r7, #24]
 8005084:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005086:	6979      	ldr	r1, [r7, #20]
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	e841 2300 	strex	r3, r2, [r1]
 800508e:	613b      	str	r3, [r7, #16]
   return(result);
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1e6      	bne.n	8005064 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2220      	movs	r2, #32
 800509a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80050aa:	bf00      	nop
 80050ac:	3754      	adds	r7, #84	@ 0x54
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
	...

080050b8 <std>:
 80050b8:	2300      	movs	r3, #0
 80050ba:	b510      	push	{r4, lr}
 80050bc:	4604      	mov	r4, r0
 80050be:	e9c0 3300 	strd	r3, r3, [r0]
 80050c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050c6:	6083      	str	r3, [r0, #8]
 80050c8:	8181      	strh	r1, [r0, #12]
 80050ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80050cc:	81c2      	strh	r2, [r0, #14]
 80050ce:	6183      	str	r3, [r0, #24]
 80050d0:	4619      	mov	r1, r3
 80050d2:	2208      	movs	r2, #8
 80050d4:	305c      	adds	r0, #92	@ 0x5c
 80050d6:	f000 f906 	bl	80052e6 <memset>
 80050da:	4b0d      	ldr	r3, [pc, #52]	@ (8005110 <std+0x58>)
 80050dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80050de:	4b0d      	ldr	r3, [pc, #52]	@ (8005114 <std+0x5c>)
 80050e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80050e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005118 <std+0x60>)
 80050e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80050e6:	4b0d      	ldr	r3, [pc, #52]	@ (800511c <std+0x64>)
 80050e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80050ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005120 <std+0x68>)
 80050ec:	6224      	str	r4, [r4, #32]
 80050ee:	429c      	cmp	r4, r3
 80050f0:	d006      	beq.n	8005100 <std+0x48>
 80050f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80050f6:	4294      	cmp	r4, r2
 80050f8:	d002      	beq.n	8005100 <std+0x48>
 80050fa:	33d0      	adds	r3, #208	@ 0xd0
 80050fc:	429c      	cmp	r4, r3
 80050fe:	d105      	bne.n	800510c <std+0x54>
 8005100:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005108:	f000 b966 	b.w	80053d8 <__retarget_lock_init_recursive>
 800510c:	bd10      	pop	{r4, pc}
 800510e:	bf00      	nop
 8005110:	08005261 	.word	0x08005261
 8005114:	08005283 	.word	0x08005283
 8005118:	080052bb 	.word	0x080052bb
 800511c:	080052df 	.word	0x080052df
 8005120:	200001a8 	.word	0x200001a8

08005124 <stdio_exit_handler>:
 8005124:	4a02      	ldr	r2, [pc, #8]	@ (8005130 <stdio_exit_handler+0xc>)
 8005126:	4903      	ldr	r1, [pc, #12]	@ (8005134 <stdio_exit_handler+0x10>)
 8005128:	4803      	ldr	r0, [pc, #12]	@ (8005138 <stdio_exit_handler+0x14>)
 800512a:	f000 b869 	b.w	8005200 <_fwalk_sglue>
 800512e:	bf00      	nop
 8005130:	2000000c 	.word	0x2000000c
 8005134:	08005c79 	.word	0x08005c79
 8005138:	2000001c 	.word	0x2000001c

0800513c <cleanup_stdio>:
 800513c:	6841      	ldr	r1, [r0, #4]
 800513e:	4b0c      	ldr	r3, [pc, #48]	@ (8005170 <cleanup_stdio+0x34>)
 8005140:	4299      	cmp	r1, r3
 8005142:	b510      	push	{r4, lr}
 8005144:	4604      	mov	r4, r0
 8005146:	d001      	beq.n	800514c <cleanup_stdio+0x10>
 8005148:	f000 fd96 	bl	8005c78 <_fflush_r>
 800514c:	68a1      	ldr	r1, [r4, #8]
 800514e:	4b09      	ldr	r3, [pc, #36]	@ (8005174 <cleanup_stdio+0x38>)
 8005150:	4299      	cmp	r1, r3
 8005152:	d002      	beq.n	800515a <cleanup_stdio+0x1e>
 8005154:	4620      	mov	r0, r4
 8005156:	f000 fd8f 	bl	8005c78 <_fflush_r>
 800515a:	68e1      	ldr	r1, [r4, #12]
 800515c:	4b06      	ldr	r3, [pc, #24]	@ (8005178 <cleanup_stdio+0x3c>)
 800515e:	4299      	cmp	r1, r3
 8005160:	d004      	beq.n	800516c <cleanup_stdio+0x30>
 8005162:	4620      	mov	r0, r4
 8005164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005168:	f000 bd86 	b.w	8005c78 <_fflush_r>
 800516c:	bd10      	pop	{r4, pc}
 800516e:	bf00      	nop
 8005170:	200001a8 	.word	0x200001a8
 8005174:	20000210 	.word	0x20000210
 8005178:	20000278 	.word	0x20000278

0800517c <global_stdio_init.part.0>:
 800517c:	b510      	push	{r4, lr}
 800517e:	4b0b      	ldr	r3, [pc, #44]	@ (80051ac <global_stdio_init.part.0+0x30>)
 8005180:	4c0b      	ldr	r4, [pc, #44]	@ (80051b0 <global_stdio_init.part.0+0x34>)
 8005182:	4a0c      	ldr	r2, [pc, #48]	@ (80051b4 <global_stdio_init.part.0+0x38>)
 8005184:	601a      	str	r2, [r3, #0]
 8005186:	4620      	mov	r0, r4
 8005188:	2200      	movs	r2, #0
 800518a:	2104      	movs	r1, #4
 800518c:	f7ff ff94 	bl	80050b8 <std>
 8005190:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005194:	2201      	movs	r2, #1
 8005196:	2109      	movs	r1, #9
 8005198:	f7ff ff8e 	bl	80050b8 <std>
 800519c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80051a0:	2202      	movs	r2, #2
 80051a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051a6:	2112      	movs	r1, #18
 80051a8:	f7ff bf86 	b.w	80050b8 <std>
 80051ac:	200002e0 	.word	0x200002e0
 80051b0:	200001a8 	.word	0x200001a8
 80051b4:	08005125 	.word	0x08005125

080051b8 <__sfp_lock_acquire>:
 80051b8:	4801      	ldr	r0, [pc, #4]	@ (80051c0 <__sfp_lock_acquire+0x8>)
 80051ba:	f000 b90e 	b.w	80053da <__retarget_lock_acquire_recursive>
 80051be:	bf00      	nop
 80051c0:	200002e9 	.word	0x200002e9

080051c4 <__sfp_lock_release>:
 80051c4:	4801      	ldr	r0, [pc, #4]	@ (80051cc <__sfp_lock_release+0x8>)
 80051c6:	f000 b909 	b.w	80053dc <__retarget_lock_release_recursive>
 80051ca:	bf00      	nop
 80051cc:	200002e9 	.word	0x200002e9

080051d0 <__sinit>:
 80051d0:	b510      	push	{r4, lr}
 80051d2:	4604      	mov	r4, r0
 80051d4:	f7ff fff0 	bl	80051b8 <__sfp_lock_acquire>
 80051d8:	6a23      	ldr	r3, [r4, #32]
 80051da:	b11b      	cbz	r3, 80051e4 <__sinit+0x14>
 80051dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051e0:	f7ff bff0 	b.w	80051c4 <__sfp_lock_release>
 80051e4:	4b04      	ldr	r3, [pc, #16]	@ (80051f8 <__sinit+0x28>)
 80051e6:	6223      	str	r3, [r4, #32]
 80051e8:	4b04      	ldr	r3, [pc, #16]	@ (80051fc <__sinit+0x2c>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1f5      	bne.n	80051dc <__sinit+0xc>
 80051f0:	f7ff ffc4 	bl	800517c <global_stdio_init.part.0>
 80051f4:	e7f2      	b.n	80051dc <__sinit+0xc>
 80051f6:	bf00      	nop
 80051f8:	0800513d 	.word	0x0800513d
 80051fc:	200002e0 	.word	0x200002e0

08005200 <_fwalk_sglue>:
 8005200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005204:	4607      	mov	r7, r0
 8005206:	4688      	mov	r8, r1
 8005208:	4614      	mov	r4, r2
 800520a:	2600      	movs	r6, #0
 800520c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005210:	f1b9 0901 	subs.w	r9, r9, #1
 8005214:	d505      	bpl.n	8005222 <_fwalk_sglue+0x22>
 8005216:	6824      	ldr	r4, [r4, #0]
 8005218:	2c00      	cmp	r4, #0
 800521a:	d1f7      	bne.n	800520c <_fwalk_sglue+0xc>
 800521c:	4630      	mov	r0, r6
 800521e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005222:	89ab      	ldrh	r3, [r5, #12]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d907      	bls.n	8005238 <_fwalk_sglue+0x38>
 8005228:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800522c:	3301      	adds	r3, #1
 800522e:	d003      	beq.n	8005238 <_fwalk_sglue+0x38>
 8005230:	4629      	mov	r1, r5
 8005232:	4638      	mov	r0, r7
 8005234:	47c0      	blx	r8
 8005236:	4306      	orrs	r6, r0
 8005238:	3568      	adds	r5, #104	@ 0x68
 800523a:	e7e9      	b.n	8005210 <_fwalk_sglue+0x10>

0800523c <iprintf>:
 800523c:	b40f      	push	{r0, r1, r2, r3}
 800523e:	b507      	push	{r0, r1, r2, lr}
 8005240:	4906      	ldr	r1, [pc, #24]	@ (800525c <iprintf+0x20>)
 8005242:	ab04      	add	r3, sp, #16
 8005244:	6808      	ldr	r0, [r1, #0]
 8005246:	f853 2b04 	ldr.w	r2, [r3], #4
 800524a:	6881      	ldr	r1, [r0, #8]
 800524c:	9301      	str	r3, [sp, #4]
 800524e:	f000 f9e9 	bl	8005624 <_vfiprintf_r>
 8005252:	b003      	add	sp, #12
 8005254:	f85d eb04 	ldr.w	lr, [sp], #4
 8005258:	b004      	add	sp, #16
 800525a:	4770      	bx	lr
 800525c:	20000018 	.word	0x20000018

08005260 <__sread>:
 8005260:	b510      	push	{r4, lr}
 8005262:	460c      	mov	r4, r1
 8005264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005268:	f000 f868 	bl	800533c <_read_r>
 800526c:	2800      	cmp	r0, #0
 800526e:	bfab      	itete	ge
 8005270:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005272:	89a3      	ldrhlt	r3, [r4, #12]
 8005274:	181b      	addge	r3, r3, r0
 8005276:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800527a:	bfac      	ite	ge
 800527c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800527e:	81a3      	strhlt	r3, [r4, #12]
 8005280:	bd10      	pop	{r4, pc}

08005282 <__swrite>:
 8005282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005286:	461f      	mov	r7, r3
 8005288:	898b      	ldrh	r3, [r1, #12]
 800528a:	05db      	lsls	r3, r3, #23
 800528c:	4605      	mov	r5, r0
 800528e:	460c      	mov	r4, r1
 8005290:	4616      	mov	r6, r2
 8005292:	d505      	bpl.n	80052a0 <__swrite+0x1e>
 8005294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005298:	2302      	movs	r3, #2
 800529a:	2200      	movs	r2, #0
 800529c:	f000 f83c 	bl	8005318 <_lseek_r>
 80052a0:	89a3      	ldrh	r3, [r4, #12]
 80052a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80052aa:	81a3      	strh	r3, [r4, #12]
 80052ac:	4632      	mov	r2, r6
 80052ae:	463b      	mov	r3, r7
 80052b0:	4628      	mov	r0, r5
 80052b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052b6:	f000 b853 	b.w	8005360 <_write_r>

080052ba <__sseek>:
 80052ba:	b510      	push	{r4, lr}
 80052bc:	460c      	mov	r4, r1
 80052be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052c2:	f000 f829 	bl	8005318 <_lseek_r>
 80052c6:	1c43      	adds	r3, r0, #1
 80052c8:	89a3      	ldrh	r3, [r4, #12]
 80052ca:	bf15      	itete	ne
 80052cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80052ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80052d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80052d6:	81a3      	strheq	r3, [r4, #12]
 80052d8:	bf18      	it	ne
 80052da:	81a3      	strhne	r3, [r4, #12]
 80052dc:	bd10      	pop	{r4, pc}

080052de <__sclose>:
 80052de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052e2:	f000 b809 	b.w	80052f8 <_close_r>

080052e6 <memset>:
 80052e6:	4402      	add	r2, r0
 80052e8:	4603      	mov	r3, r0
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d100      	bne.n	80052f0 <memset+0xa>
 80052ee:	4770      	bx	lr
 80052f0:	f803 1b01 	strb.w	r1, [r3], #1
 80052f4:	e7f9      	b.n	80052ea <memset+0x4>
	...

080052f8 <_close_r>:
 80052f8:	b538      	push	{r3, r4, r5, lr}
 80052fa:	4d06      	ldr	r5, [pc, #24]	@ (8005314 <_close_r+0x1c>)
 80052fc:	2300      	movs	r3, #0
 80052fe:	4604      	mov	r4, r0
 8005300:	4608      	mov	r0, r1
 8005302:	602b      	str	r3, [r5, #0]
 8005304:	f7fb fb9e 	bl	8000a44 <_close>
 8005308:	1c43      	adds	r3, r0, #1
 800530a:	d102      	bne.n	8005312 <_close_r+0x1a>
 800530c:	682b      	ldr	r3, [r5, #0]
 800530e:	b103      	cbz	r3, 8005312 <_close_r+0x1a>
 8005310:	6023      	str	r3, [r4, #0]
 8005312:	bd38      	pop	{r3, r4, r5, pc}
 8005314:	200002e4 	.word	0x200002e4

08005318 <_lseek_r>:
 8005318:	b538      	push	{r3, r4, r5, lr}
 800531a:	4d07      	ldr	r5, [pc, #28]	@ (8005338 <_lseek_r+0x20>)
 800531c:	4604      	mov	r4, r0
 800531e:	4608      	mov	r0, r1
 8005320:	4611      	mov	r1, r2
 8005322:	2200      	movs	r2, #0
 8005324:	602a      	str	r2, [r5, #0]
 8005326:	461a      	mov	r2, r3
 8005328:	f7fb fbb3 	bl	8000a92 <_lseek>
 800532c:	1c43      	adds	r3, r0, #1
 800532e:	d102      	bne.n	8005336 <_lseek_r+0x1e>
 8005330:	682b      	ldr	r3, [r5, #0]
 8005332:	b103      	cbz	r3, 8005336 <_lseek_r+0x1e>
 8005334:	6023      	str	r3, [r4, #0]
 8005336:	bd38      	pop	{r3, r4, r5, pc}
 8005338:	200002e4 	.word	0x200002e4

0800533c <_read_r>:
 800533c:	b538      	push	{r3, r4, r5, lr}
 800533e:	4d07      	ldr	r5, [pc, #28]	@ (800535c <_read_r+0x20>)
 8005340:	4604      	mov	r4, r0
 8005342:	4608      	mov	r0, r1
 8005344:	4611      	mov	r1, r2
 8005346:	2200      	movs	r2, #0
 8005348:	602a      	str	r2, [r5, #0]
 800534a:	461a      	mov	r2, r3
 800534c:	f7fb fb5d 	bl	8000a0a <_read>
 8005350:	1c43      	adds	r3, r0, #1
 8005352:	d102      	bne.n	800535a <_read_r+0x1e>
 8005354:	682b      	ldr	r3, [r5, #0]
 8005356:	b103      	cbz	r3, 800535a <_read_r+0x1e>
 8005358:	6023      	str	r3, [r4, #0]
 800535a:	bd38      	pop	{r3, r4, r5, pc}
 800535c:	200002e4 	.word	0x200002e4

08005360 <_write_r>:
 8005360:	b538      	push	{r3, r4, r5, lr}
 8005362:	4d07      	ldr	r5, [pc, #28]	@ (8005380 <_write_r+0x20>)
 8005364:	4604      	mov	r4, r0
 8005366:	4608      	mov	r0, r1
 8005368:	4611      	mov	r1, r2
 800536a:	2200      	movs	r2, #0
 800536c:	602a      	str	r2, [r5, #0]
 800536e:	461a      	mov	r2, r3
 8005370:	f7fb fa76 	bl	8000860 <_write>
 8005374:	1c43      	adds	r3, r0, #1
 8005376:	d102      	bne.n	800537e <_write_r+0x1e>
 8005378:	682b      	ldr	r3, [r5, #0]
 800537a:	b103      	cbz	r3, 800537e <_write_r+0x1e>
 800537c:	6023      	str	r3, [r4, #0]
 800537e:	bd38      	pop	{r3, r4, r5, pc}
 8005380:	200002e4 	.word	0x200002e4

08005384 <__errno>:
 8005384:	4b01      	ldr	r3, [pc, #4]	@ (800538c <__errno+0x8>)
 8005386:	6818      	ldr	r0, [r3, #0]
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	20000018 	.word	0x20000018

08005390 <__libc_init_array>:
 8005390:	b570      	push	{r4, r5, r6, lr}
 8005392:	4d0d      	ldr	r5, [pc, #52]	@ (80053c8 <__libc_init_array+0x38>)
 8005394:	4c0d      	ldr	r4, [pc, #52]	@ (80053cc <__libc_init_array+0x3c>)
 8005396:	1b64      	subs	r4, r4, r5
 8005398:	10a4      	asrs	r4, r4, #2
 800539a:	2600      	movs	r6, #0
 800539c:	42a6      	cmp	r6, r4
 800539e:	d109      	bne.n	80053b4 <__libc_init_array+0x24>
 80053a0:	4d0b      	ldr	r5, [pc, #44]	@ (80053d0 <__libc_init_array+0x40>)
 80053a2:	4c0c      	ldr	r4, [pc, #48]	@ (80053d4 <__libc_init_array+0x44>)
 80053a4:	f000 fdb8 	bl	8005f18 <_init>
 80053a8:	1b64      	subs	r4, r4, r5
 80053aa:	10a4      	asrs	r4, r4, #2
 80053ac:	2600      	movs	r6, #0
 80053ae:	42a6      	cmp	r6, r4
 80053b0:	d105      	bne.n	80053be <__libc_init_array+0x2e>
 80053b2:	bd70      	pop	{r4, r5, r6, pc}
 80053b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80053b8:	4798      	blx	r3
 80053ba:	3601      	adds	r6, #1
 80053bc:	e7ee      	b.n	800539c <__libc_init_array+0xc>
 80053be:	f855 3b04 	ldr.w	r3, [r5], #4
 80053c2:	4798      	blx	r3
 80053c4:	3601      	adds	r6, #1
 80053c6:	e7f2      	b.n	80053ae <__libc_init_array+0x1e>
 80053c8:	08005fcc 	.word	0x08005fcc
 80053cc:	08005fcc 	.word	0x08005fcc
 80053d0:	08005fcc 	.word	0x08005fcc
 80053d4:	08005fd0 	.word	0x08005fd0

080053d8 <__retarget_lock_init_recursive>:
 80053d8:	4770      	bx	lr

080053da <__retarget_lock_acquire_recursive>:
 80053da:	4770      	bx	lr

080053dc <__retarget_lock_release_recursive>:
 80053dc:	4770      	bx	lr
	...

080053e0 <_free_r>:
 80053e0:	b538      	push	{r3, r4, r5, lr}
 80053e2:	4605      	mov	r5, r0
 80053e4:	2900      	cmp	r1, #0
 80053e6:	d041      	beq.n	800546c <_free_r+0x8c>
 80053e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053ec:	1f0c      	subs	r4, r1, #4
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	bfb8      	it	lt
 80053f2:	18e4      	addlt	r4, r4, r3
 80053f4:	f000 f8e0 	bl	80055b8 <__malloc_lock>
 80053f8:	4a1d      	ldr	r2, [pc, #116]	@ (8005470 <_free_r+0x90>)
 80053fa:	6813      	ldr	r3, [r2, #0]
 80053fc:	b933      	cbnz	r3, 800540c <_free_r+0x2c>
 80053fe:	6063      	str	r3, [r4, #4]
 8005400:	6014      	str	r4, [r2, #0]
 8005402:	4628      	mov	r0, r5
 8005404:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005408:	f000 b8dc 	b.w	80055c4 <__malloc_unlock>
 800540c:	42a3      	cmp	r3, r4
 800540e:	d908      	bls.n	8005422 <_free_r+0x42>
 8005410:	6820      	ldr	r0, [r4, #0]
 8005412:	1821      	adds	r1, r4, r0
 8005414:	428b      	cmp	r3, r1
 8005416:	bf01      	itttt	eq
 8005418:	6819      	ldreq	r1, [r3, #0]
 800541a:	685b      	ldreq	r3, [r3, #4]
 800541c:	1809      	addeq	r1, r1, r0
 800541e:	6021      	streq	r1, [r4, #0]
 8005420:	e7ed      	b.n	80053fe <_free_r+0x1e>
 8005422:	461a      	mov	r2, r3
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	b10b      	cbz	r3, 800542c <_free_r+0x4c>
 8005428:	42a3      	cmp	r3, r4
 800542a:	d9fa      	bls.n	8005422 <_free_r+0x42>
 800542c:	6811      	ldr	r1, [r2, #0]
 800542e:	1850      	adds	r0, r2, r1
 8005430:	42a0      	cmp	r0, r4
 8005432:	d10b      	bne.n	800544c <_free_r+0x6c>
 8005434:	6820      	ldr	r0, [r4, #0]
 8005436:	4401      	add	r1, r0
 8005438:	1850      	adds	r0, r2, r1
 800543a:	4283      	cmp	r3, r0
 800543c:	6011      	str	r1, [r2, #0]
 800543e:	d1e0      	bne.n	8005402 <_free_r+0x22>
 8005440:	6818      	ldr	r0, [r3, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	6053      	str	r3, [r2, #4]
 8005446:	4408      	add	r0, r1
 8005448:	6010      	str	r0, [r2, #0]
 800544a:	e7da      	b.n	8005402 <_free_r+0x22>
 800544c:	d902      	bls.n	8005454 <_free_r+0x74>
 800544e:	230c      	movs	r3, #12
 8005450:	602b      	str	r3, [r5, #0]
 8005452:	e7d6      	b.n	8005402 <_free_r+0x22>
 8005454:	6820      	ldr	r0, [r4, #0]
 8005456:	1821      	adds	r1, r4, r0
 8005458:	428b      	cmp	r3, r1
 800545a:	bf04      	itt	eq
 800545c:	6819      	ldreq	r1, [r3, #0]
 800545e:	685b      	ldreq	r3, [r3, #4]
 8005460:	6063      	str	r3, [r4, #4]
 8005462:	bf04      	itt	eq
 8005464:	1809      	addeq	r1, r1, r0
 8005466:	6021      	streq	r1, [r4, #0]
 8005468:	6054      	str	r4, [r2, #4]
 800546a:	e7ca      	b.n	8005402 <_free_r+0x22>
 800546c:	bd38      	pop	{r3, r4, r5, pc}
 800546e:	bf00      	nop
 8005470:	200002f0 	.word	0x200002f0

08005474 <sbrk_aligned>:
 8005474:	b570      	push	{r4, r5, r6, lr}
 8005476:	4e0f      	ldr	r6, [pc, #60]	@ (80054b4 <sbrk_aligned+0x40>)
 8005478:	460c      	mov	r4, r1
 800547a:	6831      	ldr	r1, [r6, #0]
 800547c:	4605      	mov	r5, r0
 800547e:	b911      	cbnz	r1, 8005486 <sbrk_aligned+0x12>
 8005480:	f000 fcb6 	bl	8005df0 <_sbrk_r>
 8005484:	6030      	str	r0, [r6, #0]
 8005486:	4621      	mov	r1, r4
 8005488:	4628      	mov	r0, r5
 800548a:	f000 fcb1 	bl	8005df0 <_sbrk_r>
 800548e:	1c43      	adds	r3, r0, #1
 8005490:	d103      	bne.n	800549a <sbrk_aligned+0x26>
 8005492:	f04f 34ff 	mov.w	r4, #4294967295
 8005496:	4620      	mov	r0, r4
 8005498:	bd70      	pop	{r4, r5, r6, pc}
 800549a:	1cc4      	adds	r4, r0, #3
 800549c:	f024 0403 	bic.w	r4, r4, #3
 80054a0:	42a0      	cmp	r0, r4
 80054a2:	d0f8      	beq.n	8005496 <sbrk_aligned+0x22>
 80054a4:	1a21      	subs	r1, r4, r0
 80054a6:	4628      	mov	r0, r5
 80054a8:	f000 fca2 	bl	8005df0 <_sbrk_r>
 80054ac:	3001      	adds	r0, #1
 80054ae:	d1f2      	bne.n	8005496 <sbrk_aligned+0x22>
 80054b0:	e7ef      	b.n	8005492 <sbrk_aligned+0x1e>
 80054b2:	bf00      	nop
 80054b4:	200002ec 	.word	0x200002ec

080054b8 <_malloc_r>:
 80054b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054bc:	1ccd      	adds	r5, r1, #3
 80054be:	f025 0503 	bic.w	r5, r5, #3
 80054c2:	3508      	adds	r5, #8
 80054c4:	2d0c      	cmp	r5, #12
 80054c6:	bf38      	it	cc
 80054c8:	250c      	movcc	r5, #12
 80054ca:	2d00      	cmp	r5, #0
 80054cc:	4606      	mov	r6, r0
 80054ce:	db01      	blt.n	80054d4 <_malloc_r+0x1c>
 80054d0:	42a9      	cmp	r1, r5
 80054d2:	d904      	bls.n	80054de <_malloc_r+0x26>
 80054d4:	230c      	movs	r3, #12
 80054d6:	6033      	str	r3, [r6, #0]
 80054d8:	2000      	movs	r0, #0
 80054da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80055b4 <_malloc_r+0xfc>
 80054e2:	f000 f869 	bl	80055b8 <__malloc_lock>
 80054e6:	f8d8 3000 	ldr.w	r3, [r8]
 80054ea:	461c      	mov	r4, r3
 80054ec:	bb44      	cbnz	r4, 8005540 <_malloc_r+0x88>
 80054ee:	4629      	mov	r1, r5
 80054f0:	4630      	mov	r0, r6
 80054f2:	f7ff ffbf 	bl	8005474 <sbrk_aligned>
 80054f6:	1c43      	adds	r3, r0, #1
 80054f8:	4604      	mov	r4, r0
 80054fa:	d158      	bne.n	80055ae <_malloc_r+0xf6>
 80054fc:	f8d8 4000 	ldr.w	r4, [r8]
 8005500:	4627      	mov	r7, r4
 8005502:	2f00      	cmp	r7, #0
 8005504:	d143      	bne.n	800558e <_malloc_r+0xd6>
 8005506:	2c00      	cmp	r4, #0
 8005508:	d04b      	beq.n	80055a2 <_malloc_r+0xea>
 800550a:	6823      	ldr	r3, [r4, #0]
 800550c:	4639      	mov	r1, r7
 800550e:	4630      	mov	r0, r6
 8005510:	eb04 0903 	add.w	r9, r4, r3
 8005514:	f000 fc6c 	bl	8005df0 <_sbrk_r>
 8005518:	4581      	cmp	r9, r0
 800551a:	d142      	bne.n	80055a2 <_malloc_r+0xea>
 800551c:	6821      	ldr	r1, [r4, #0]
 800551e:	1a6d      	subs	r5, r5, r1
 8005520:	4629      	mov	r1, r5
 8005522:	4630      	mov	r0, r6
 8005524:	f7ff ffa6 	bl	8005474 <sbrk_aligned>
 8005528:	3001      	adds	r0, #1
 800552a:	d03a      	beq.n	80055a2 <_malloc_r+0xea>
 800552c:	6823      	ldr	r3, [r4, #0]
 800552e:	442b      	add	r3, r5
 8005530:	6023      	str	r3, [r4, #0]
 8005532:	f8d8 3000 	ldr.w	r3, [r8]
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	bb62      	cbnz	r2, 8005594 <_malloc_r+0xdc>
 800553a:	f8c8 7000 	str.w	r7, [r8]
 800553e:	e00f      	b.n	8005560 <_malloc_r+0xa8>
 8005540:	6822      	ldr	r2, [r4, #0]
 8005542:	1b52      	subs	r2, r2, r5
 8005544:	d420      	bmi.n	8005588 <_malloc_r+0xd0>
 8005546:	2a0b      	cmp	r2, #11
 8005548:	d917      	bls.n	800557a <_malloc_r+0xc2>
 800554a:	1961      	adds	r1, r4, r5
 800554c:	42a3      	cmp	r3, r4
 800554e:	6025      	str	r5, [r4, #0]
 8005550:	bf18      	it	ne
 8005552:	6059      	strne	r1, [r3, #4]
 8005554:	6863      	ldr	r3, [r4, #4]
 8005556:	bf08      	it	eq
 8005558:	f8c8 1000 	streq.w	r1, [r8]
 800555c:	5162      	str	r2, [r4, r5]
 800555e:	604b      	str	r3, [r1, #4]
 8005560:	4630      	mov	r0, r6
 8005562:	f000 f82f 	bl	80055c4 <__malloc_unlock>
 8005566:	f104 000b 	add.w	r0, r4, #11
 800556a:	1d23      	adds	r3, r4, #4
 800556c:	f020 0007 	bic.w	r0, r0, #7
 8005570:	1ac2      	subs	r2, r0, r3
 8005572:	bf1c      	itt	ne
 8005574:	1a1b      	subne	r3, r3, r0
 8005576:	50a3      	strne	r3, [r4, r2]
 8005578:	e7af      	b.n	80054da <_malloc_r+0x22>
 800557a:	6862      	ldr	r2, [r4, #4]
 800557c:	42a3      	cmp	r3, r4
 800557e:	bf0c      	ite	eq
 8005580:	f8c8 2000 	streq.w	r2, [r8]
 8005584:	605a      	strne	r2, [r3, #4]
 8005586:	e7eb      	b.n	8005560 <_malloc_r+0xa8>
 8005588:	4623      	mov	r3, r4
 800558a:	6864      	ldr	r4, [r4, #4]
 800558c:	e7ae      	b.n	80054ec <_malloc_r+0x34>
 800558e:	463c      	mov	r4, r7
 8005590:	687f      	ldr	r7, [r7, #4]
 8005592:	e7b6      	b.n	8005502 <_malloc_r+0x4a>
 8005594:	461a      	mov	r2, r3
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	42a3      	cmp	r3, r4
 800559a:	d1fb      	bne.n	8005594 <_malloc_r+0xdc>
 800559c:	2300      	movs	r3, #0
 800559e:	6053      	str	r3, [r2, #4]
 80055a0:	e7de      	b.n	8005560 <_malloc_r+0xa8>
 80055a2:	230c      	movs	r3, #12
 80055a4:	6033      	str	r3, [r6, #0]
 80055a6:	4630      	mov	r0, r6
 80055a8:	f000 f80c 	bl	80055c4 <__malloc_unlock>
 80055ac:	e794      	b.n	80054d8 <_malloc_r+0x20>
 80055ae:	6005      	str	r5, [r0, #0]
 80055b0:	e7d6      	b.n	8005560 <_malloc_r+0xa8>
 80055b2:	bf00      	nop
 80055b4:	200002f0 	.word	0x200002f0

080055b8 <__malloc_lock>:
 80055b8:	4801      	ldr	r0, [pc, #4]	@ (80055c0 <__malloc_lock+0x8>)
 80055ba:	f7ff bf0e 	b.w	80053da <__retarget_lock_acquire_recursive>
 80055be:	bf00      	nop
 80055c0:	200002e8 	.word	0x200002e8

080055c4 <__malloc_unlock>:
 80055c4:	4801      	ldr	r0, [pc, #4]	@ (80055cc <__malloc_unlock+0x8>)
 80055c6:	f7ff bf09 	b.w	80053dc <__retarget_lock_release_recursive>
 80055ca:	bf00      	nop
 80055cc:	200002e8 	.word	0x200002e8

080055d0 <__sfputc_r>:
 80055d0:	6893      	ldr	r3, [r2, #8]
 80055d2:	3b01      	subs	r3, #1
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	b410      	push	{r4}
 80055d8:	6093      	str	r3, [r2, #8]
 80055da:	da08      	bge.n	80055ee <__sfputc_r+0x1e>
 80055dc:	6994      	ldr	r4, [r2, #24]
 80055de:	42a3      	cmp	r3, r4
 80055e0:	db01      	blt.n	80055e6 <__sfputc_r+0x16>
 80055e2:	290a      	cmp	r1, #10
 80055e4:	d103      	bne.n	80055ee <__sfputc_r+0x1e>
 80055e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055ea:	f000 bb6d 	b.w	8005cc8 <__swbuf_r>
 80055ee:	6813      	ldr	r3, [r2, #0]
 80055f0:	1c58      	adds	r0, r3, #1
 80055f2:	6010      	str	r0, [r2, #0]
 80055f4:	7019      	strb	r1, [r3, #0]
 80055f6:	4608      	mov	r0, r1
 80055f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <__sfputs_r>:
 80055fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005600:	4606      	mov	r6, r0
 8005602:	460f      	mov	r7, r1
 8005604:	4614      	mov	r4, r2
 8005606:	18d5      	adds	r5, r2, r3
 8005608:	42ac      	cmp	r4, r5
 800560a:	d101      	bne.n	8005610 <__sfputs_r+0x12>
 800560c:	2000      	movs	r0, #0
 800560e:	e007      	b.n	8005620 <__sfputs_r+0x22>
 8005610:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005614:	463a      	mov	r2, r7
 8005616:	4630      	mov	r0, r6
 8005618:	f7ff ffda 	bl	80055d0 <__sfputc_r>
 800561c:	1c43      	adds	r3, r0, #1
 800561e:	d1f3      	bne.n	8005608 <__sfputs_r+0xa>
 8005620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005624 <_vfiprintf_r>:
 8005624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005628:	460d      	mov	r5, r1
 800562a:	b09d      	sub	sp, #116	@ 0x74
 800562c:	4614      	mov	r4, r2
 800562e:	4698      	mov	r8, r3
 8005630:	4606      	mov	r6, r0
 8005632:	b118      	cbz	r0, 800563c <_vfiprintf_r+0x18>
 8005634:	6a03      	ldr	r3, [r0, #32]
 8005636:	b90b      	cbnz	r3, 800563c <_vfiprintf_r+0x18>
 8005638:	f7ff fdca 	bl	80051d0 <__sinit>
 800563c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800563e:	07d9      	lsls	r1, r3, #31
 8005640:	d405      	bmi.n	800564e <_vfiprintf_r+0x2a>
 8005642:	89ab      	ldrh	r3, [r5, #12]
 8005644:	059a      	lsls	r2, r3, #22
 8005646:	d402      	bmi.n	800564e <_vfiprintf_r+0x2a>
 8005648:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800564a:	f7ff fec6 	bl	80053da <__retarget_lock_acquire_recursive>
 800564e:	89ab      	ldrh	r3, [r5, #12]
 8005650:	071b      	lsls	r3, r3, #28
 8005652:	d501      	bpl.n	8005658 <_vfiprintf_r+0x34>
 8005654:	692b      	ldr	r3, [r5, #16]
 8005656:	b99b      	cbnz	r3, 8005680 <_vfiprintf_r+0x5c>
 8005658:	4629      	mov	r1, r5
 800565a:	4630      	mov	r0, r6
 800565c:	f000 fb72 	bl	8005d44 <__swsetup_r>
 8005660:	b170      	cbz	r0, 8005680 <_vfiprintf_r+0x5c>
 8005662:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005664:	07dc      	lsls	r4, r3, #31
 8005666:	d504      	bpl.n	8005672 <_vfiprintf_r+0x4e>
 8005668:	f04f 30ff 	mov.w	r0, #4294967295
 800566c:	b01d      	add	sp, #116	@ 0x74
 800566e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005672:	89ab      	ldrh	r3, [r5, #12]
 8005674:	0598      	lsls	r0, r3, #22
 8005676:	d4f7      	bmi.n	8005668 <_vfiprintf_r+0x44>
 8005678:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800567a:	f7ff feaf 	bl	80053dc <__retarget_lock_release_recursive>
 800567e:	e7f3      	b.n	8005668 <_vfiprintf_r+0x44>
 8005680:	2300      	movs	r3, #0
 8005682:	9309      	str	r3, [sp, #36]	@ 0x24
 8005684:	2320      	movs	r3, #32
 8005686:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800568a:	f8cd 800c 	str.w	r8, [sp, #12]
 800568e:	2330      	movs	r3, #48	@ 0x30
 8005690:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005840 <_vfiprintf_r+0x21c>
 8005694:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005698:	f04f 0901 	mov.w	r9, #1
 800569c:	4623      	mov	r3, r4
 800569e:	469a      	mov	sl, r3
 80056a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056a4:	b10a      	cbz	r2, 80056aa <_vfiprintf_r+0x86>
 80056a6:	2a25      	cmp	r2, #37	@ 0x25
 80056a8:	d1f9      	bne.n	800569e <_vfiprintf_r+0x7a>
 80056aa:	ebba 0b04 	subs.w	fp, sl, r4
 80056ae:	d00b      	beq.n	80056c8 <_vfiprintf_r+0xa4>
 80056b0:	465b      	mov	r3, fp
 80056b2:	4622      	mov	r2, r4
 80056b4:	4629      	mov	r1, r5
 80056b6:	4630      	mov	r0, r6
 80056b8:	f7ff ffa1 	bl	80055fe <__sfputs_r>
 80056bc:	3001      	adds	r0, #1
 80056be:	f000 80a7 	beq.w	8005810 <_vfiprintf_r+0x1ec>
 80056c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056c4:	445a      	add	r2, fp
 80056c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80056c8:	f89a 3000 	ldrb.w	r3, [sl]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f000 809f 	beq.w	8005810 <_vfiprintf_r+0x1ec>
 80056d2:	2300      	movs	r3, #0
 80056d4:	f04f 32ff 	mov.w	r2, #4294967295
 80056d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056dc:	f10a 0a01 	add.w	sl, sl, #1
 80056e0:	9304      	str	r3, [sp, #16]
 80056e2:	9307      	str	r3, [sp, #28]
 80056e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80056e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80056ea:	4654      	mov	r4, sl
 80056ec:	2205      	movs	r2, #5
 80056ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056f2:	4853      	ldr	r0, [pc, #332]	@ (8005840 <_vfiprintf_r+0x21c>)
 80056f4:	f7fa fd6c 	bl	80001d0 <memchr>
 80056f8:	9a04      	ldr	r2, [sp, #16]
 80056fa:	b9d8      	cbnz	r0, 8005734 <_vfiprintf_r+0x110>
 80056fc:	06d1      	lsls	r1, r2, #27
 80056fe:	bf44      	itt	mi
 8005700:	2320      	movmi	r3, #32
 8005702:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005706:	0713      	lsls	r3, r2, #28
 8005708:	bf44      	itt	mi
 800570a:	232b      	movmi	r3, #43	@ 0x2b
 800570c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005710:	f89a 3000 	ldrb.w	r3, [sl]
 8005714:	2b2a      	cmp	r3, #42	@ 0x2a
 8005716:	d015      	beq.n	8005744 <_vfiprintf_r+0x120>
 8005718:	9a07      	ldr	r2, [sp, #28]
 800571a:	4654      	mov	r4, sl
 800571c:	2000      	movs	r0, #0
 800571e:	f04f 0c0a 	mov.w	ip, #10
 8005722:	4621      	mov	r1, r4
 8005724:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005728:	3b30      	subs	r3, #48	@ 0x30
 800572a:	2b09      	cmp	r3, #9
 800572c:	d94b      	bls.n	80057c6 <_vfiprintf_r+0x1a2>
 800572e:	b1b0      	cbz	r0, 800575e <_vfiprintf_r+0x13a>
 8005730:	9207      	str	r2, [sp, #28]
 8005732:	e014      	b.n	800575e <_vfiprintf_r+0x13a>
 8005734:	eba0 0308 	sub.w	r3, r0, r8
 8005738:	fa09 f303 	lsl.w	r3, r9, r3
 800573c:	4313      	orrs	r3, r2
 800573e:	9304      	str	r3, [sp, #16]
 8005740:	46a2      	mov	sl, r4
 8005742:	e7d2      	b.n	80056ea <_vfiprintf_r+0xc6>
 8005744:	9b03      	ldr	r3, [sp, #12]
 8005746:	1d19      	adds	r1, r3, #4
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	9103      	str	r1, [sp, #12]
 800574c:	2b00      	cmp	r3, #0
 800574e:	bfbb      	ittet	lt
 8005750:	425b      	neglt	r3, r3
 8005752:	f042 0202 	orrlt.w	r2, r2, #2
 8005756:	9307      	strge	r3, [sp, #28]
 8005758:	9307      	strlt	r3, [sp, #28]
 800575a:	bfb8      	it	lt
 800575c:	9204      	strlt	r2, [sp, #16]
 800575e:	7823      	ldrb	r3, [r4, #0]
 8005760:	2b2e      	cmp	r3, #46	@ 0x2e
 8005762:	d10a      	bne.n	800577a <_vfiprintf_r+0x156>
 8005764:	7863      	ldrb	r3, [r4, #1]
 8005766:	2b2a      	cmp	r3, #42	@ 0x2a
 8005768:	d132      	bne.n	80057d0 <_vfiprintf_r+0x1ac>
 800576a:	9b03      	ldr	r3, [sp, #12]
 800576c:	1d1a      	adds	r2, r3, #4
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	9203      	str	r2, [sp, #12]
 8005772:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005776:	3402      	adds	r4, #2
 8005778:	9305      	str	r3, [sp, #20]
 800577a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005850 <_vfiprintf_r+0x22c>
 800577e:	7821      	ldrb	r1, [r4, #0]
 8005780:	2203      	movs	r2, #3
 8005782:	4650      	mov	r0, sl
 8005784:	f7fa fd24 	bl	80001d0 <memchr>
 8005788:	b138      	cbz	r0, 800579a <_vfiprintf_r+0x176>
 800578a:	9b04      	ldr	r3, [sp, #16]
 800578c:	eba0 000a 	sub.w	r0, r0, sl
 8005790:	2240      	movs	r2, #64	@ 0x40
 8005792:	4082      	lsls	r2, r0
 8005794:	4313      	orrs	r3, r2
 8005796:	3401      	adds	r4, #1
 8005798:	9304      	str	r3, [sp, #16]
 800579a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800579e:	4829      	ldr	r0, [pc, #164]	@ (8005844 <_vfiprintf_r+0x220>)
 80057a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80057a4:	2206      	movs	r2, #6
 80057a6:	f7fa fd13 	bl	80001d0 <memchr>
 80057aa:	2800      	cmp	r0, #0
 80057ac:	d03f      	beq.n	800582e <_vfiprintf_r+0x20a>
 80057ae:	4b26      	ldr	r3, [pc, #152]	@ (8005848 <_vfiprintf_r+0x224>)
 80057b0:	bb1b      	cbnz	r3, 80057fa <_vfiprintf_r+0x1d6>
 80057b2:	9b03      	ldr	r3, [sp, #12]
 80057b4:	3307      	adds	r3, #7
 80057b6:	f023 0307 	bic.w	r3, r3, #7
 80057ba:	3308      	adds	r3, #8
 80057bc:	9303      	str	r3, [sp, #12]
 80057be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057c0:	443b      	add	r3, r7
 80057c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80057c4:	e76a      	b.n	800569c <_vfiprintf_r+0x78>
 80057c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80057ca:	460c      	mov	r4, r1
 80057cc:	2001      	movs	r0, #1
 80057ce:	e7a8      	b.n	8005722 <_vfiprintf_r+0xfe>
 80057d0:	2300      	movs	r3, #0
 80057d2:	3401      	adds	r4, #1
 80057d4:	9305      	str	r3, [sp, #20]
 80057d6:	4619      	mov	r1, r3
 80057d8:	f04f 0c0a 	mov.w	ip, #10
 80057dc:	4620      	mov	r0, r4
 80057de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057e2:	3a30      	subs	r2, #48	@ 0x30
 80057e4:	2a09      	cmp	r2, #9
 80057e6:	d903      	bls.n	80057f0 <_vfiprintf_r+0x1cc>
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d0c6      	beq.n	800577a <_vfiprintf_r+0x156>
 80057ec:	9105      	str	r1, [sp, #20]
 80057ee:	e7c4      	b.n	800577a <_vfiprintf_r+0x156>
 80057f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80057f4:	4604      	mov	r4, r0
 80057f6:	2301      	movs	r3, #1
 80057f8:	e7f0      	b.n	80057dc <_vfiprintf_r+0x1b8>
 80057fa:	ab03      	add	r3, sp, #12
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	462a      	mov	r2, r5
 8005800:	4b12      	ldr	r3, [pc, #72]	@ (800584c <_vfiprintf_r+0x228>)
 8005802:	a904      	add	r1, sp, #16
 8005804:	4630      	mov	r0, r6
 8005806:	f3af 8000 	nop.w
 800580a:	4607      	mov	r7, r0
 800580c:	1c78      	adds	r0, r7, #1
 800580e:	d1d6      	bne.n	80057be <_vfiprintf_r+0x19a>
 8005810:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005812:	07d9      	lsls	r1, r3, #31
 8005814:	d405      	bmi.n	8005822 <_vfiprintf_r+0x1fe>
 8005816:	89ab      	ldrh	r3, [r5, #12]
 8005818:	059a      	lsls	r2, r3, #22
 800581a:	d402      	bmi.n	8005822 <_vfiprintf_r+0x1fe>
 800581c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800581e:	f7ff fddd 	bl	80053dc <__retarget_lock_release_recursive>
 8005822:	89ab      	ldrh	r3, [r5, #12]
 8005824:	065b      	lsls	r3, r3, #25
 8005826:	f53f af1f 	bmi.w	8005668 <_vfiprintf_r+0x44>
 800582a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800582c:	e71e      	b.n	800566c <_vfiprintf_r+0x48>
 800582e:	ab03      	add	r3, sp, #12
 8005830:	9300      	str	r3, [sp, #0]
 8005832:	462a      	mov	r2, r5
 8005834:	4b05      	ldr	r3, [pc, #20]	@ (800584c <_vfiprintf_r+0x228>)
 8005836:	a904      	add	r1, sp, #16
 8005838:	4630      	mov	r0, r6
 800583a:	f000 f879 	bl	8005930 <_printf_i>
 800583e:	e7e4      	b.n	800580a <_vfiprintf_r+0x1e6>
 8005840:	08005f90 	.word	0x08005f90
 8005844:	08005f9a 	.word	0x08005f9a
 8005848:	00000000 	.word	0x00000000
 800584c:	080055ff 	.word	0x080055ff
 8005850:	08005f96 	.word	0x08005f96

08005854 <_printf_common>:
 8005854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005858:	4616      	mov	r6, r2
 800585a:	4698      	mov	r8, r3
 800585c:	688a      	ldr	r2, [r1, #8]
 800585e:	690b      	ldr	r3, [r1, #16]
 8005860:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005864:	4293      	cmp	r3, r2
 8005866:	bfb8      	it	lt
 8005868:	4613      	movlt	r3, r2
 800586a:	6033      	str	r3, [r6, #0]
 800586c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005870:	4607      	mov	r7, r0
 8005872:	460c      	mov	r4, r1
 8005874:	b10a      	cbz	r2, 800587a <_printf_common+0x26>
 8005876:	3301      	adds	r3, #1
 8005878:	6033      	str	r3, [r6, #0]
 800587a:	6823      	ldr	r3, [r4, #0]
 800587c:	0699      	lsls	r1, r3, #26
 800587e:	bf42      	ittt	mi
 8005880:	6833      	ldrmi	r3, [r6, #0]
 8005882:	3302      	addmi	r3, #2
 8005884:	6033      	strmi	r3, [r6, #0]
 8005886:	6825      	ldr	r5, [r4, #0]
 8005888:	f015 0506 	ands.w	r5, r5, #6
 800588c:	d106      	bne.n	800589c <_printf_common+0x48>
 800588e:	f104 0a19 	add.w	sl, r4, #25
 8005892:	68e3      	ldr	r3, [r4, #12]
 8005894:	6832      	ldr	r2, [r6, #0]
 8005896:	1a9b      	subs	r3, r3, r2
 8005898:	42ab      	cmp	r3, r5
 800589a:	dc26      	bgt.n	80058ea <_printf_common+0x96>
 800589c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80058a0:	6822      	ldr	r2, [r4, #0]
 80058a2:	3b00      	subs	r3, #0
 80058a4:	bf18      	it	ne
 80058a6:	2301      	movne	r3, #1
 80058a8:	0692      	lsls	r2, r2, #26
 80058aa:	d42b      	bmi.n	8005904 <_printf_common+0xb0>
 80058ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80058b0:	4641      	mov	r1, r8
 80058b2:	4638      	mov	r0, r7
 80058b4:	47c8      	blx	r9
 80058b6:	3001      	adds	r0, #1
 80058b8:	d01e      	beq.n	80058f8 <_printf_common+0xa4>
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	6922      	ldr	r2, [r4, #16]
 80058be:	f003 0306 	and.w	r3, r3, #6
 80058c2:	2b04      	cmp	r3, #4
 80058c4:	bf02      	ittt	eq
 80058c6:	68e5      	ldreq	r5, [r4, #12]
 80058c8:	6833      	ldreq	r3, [r6, #0]
 80058ca:	1aed      	subeq	r5, r5, r3
 80058cc:	68a3      	ldr	r3, [r4, #8]
 80058ce:	bf0c      	ite	eq
 80058d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058d4:	2500      	movne	r5, #0
 80058d6:	4293      	cmp	r3, r2
 80058d8:	bfc4      	itt	gt
 80058da:	1a9b      	subgt	r3, r3, r2
 80058dc:	18ed      	addgt	r5, r5, r3
 80058de:	2600      	movs	r6, #0
 80058e0:	341a      	adds	r4, #26
 80058e2:	42b5      	cmp	r5, r6
 80058e4:	d11a      	bne.n	800591c <_printf_common+0xc8>
 80058e6:	2000      	movs	r0, #0
 80058e8:	e008      	b.n	80058fc <_printf_common+0xa8>
 80058ea:	2301      	movs	r3, #1
 80058ec:	4652      	mov	r2, sl
 80058ee:	4641      	mov	r1, r8
 80058f0:	4638      	mov	r0, r7
 80058f2:	47c8      	blx	r9
 80058f4:	3001      	adds	r0, #1
 80058f6:	d103      	bne.n	8005900 <_printf_common+0xac>
 80058f8:	f04f 30ff 	mov.w	r0, #4294967295
 80058fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005900:	3501      	adds	r5, #1
 8005902:	e7c6      	b.n	8005892 <_printf_common+0x3e>
 8005904:	18e1      	adds	r1, r4, r3
 8005906:	1c5a      	adds	r2, r3, #1
 8005908:	2030      	movs	r0, #48	@ 0x30
 800590a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800590e:	4422      	add	r2, r4
 8005910:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005914:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005918:	3302      	adds	r3, #2
 800591a:	e7c7      	b.n	80058ac <_printf_common+0x58>
 800591c:	2301      	movs	r3, #1
 800591e:	4622      	mov	r2, r4
 8005920:	4641      	mov	r1, r8
 8005922:	4638      	mov	r0, r7
 8005924:	47c8      	blx	r9
 8005926:	3001      	adds	r0, #1
 8005928:	d0e6      	beq.n	80058f8 <_printf_common+0xa4>
 800592a:	3601      	adds	r6, #1
 800592c:	e7d9      	b.n	80058e2 <_printf_common+0x8e>
	...

08005930 <_printf_i>:
 8005930:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005934:	7e0f      	ldrb	r7, [r1, #24]
 8005936:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005938:	2f78      	cmp	r7, #120	@ 0x78
 800593a:	4691      	mov	r9, r2
 800593c:	4680      	mov	r8, r0
 800593e:	460c      	mov	r4, r1
 8005940:	469a      	mov	sl, r3
 8005942:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005946:	d807      	bhi.n	8005958 <_printf_i+0x28>
 8005948:	2f62      	cmp	r7, #98	@ 0x62
 800594a:	d80a      	bhi.n	8005962 <_printf_i+0x32>
 800594c:	2f00      	cmp	r7, #0
 800594e:	f000 80d2 	beq.w	8005af6 <_printf_i+0x1c6>
 8005952:	2f58      	cmp	r7, #88	@ 0x58
 8005954:	f000 80b9 	beq.w	8005aca <_printf_i+0x19a>
 8005958:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800595c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005960:	e03a      	b.n	80059d8 <_printf_i+0xa8>
 8005962:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005966:	2b15      	cmp	r3, #21
 8005968:	d8f6      	bhi.n	8005958 <_printf_i+0x28>
 800596a:	a101      	add	r1, pc, #4	@ (adr r1, 8005970 <_printf_i+0x40>)
 800596c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005970:	080059c9 	.word	0x080059c9
 8005974:	080059dd 	.word	0x080059dd
 8005978:	08005959 	.word	0x08005959
 800597c:	08005959 	.word	0x08005959
 8005980:	08005959 	.word	0x08005959
 8005984:	08005959 	.word	0x08005959
 8005988:	080059dd 	.word	0x080059dd
 800598c:	08005959 	.word	0x08005959
 8005990:	08005959 	.word	0x08005959
 8005994:	08005959 	.word	0x08005959
 8005998:	08005959 	.word	0x08005959
 800599c:	08005add 	.word	0x08005add
 80059a0:	08005a07 	.word	0x08005a07
 80059a4:	08005a97 	.word	0x08005a97
 80059a8:	08005959 	.word	0x08005959
 80059ac:	08005959 	.word	0x08005959
 80059b0:	08005aff 	.word	0x08005aff
 80059b4:	08005959 	.word	0x08005959
 80059b8:	08005a07 	.word	0x08005a07
 80059bc:	08005959 	.word	0x08005959
 80059c0:	08005959 	.word	0x08005959
 80059c4:	08005a9f 	.word	0x08005a9f
 80059c8:	6833      	ldr	r3, [r6, #0]
 80059ca:	1d1a      	adds	r2, r3, #4
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	6032      	str	r2, [r6, #0]
 80059d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80059d8:	2301      	movs	r3, #1
 80059da:	e09d      	b.n	8005b18 <_printf_i+0x1e8>
 80059dc:	6833      	ldr	r3, [r6, #0]
 80059de:	6820      	ldr	r0, [r4, #0]
 80059e0:	1d19      	adds	r1, r3, #4
 80059e2:	6031      	str	r1, [r6, #0]
 80059e4:	0606      	lsls	r6, r0, #24
 80059e6:	d501      	bpl.n	80059ec <_printf_i+0xbc>
 80059e8:	681d      	ldr	r5, [r3, #0]
 80059ea:	e003      	b.n	80059f4 <_printf_i+0xc4>
 80059ec:	0645      	lsls	r5, r0, #25
 80059ee:	d5fb      	bpl.n	80059e8 <_printf_i+0xb8>
 80059f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80059f4:	2d00      	cmp	r5, #0
 80059f6:	da03      	bge.n	8005a00 <_printf_i+0xd0>
 80059f8:	232d      	movs	r3, #45	@ 0x2d
 80059fa:	426d      	negs	r5, r5
 80059fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a00:	4859      	ldr	r0, [pc, #356]	@ (8005b68 <_printf_i+0x238>)
 8005a02:	230a      	movs	r3, #10
 8005a04:	e011      	b.n	8005a2a <_printf_i+0xfa>
 8005a06:	6821      	ldr	r1, [r4, #0]
 8005a08:	6833      	ldr	r3, [r6, #0]
 8005a0a:	0608      	lsls	r0, r1, #24
 8005a0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a10:	d402      	bmi.n	8005a18 <_printf_i+0xe8>
 8005a12:	0649      	lsls	r1, r1, #25
 8005a14:	bf48      	it	mi
 8005a16:	b2ad      	uxthmi	r5, r5
 8005a18:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a1a:	4853      	ldr	r0, [pc, #332]	@ (8005b68 <_printf_i+0x238>)
 8005a1c:	6033      	str	r3, [r6, #0]
 8005a1e:	bf14      	ite	ne
 8005a20:	230a      	movne	r3, #10
 8005a22:	2308      	moveq	r3, #8
 8005a24:	2100      	movs	r1, #0
 8005a26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a2a:	6866      	ldr	r6, [r4, #4]
 8005a2c:	60a6      	str	r6, [r4, #8]
 8005a2e:	2e00      	cmp	r6, #0
 8005a30:	bfa2      	ittt	ge
 8005a32:	6821      	ldrge	r1, [r4, #0]
 8005a34:	f021 0104 	bicge.w	r1, r1, #4
 8005a38:	6021      	strge	r1, [r4, #0]
 8005a3a:	b90d      	cbnz	r5, 8005a40 <_printf_i+0x110>
 8005a3c:	2e00      	cmp	r6, #0
 8005a3e:	d04b      	beq.n	8005ad8 <_printf_i+0x1a8>
 8005a40:	4616      	mov	r6, r2
 8005a42:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a46:	fb03 5711 	mls	r7, r3, r1, r5
 8005a4a:	5dc7      	ldrb	r7, [r0, r7]
 8005a4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a50:	462f      	mov	r7, r5
 8005a52:	42bb      	cmp	r3, r7
 8005a54:	460d      	mov	r5, r1
 8005a56:	d9f4      	bls.n	8005a42 <_printf_i+0x112>
 8005a58:	2b08      	cmp	r3, #8
 8005a5a:	d10b      	bne.n	8005a74 <_printf_i+0x144>
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	07df      	lsls	r7, r3, #31
 8005a60:	d508      	bpl.n	8005a74 <_printf_i+0x144>
 8005a62:	6923      	ldr	r3, [r4, #16]
 8005a64:	6861      	ldr	r1, [r4, #4]
 8005a66:	4299      	cmp	r1, r3
 8005a68:	bfde      	ittt	le
 8005a6a:	2330      	movle	r3, #48	@ 0x30
 8005a6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a70:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a74:	1b92      	subs	r2, r2, r6
 8005a76:	6122      	str	r2, [r4, #16]
 8005a78:	f8cd a000 	str.w	sl, [sp]
 8005a7c:	464b      	mov	r3, r9
 8005a7e:	aa03      	add	r2, sp, #12
 8005a80:	4621      	mov	r1, r4
 8005a82:	4640      	mov	r0, r8
 8005a84:	f7ff fee6 	bl	8005854 <_printf_common>
 8005a88:	3001      	adds	r0, #1
 8005a8a:	d14a      	bne.n	8005b22 <_printf_i+0x1f2>
 8005a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a90:	b004      	add	sp, #16
 8005a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a96:	6823      	ldr	r3, [r4, #0]
 8005a98:	f043 0320 	orr.w	r3, r3, #32
 8005a9c:	6023      	str	r3, [r4, #0]
 8005a9e:	4833      	ldr	r0, [pc, #204]	@ (8005b6c <_printf_i+0x23c>)
 8005aa0:	2778      	movs	r7, #120	@ 0x78
 8005aa2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005aa6:	6823      	ldr	r3, [r4, #0]
 8005aa8:	6831      	ldr	r1, [r6, #0]
 8005aaa:	061f      	lsls	r7, r3, #24
 8005aac:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ab0:	d402      	bmi.n	8005ab8 <_printf_i+0x188>
 8005ab2:	065f      	lsls	r7, r3, #25
 8005ab4:	bf48      	it	mi
 8005ab6:	b2ad      	uxthmi	r5, r5
 8005ab8:	6031      	str	r1, [r6, #0]
 8005aba:	07d9      	lsls	r1, r3, #31
 8005abc:	bf44      	itt	mi
 8005abe:	f043 0320 	orrmi.w	r3, r3, #32
 8005ac2:	6023      	strmi	r3, [r4, #0]
 8005ac4:	b11d      	cbz	r5, 8005ace <_printf_i+0x19e>
 8005ac6:	2310      	movs	r3, #16
 8005ac8:	e7ac      	b.n	8005a24 <_printf_i+0xf4>
 8005aca:	4827      	ldr	r0, [pc, #156]	@ (8005b68 <_printf_i+0x238>)
 8005acc:	e7e9      	b.n	8005aa2 <_printf_i+0x172>
 8005ace:	6823      	ldr	r3, [r4, #0]
 8005ad0:	f023 0320 	bic.w	r3, r3, #32
 8005ad4:	6023      	str	r3, [r4, #0]
 8005ad6:	e7f6      	b.n	8005ac6 <_printf_i+0x196>
 8005ad8:	4616      	mov	r6, r2
 8005ada:	e7bd      	b.n	8005a58 <_printf_i+0x128>
 8005adc:	6833      	ldr	r3, [r6, #0]
 8005ade:	6825      	ldr	r5, [r4, #0]
 8005ae0:	6961      	ldr	r1, [r4, #20]
 8005ae2:	1d18      	adds	r0, r3, #4
 8005ae4:	6030      	str	r0, [r6, #0]
 8005ae6:	062e      	lsls	r6, r5, #24
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	d501      	bpl.n	8005af0 <_printf_i+0x1c0>
 8005aec:	6019      	str	r1, [r3, #0]
 8005aee:	e002      	b.n	8005af6 <_printf_i+0x1c6>
 8005af0:	0668      	lsls	r0, r5, #25
 8005af2:	d5fb      	bpl.n	8005aec <_printf_i+0x1bc>
 8005af4:	8019      	strh	r1, [r3, #0]
 8005af6:	2300      	movs	r3, #0
 8005af8:	6123      	str	r3, [r4, #16]
 8005afa:	4616      	mov	r6, r2
 8005afc:	e7bc      	b.n	8005a78 <_printf_i+0x148>
 8005afe:	6833      	ldr	r3, [r6, #0]
 8005b00:	1d1a      	adds	r2, r3, #4
 8005b02:	6032      	str	r2, [r6, #0]
 8005b04:	681e      	ldr	r6, [r3, #0]
 8005b06:	6862      	ldr	r2, [r4, #4]
 8005b08:	2100      	movs	r1, #0
 8005b0a:	4630      	mov	r0, r6
 8005b0c:	f7fa fb60 	bl	80001d0 <memchr>
 8005b10:	b108      	cbz	r0, 8005b16 <_printf_i+0x1e6>
 8005b12:	1b80      	subs	r0, r0, r6
 8005b14:	6060      	str	r0, [r4, #4]
 8005b16:	6863      	ldr	r3, [r4, #4]
 8005b18:	6123      	str	r3, [r4, #16]
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b20:	e7aa      	b.n	8005a78 <_printf_i+0x148>
 8005b22:	6923      	ldr	r3, [r4, #16]
 8005b24:	4632      	mov	r2, r6
 8005b26:	4649      	mov	r1, r9
 8005b28:	4640      	mov	r0, r8
 8005b2a:	47d0      	blx	sl
 8005b2c:	3001      	adds	r0, #1
 8005b2e:	d0ad      	beq.n	8005a8c <_printf_i+0x15c>
 8005b30:	6823      	ldr	r3, [r4, #0]
 8005b32:	079b      	lsls	r3, r3, #30
 8005b34:	d413      	bmi.n	8005b5e <_printf_i+0x22e>
 8005b36:	68e0      	ldr	r0, [r4, #12]
 8005b38:	9b03      	ldr	r3, [sp, #12]
 8005b3a:	4298      	cmp	r0, r3
 8005b3c:	bfb8      	it	lt
 8005b3e:	4618      	movlt	r0, r3
 8005b40:	e7a6      	b.n	8005a90 <_printf_i+0x160>
 8005b42:	2301      	movs	r3, #1
 8005b44:	4632      	mov	r2, r6
 8005b46:	4649      	mov	r1, r9
 8005b48:	4640      	mov	r0, r8
 8005b4a:	47d0      	blx	sl
 8005b4c:	3001      	adds	r0, #1
 8005b4e:	d09d      	beq.n	8005a8c <_printf_i+0x15c>
 8005b50:	3501      	adds	r5, #1
 8005b52:	68e3      	ldr	r3, [r4, #12]
 8005b54:	9903      	ldr	r1, [sp, #12]
 8005b56:	1a5b      	subs	r3, r3, r1
 8005b58:	42ab      	cmp	r3, r5
 8005b5a:	dcf2      	bgt.n	8005b42 <_printf_i+0x212>
 8005b5c:	e7eb      	b.n	8005b36 <_printf_i+0x206>
 8005b5e:	2500      	movs	r5, #0
 8005b60:	f104 0619 	add.w	r6, r4, #25
 8005b64:	e7f5      	b.n	8005b52 <_printf_i+0x222>
 8005b66:	bf00      	nop
 8005b68:	08005fa1 	.word	0x08005fa1
 8005b6c:	08005fb2 	.word	0x08005fb2

08005b70 <__sflush_r>:
 8005b70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b78:	0716      	lsls	r6, r2, #28
 8005b7a:	4605      	mov	r5, r0
 8005b7c:	460c      	mov	r4, r1
 8005b7e:	d454      	bmi.n	8005c2a <__sflush_r+0xba>
 8005b80:	684b      	ldr	r3, [r1, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	dc02      	bgt.n	8005b8c <__sflush_r+0x1c>
 8005b86:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	dd48      	ble.n	8005c1e <__sflush_r+0xae>
 8005b8c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005b8e:	2e00      	cmp	r6, #0
 8005b90:	d045      	beq.n	8005c1e <__sflush_r+0xae>
 8005b92:	2300      	movs	r3, #0
 8005b94:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005b98:	682f      	ldr	r7, [r5, #0]
 8005b9a:	6a21      	ldr	r1, [r4, #32]
 8005b9c:	602b      	str	r3, [r5, #0]
 8005b9e:	d030      	beq.n	8005c02 <__sflush_r+0x92>
 8005ba0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005ba2:	89a3      	ldrh	r3, [r4, #12]
 8005ba4:	0759      	lsls	r1, r3, #29
 8005ba6:	d505      	bpl.n	8005bb4 <__sflush_r+0x44>
 8005ba8:	6863      	ldr	r3, [r4, #4]
 8005baa:	1ad2      	subs	r2, r2, r3
 8005bac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005bae:	b10b      	cbz	r3, 8005bb4 <__sflush_r+0x44>
 8005bb0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005bb2:	1ad2      	subs	r2, r2, r3
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005bb8:	6a21      	ldr	r1, [r4, #32]
 8005bba:	4628      	mov	r0, r5
 8005bbc:	47b0      	blx	r6
 8005bbe:	1c43      	adds	r3, r0, #1
 8005bc0:	89a3      	ldrh	r3, [r4, #12]
 8005bc2:	d106      	bne.n	8005bd2 <__sflush_r+0x62>
 8005bc4:	6829      	ldr	r1, [r5, #0]
 8005bc6:	291d      	cmp	r1, #29
 8005bc8:	d82b      	bhi.n	8005c22 <__sflush_r+0xb2>
 8005bca:	4a2a      	ldr	r2, [pc, #168]	@ (8005c74 <__sflush_r+0x104>)
 8005bcc:	410a      	asrs	r2, r1
 8005bce:	07d6      	lsls	r6, r2, #31
 8005bd0:	d427      	bmi.n	8005c22 <__sflush_r+0xb2>
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	6062      	str	r2, [r4, #4]
 8005bd6:	04d9      	lsls	r1, r3, #19
 8005bd8:	6922      	ldr	r2, [r4, #16]
 8005bda:	6022      	str	r2, [r4, #0]
 8005bdc:	d504      	bpl.n	8005be8 <__sflush_r+0x78>
 8005bde:	1c42      	adds	r2, r0, #1
 8005be0:	d101      	bne.n	8005be6 <__sflush_r+0x76>
 8005be2:	682b      	ldr	r3, [r5, #0]
 8005be4:	b903      	cbnz	r3, 8005be8 <__sflush_r+0x78>
 8005be6:	6560      	str	r0, [r4, #84]	@ 0x54
 8005be8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005bea:	602f      	str	r7, [r5, #0]
 8005bec:	b1b9      	cbz	r1, 8005c1e <__sflush_r+0xae>
 8005bee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005bf2:	4299      	cmp	r1, r3
 8005bf4:	d002      	beq.n	8005bfc <__sflush_r+0x8c>
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	f7ff fbf2 	bl	80053e0 <_free_r>
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c00:	e00d      	b.n	8005c1e <__sflush_r+0xae>
 8005c02:	2301      	movs	r3, #1
 8005c04:	4628      	mov	r0, r5
 8005c06:	47b0      	blx	r6
 8005c08:	4602      	mov	r2, r0
 8005c0a:	1c50      	adds	r0, r2, #1
 8005c0c:	d1c9      	bne.n	8005ba2 <__sflush_r+0x32>
 8005c0e:	682b      	ldr	r3, [r5, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d0c6      	beq.n	8005ba2 <__sflush_r+0x32>
 8005c14:	2b1d      	cmp	r3, #29
 8005c16:	d001      	beq.n	8005c1c <__sflush_r+0xac>
 8005c18:	2b16      	cmp	r3, #22
 8005c1a:	d11e      	bne.n	8005c5a <__sflush_r+0xea>
 8005c1c:	602f      	str	r7, [r5, #0]
 8005c1e:	2000      	movs	r0, #0
 8005c20:	e022      	b.n	8005c68 <__sflush_r+0xf8>
 8005c22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c26:	b21b      	sxth	r3, r3
 8005c28:	e01b      	b.n	8005c62 <__sflush_r+0xf2>
 8005c2a:	690f      	ldr	r7, [r1, #16]
 8005c2c:	2f00      	cmp	r7, #0
 8005c2e:	d0f6      	beq.n	8005c1e <__sflush_r+0xae>
 8005c30:	0793      	lsls	r3, r2, #30
 8005c32:	680e      	ldr	r6, [r1, #0]
 8005c34:	bf08      	it	eq
 8005c36:	694b      	ldreq	r3, [r1, #20]
 8005c38:	600f      	str	r7, [r1, #0]
 8005c3a:	bf18      	it	ne
 8005c3c:	2300      	movne	r3, #0
 8005c3e:	eba6 0807 	sub.w	r8, r6, r7
 8005c42:	608b      	str	r3, [r1, #8]
 8005c44:	f1b8 0f00 	cmp.w	r8, #0
 8005c48:	dde9      	ble.n	8005c1e <__sflush_r+0xae>
 8005c4a:	6a21      	ldr	r1, [r4, #32]
 8005c4c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005c4e:	4643      	mov	r3, r8
 8005c50:	463a      	mov	r2, r7
 8005c52:	4628      	mov	r0, r5
 8005c54:	47b0      	blx	r6
 8005c56:	2800      	cmp	r0, #0
 8005c58:	dc08      	bgt.n	8005c6c <__sflush_r+0xfc>
 8005c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c62:	81a3      	strh	r3, [r4, #12]
 8005c64:	f04f 30ff 	mov.w	r0, #4294967295
 8005c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c6c:	4407      	add	r7, r0
 8005c6e:	eba8 0800 	sub.w	r8, r8, r0
 8005c72:	e7e7      	b.n	8005c44 <__sflush_r+0xd4>
 8005c74:	dfbffffe 	.word	0xdfbffffe

08005c78 <_fflush_r>:
 8005c78:	b538      	push	{r3, r4, r5, lr}
 8005c7a:	690b      	ldr	r3, [r1, #16]
 8005c7c:	4605      	mov	r5, r0
 8005c7e:	460c      	mov	r4, r1
 8005c80:	b913      	cbnz	r3, 8005c88 <_fflush_r+0x10>
 8005c82:	2500      	movs	r5, #0
 8005c84:	4628      	mov	r0, r5
 8005c86:	bd38      	pop	{r3, r4, r5, pc}
 8005c88:	b118      	cbz	r0, 8005c92 <_fflush_r+0x1a>
 8005c8a:	6a03      	ldr	r3, [r0, #32]
 8005c8c:	b90b      	cbnz	r3, 8005c92 <_fflush_r+0x1a>
 8005c8e:	f7ff fa9f 	bl	80051d0 <__sinit>
 8005c92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d0f3      	beq.n	8005c82 <_fflush_r+0xa>
 8005c9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005c9c:	07d0      	lsls	r0, r2, #31
 8005c9e:	d404      	bmi.n	8005caa <_fflush_r+0x32>
 8005ca0:	0599      	lsls	r1, r3, #22
 8005ca2:	d402      	bmi.n	8005caa <_fflush_r+0x32>
 8005ca4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ca6:	f7ff fb98 	bl	80053da <__retarget_lock_acquire_recursive>
 8005caa:	4628      	mov	r0, r5
 8005cac:	4621      	mov	r1, r4
 8005cae:	f7ff ff5f 	bl	8005b70 <__sflush_r>
 8005cb2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005cb4:	07da      	lsls	r2, r3, #31
 8005cb6:	4605      	mov	r5, r0
 8005cb8:	d4e4      	bmi.n	8005c84 <_fflush_r+0xc>
 8005cba:	89a3      	ldrh	r3, [r4, #12]
 8005cbc:	059b      	lsls	r3, r3, #22
 8005cbe:	d4e1      	bmi.n	8005c84 <_fflush_r+0xc>
 8005cc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005cc2:	f7ff fb8b 	bl	80053dc <__retarget_lock_release_recursive>
 8005cc6:	e7dd      	b.n	8005c84 <_fflush_r+0xc>

08005cc8 <__swbuf_r>:
 8005cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cca:	460e      	mov	r6, r1
 8005ccc:	4614      	mov	r4, r2
 8005cce:	4605      	mov	r5, r0
 8005cd0:	b118      	cbz	r0, 8005cda <__swbuf_r+0x12>
 8005cd2:	6a03      	ldr	r3, [r0, #32]
 8005cd4:	b90b      	cbnz	r3, 8005cda <__swbuf_r+0x12>
 8005cd6:	f7ff fa7b 	bl	80051d0 <__sinit>
 8005cda:	69a3      	ldr	r3, [r4, #24]
 8005cdc:	60a3      	str	r3, [r4, #8]
 8005cde:	89a3      	ldrh	r3, [r4, #12]
 8005ce0:	071a      	lsls	r2, r3, #28
 8005ce2:	d501      	bpl.n	8005ce8 <__swbuf_r+0x20>
 8005ce4:	6923      	ldr	r3, [r4, #16]
 8005ce6:	b943      	cbnz	r3, 8005cfa <__swbuf_r+0x32>
 8005ce8:	4621      	mov	r1, r4
 8005cea:	4628      	mov	r0, r5
 8005cec:	f000 f82a 	bl	8005d44 <__swsetup_r>
 8005cf0:	b118      	cbz	r0, 8005cfa <__swbuf_r+0x32>
 8005cf2:	f04f 37ff 	mov.w	r7, #4294967295
 8005cf6:	4638      	mov	r0, r7
 8005cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cfa:	6823      	ldr	r3, [r4, #0]
 8005cfc:	6922      	ldr	r2, [r4, #16]
 8005cfe:	1a98      	subs	r0, r3, r2
 8005d00:	6963      	ldr	r3, [r4, #20]
 8005d02:	b2f6      	uxtb	r6, r6
 8005d04:	4283      	cmp	r3, r0
 8005d06:	4637      	mov	r7, r6
 8005d08:	dc05      	bgt.n	8005d16 <__swbuf_r+0x4e>
 8005d0a:	4621      	mov	r1, r4
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	f7ff ffb3 	bl	8005c78 <_fflush_r>
 8005d12:	2800      	cmp	r0, #0
 8005d14:	d1ed      	bne.n	8005cf2 <__swbuf_r+0x2a>
 8005d16:	68a3      	ldr	r3, [r4, #8]
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	60a3      	str	r3, [r4, #8]
 8005d1c:	6823      	ldr	r3, [r4, #0]
 8005d1e:	1c5a      	adds	r2, r3, #1
 8005d20:	6022      	str	r2, [r4, #0]
 8005d22:	701e      	strb	r6, [r3, #0]
 8005d24:	6962      	ldr	r2, [r4, #20]
 8005d26:	1c43      	adds	r3, r0, #1
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d004      	beq.n	8005d36 <__swbuf_r+0x6e>
 8005d2c:	89a3      	ldrh	r3, [r4, #12]
 8005d2e:	07db      	lsls	r3, r3, #31
 8005d30:	d5e1      	bpl.n	8005cf6 <__swbuf_r+0x2e>
 8005d32:	2e0a      	cmp	r6, #10
 8005d34:	d1df      	bne.n	8005cf6 <__swbuf_r+0x2e>
 8005d36:	4621      	mov	r1, r4
 8005d38:	4628      	mov	r0, r5
 8005d3a:	f7ff ff9d 	bl	8005c78 <_fflush_r>
 8005d3e:	2800      	cmp	r0, #0
 8005d40:	d0d9      	beq.n	8005cf6 <__swbuf_r+0x2e>
 8005d42:	e7d6      	b.n	8005cf2 <__swbuf_r+0x2a>

08005d44 <__swsetup_r>:
 8005d44:	b538      	push	{r3, r4, r5, lr}
 8005d46:	4b29      	ldr	r3, [pc, #164]	@ (8005dec <__swsetup_r+0xa8>)
 8005d48:	4605      	mov	r5, r0
 8005d4a:	6818      	ldr	r0, [r3, #0]
 8005d4c:	460c      	mov	r4, r1
 8005d4e:	b118      	cbz	r0, 8005d58 <__swsetup_r+0x14>
 8005d50:	6a03      	ldr	r3, [r0, #32]
 8005d52:	b90b      	cbnz	r3, 8005d58 <__swsetup_r+0x14>
 8005d54:	f7ff fa3c 	bl	80051d0 <__sinit>
 8005d58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d5c:	0719      	lsls	r1, r3, #28
 8005d5e:	d422      	bmi.n	8005da6 <__swsetup_r+0x62>
 8005d60:	06da      	lsls	r2, r3, #27
 8005d62:	d407      	bmi.n	8005d74 <__swsetup_r+0x30>
 8005d64:	2209      	movs	r2, #9
 8005d66:	602a      	str	r2, [r5, #0]
 8005d68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d6c:	81a3      	strh	r3, [r4, #12]
 8005d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d72:	e033      	b.n	8005ddc <__swsetup_r+0x98>
 8005d74:	0758      	lsls	r0, r3, #29
 8005d76:	d512      	bpl.n	8005d9e <__swsetup_r+0x5a>
 8005d78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d7a:	b141      	cbz	r1, 8005d8e <__swsetup_r+0x4a>
 8005d7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d80:	4299      	cmp	r1, r3
 8005d82:	d002      	beq.n	8005d8a <__swsetup_r+0x46>
 8005d84:	4628      	mov	r0, r5
 8005d86:	f7ff fb2b 	bl	80053e0 <_free_r>
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d8e:	89a3      	ldrh	r3, [r4, #12]
 8005d90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005d94:	81a3      	strh	r3, [r4, #12]
 8005d96:	2300      	movs	r3, #0
 8005d98:	6063      	str	r3, [r4, #4]
 8005d9a:	6923      	ldr	r3, [r4, #16]
 8005d9c:	6023      	str	r3, [r4, #0]
 8005d9e:	89a3      	ldrh	r3, [r4, #12]
 8005da0:	f043 0308 	orr.w	r3, r3, #8
 8005da4:	81a3      	strh	r3, [r4, #12]
 8005da6:	6923      	ldr	r3, [r4, #16]
 8005da8:	b94b      	cbnz	r3, 8005dbe <__swsetup_r+0x7a>
 8005daa:	89a3      	ldrh	r3, [r4, #12]
 8005dac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005db0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005db4:	d003      	beq.n	8005dbe <__swsetup_r+0x7a>
 8005db6:	4621      	mov	r1, r4
 8005db8:	4628      	mov	r0, r5
 8005dba:	f000 f84f 	bl	8005e5c <__smakebuf_r>
 8005dbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dc2:	f013 0201 	ands.w	r2, r3, #1
 8005dc6:	d00a      	beq.n	8005dde <__swsetup_r+0x9a>
 8005dc8:	2200      	movs	r2, #0
 8005dca:	60a2      	str	r2, [r4, #8]
 8005dcc:	6962      	ldr	r2, [r4, #20]
 8005dce:	4252      	negs	r2, r2
 8005dd0:	61a2      	str	r2, [r4, #24]
 8005dd2:	6922      	ldr	r2, [r4, #16]
 8005dd4:	b942      	cbnz	r2, 8005de8 <__swsetup_r+0xa4>
 8005dd6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005dda:	d1c5      	bne.n	8005d68 <__swsetup_r+0x24>
 8005ddc:	bd38      	pop	{r3, r4, r5, pc}
 8005dde:	0799      	lsls	r1, r3, #30
 8005de0:	bf58      	it	pl
 8005de2:	6962      	ldrpl	r2, [r4, #20]
 8005de4:	60a2      	str	r2, [r4, #8]
 8005de6:	e7f4      	b.n	8005dd2 <__swsetup_r+0x8e>
 8005de8:	2000      	movs	r0, #0
 8005dea:	e7f7      	b.n	8005ddc <__swsetup_r+0x98>
 8005dec:	20000018 	.word	0x20000018

08005df0 <_sbrk_r>:
 8005df0:	b538      	push	{r3, r4, r5, lr}
 8005df2:	4d06      	ldr	r5, [pc, #24]	@ (8005e0c <_sbrk_r+0x1c>)
 8005df4:	2300      	movs	r3, #0
 8005df6:	4604      	mov	r4, r0
 8005df8:	4608      	mov	r0, r1
 8005dfa:	602b      	str	r3, [r5, #0]
 8005dfc:	f7fa fe56 	bl	8000aac <_sbrk>
 8005e00:	1c43      	adds	r3, r0, #1
 8005e02:	d102      	bne.n	8005e0a <_sbrk_r+0x1a>
 8005e04:	682b      	ldr	r3, [r5, #0]
 8005e06:	b103      	cbz	r3, 8005e0a <_sbrk_r+0x1a>
 8005e08:	6023      	str	r3, [r4, #0]
 8005e0a:	bd38      	pop	{r3, r4, r5, pc}
 8005e0c:	200002e4 	.word	0x200002e4

08005e10 <__swhatbuf_r>:
 8005e10:	b570      	push	{r4, r5, r6, lr}
 8005e12:	460c      	mov	r4, r1
 8005e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e18:	2900      	cmp	r1, #0
 8005e1a:	b096      	sub	sp, #88	@ 0x58
 8005e1c:	4615      	mov	r5, r2
 8005e1e:	461e      	mov	r6, r3
 8005e20:	da0d      	bge.n	8005e3e <__swhatbuf_r+0x2e>
 8005e22:	89a3      	ldrh	r3, [r4, #12]
 8005e24:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005e28:	f04f 0100 	mov.w	r1, #0
 8005e2c:	bf14      	ite	ne
 8005e2e:	2340      	movne	r3, #64	@ 0x40
 8005e30:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005e34:	2000      	movs	r0, #0
 8005e36:	6031      	str	r1, [r6, #0]
 8005e38:	602b      	str	r3, [r5, #0]
 8005e3a:	b016      	add	sp, #88	@ 0x58
 8005e3c:	bd70      	pop	{r4, r5, r6, pc}
 8005e3e:	466a      	mov	r2, sp
 8005e40:	f000 f848 	bl	8005ed4 <_fstat_r>
 8005e44:	2800      	cmp	r0, #0
 8005e46:	dbec      	blt.n	8005e22 <__swhatbuf_r+0x12>
 8005e48:	9901      	ldr	r1, [sp, #4]
 8005e4a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005e4e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005e52:	4259      	negs	r1, r3
 8005e54:	4159      	adcs	r1, r3
 8005e56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e5a:	e7eb      	b.n	8005e34 <__swhatbuf_r+0x24>

08005e5c <__smakebuf_r>:
 8005e5c:	898b      	ldrh	r3, [r1, #12]
 8005e5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e60:	079d      	lsls	r5, r3, #30
 8005e62:	4606      	mov	r6, r0
 8005e64:	460c      	mov	r4, r1
 8005e66:	d507      	bpl.n	8005e78 <__smakebuf_r+0x1c>
 8005e68:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005e6c:	6023      	str	r3, [r4, #0]
 8005e6e:	6123      	str	r3, [r4, #16]
 8005e70:	2301      	movs	r3, #1
 8005e72:	6163      	str	r3, [r4, #20]
 8005e74:	b003      	add	sp, #12
 8005e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e78:	ab01      	add	r3, sp, #4
 8005e7a:	466a      	mov	r2, sp
 8005e7c:	f7ff ffc8 	bl	8005e10 <__swhatbuf_r>
 8005e80:	9f00      	ldr	r7, [sp, #0]
 8005e82:	4605      	mov	r5, r0
 8005e84:	4639      	mov	r1, r7
 8005e86:	4630      	mov	r0, r6
 8005e88:	f7ff fb16 	bl	80054b8 <_malloc_r>
 8005e8c:	b948      	cbnz	r0, 8005ea2 <__smakebuf_r+0x46>
 8005e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e92:	059a      	lsls	r2, r3, #22
 8005e94:	d4ee      	bmi.n	8005e74 <__smakebuf_r+0x18>
 8005e96:	f023 0303 	bic.w	r3, r3, #3
 8005e9a:	f043 0302 	orr.w	r3, r3, #2
 8005e9e:	81a3      	strh	r3, [r4, #12]
 8005ea0:	e7e2      	b.n	8005e68 <__smakebuf_r+0xc>
 8005ea2:	89a3      	ldrh	r3, [r4, #12]
 8005ea4:	6020      	str	r0, [r4, #0]
 8005ea6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005eaa:	81a3      	strh	r3, [r4, #12]
 8005eac:	9b01      	ldr	r3, [sp, #4]
 8005eae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005eb2:	b15b      	cbz	r3, 8005ecc <__smakebuf_r+0x70>
 8005eb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005eb8:	4630      	mov	r0, r6
 8005eba:	f000 f81d 	bl	8005ef8 <_isatty_r>
 8005ebe:	b128      	cbz	r0, 8005ecc <__smakebuf_r+0x70>
 8005ec0:	89a3      	ldrh	r3, [r4, #12]
 8005ec2:	f023 0303 	bic.w	r3, r3, #3
 8005ec6:	f043 0301 	orr.w	r3, r3, #1
 8005eca:	81a3      	strh	r3, [r4, #12]
 8005ecc:	89a3      	ldrh	r3, [r4, #12]
 8005ece:	431d      	orrs	r5, r3
 8005ed0:	81a5      	strh	r5, [r4, #12]
 8005ed2:	e7cf      	b.n	8005e74 <__smakebuf_r+0x18>

08005ed4 <_fstat_r>:
 8005ed4:	b538      	push	{r3, r4, r5, lr}
 8005ed6:	4d07      	ldr	r5, [pc, #28]	@ (8005ef4 <_fstat_r+0x20>)
 8005ed8:	2300      	movs	r3, #0
 8005eda:	4604      	mov	r4, r0
 8005edc:	4608      	mov	r0, r1
 8005ede:	4611      	mov	r1, r2
 8005ee0:	602b      	str	r3, [r5, #0]
 8005ee2:	f7fa fdbb 	bl	8000a5c <_fstat>
 8005ee6:	1c43      	adds	r3, r0, #1
 8005ee8:	d102      	bne.n	8005ef0 <_fstat_r+0x1c>
 8005eea:	682b      	ldr	r3, [r5, #0]
 8005eec:	b103      	cbz	r3, 8005ef0 <_fstat_r+0x1c>
 8005eee:	6023      	str	r3, [r4, #0]
 8005ef0:	bd38      	pop	{r3, r4, r5, pc}
 8005ef2:	bf00      	nop
 8005ef4:	200002e4 	.word	0x200002e4

08005ef8 <_isatty_r>:
 8005ef8:	b538      	push	{r3, r4, r5, lr}
 8005efa:	4d06      	ldr	r5, [pc, #24]	@ (8005f14 <_isatty_r+0x1c>)
 8005efc:	2300      	movs	r3, #0
 8005efe:	4604      	mov	r4, r0
 8005f00:	4608      	mov	r0, r1
 8005f02:	602b      	str	r3, [r5, #0]
 8005f04:	f7fa fdba 	bl	8000a7c <_isatty>
 8005f08:	1c43      	adds	r3, r0, #1
 8005f0a:	d102      	bne.n	8005f12 <_isatty_r+0x1a>
 8005f0c:	682b      	ldr	r3, [r5, #0]
 8005f0e:	b103      	cbz	r3, 8005f12 <_isatty_r+0x1a>
 8005f10:	6023      	str	r3, [r4, #0]
 8005f12:	bd38      	pop	{r3, r4, r5, pc}
 8005f14:	200002e4 	.word	0x200002e4

08005f18 <_init>:
 8005f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f1a:	bf00      	nop
 8005f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f1e:	bc08      	pop	{r3}
 8005f20:	469e      	mov	lr, r3
 8005f22:	4770      	bx	lr

08005f24 <_fini>:
 8005f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f26:	bf00      	nop
 8005f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f2a:	bc08      	pop	{r3}
 8005f2c:	469e      	mov	lr, r3
 8005f2e:	4770      	bx	lr

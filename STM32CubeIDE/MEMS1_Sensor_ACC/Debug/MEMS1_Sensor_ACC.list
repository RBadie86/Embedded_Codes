
MEMS1_Sensor_ACC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006710  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080068a0  080068a0  000078a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006954  08006954  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006954  08006954  00007954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800695c  0800695c  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800695c  0800695c  0000795c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006960  08006960  00007960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006964  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  20000068  080069cc  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  080069cc  000082f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b6b6  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026e4  00000000  00000000  0002374e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a0  00000000  00000000  00025e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000123f  00000000  00000000  000275d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d47  00000000  00000000  00028817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d52  00000000  00000000  0005055e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2fd4  00000000  00000000  000662b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00159284  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c40  00000000  00000000  001592c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0015ff08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006888 	.word	0x08006888

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006888 	.word	0x08006888

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f001 fe87 	bl	8002278 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f82b 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 f8ab 	bl	80006c8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000572:	f000 f879 	bl	8000668 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  DrdyUpdate_1 = 0;
 8000576:	4b0f      	ldr	r3, [pc, #60]	@ (80005b4 <main+0x54>)
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
  DrdyUpdate_2 = 0;
 800057c:	4b0e      	ldr	r3, [pc, #56]	@ (80005b8 <main+0x58>)
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
  MEMS_Init();
 8000582:	f000 f91d 	bl	80007c0 <MEMS_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  if (DrdyUpdate_1 != 0) {
 8000586:	4b0b      	ldr	r3, [pc, #44]	@ (80005b4 <main+0x54>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d0fb      	beq.n	8000586 <main+0x26>
	      DrdyUpdate_1 = 0;
 800058e:	4b09      	ldr	r3, [pc, #36]	@ (80005b4 <main+0x54>)
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
	      LSM6DSL_Axes_t axes;
	      LSM6DSL_ACC_GetAxes(&MovementDetector, &axes);
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	4619      	mov	r1, r3
 8000598:	4808      	ldr	r0, [pc, #32]	@ (80005bc <main+0x5c>)
 800059a:	f000 fe79 	bl	8001290 <LSM6DSL_ACC_GetAxes>
	      printf("Acc-Axes-X:%5d,   Acc-Axes-Y:%5d,   Acc-Axes-Z:%5d\r\n",
	             (int) axes.x, (int) axes.y, (int) axes.z);
 800059e:	6879      	ldr	r1, [r7, #4]
 80005a0:	68ba      	ldr	r2, [r7, #8]
 80005a2:	68fb      	ldr	r3, [r7, #12]
	      printf("Acc-Axes-X:%5d,   Acc-Axes-Y:%5d,   Acc-Axes-Z:%5d\r\n",
 80005a4:	4806      	ldr	r0, [pc, #24]	@ (80005c0 <main+0x60>)
 80005a6:	f005 fb01 	bl	8005bac <iprintf>
	      HAL_Delay(30);
 80005aa:	201e      	movs	r0, #30
 80005ac:	f001 fed8 	bl	8002360 <HAL_Delay>
	  if (DrdyUpdate_1 != 0) {
 80005b0:	e7e9      	b.n	8000586 <main+0x26>
 80005b2:	bf00      	nop
 80005b4:	20000144 	.word	0x20000144
 80005b8:	20000148 	.word	0x20000148
 80005bc:	2000010c 	.word	0x2000010c
 80005c0:	080068a0 	.word	0x080068a0

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b096      	sub	sp, #88	@ 0x58
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	2244      	movs	r2, #68	@ 0x44
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f005 fb3f 	bl	8005c56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	463b      	mov	r3, r7
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
 80005e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005e6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005ea:	f003 f94b 	bl	8003884 <HAL_PWREx_ControlVoltageScaling>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005f4:	f000 f97c 	bl	80008f0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005f8:	2310      	movs	r3, #16
 80005fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005fc:	2301      	movs	r3, #1
 80005fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000604:	2360      	movs	r3, #96	@ 0x60
 8000606:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000608:	2302      	movs	r3, #2
 800060a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800060c:	2301      	movs	r3, #1
 800060e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000610:	2301      	movs	r3, #1
 8000612:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000614:	2328      	movs	r3, #40	@ 0x28
 8000616:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000618:	2307      	movs	r3, #7
 800061a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800061c:	2302      	movs	r3, #2
 800061e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000620:	2302      	movs	r3, #2
 8000622:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000624:	f107 0314 	add.w	r3, r7, #20
 8000628:	4618      	mov	r0, r3
 800062a:	f003 f981 	bl	8003930 <HAL_RCC_OscConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000634:	f000 f95c 	bl	80008f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000638:	230f      	movs	r3, #15
 800063a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063c:	2303      	movs	r3, #3
 800063e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800064c:	463b      	mov	r3, r7
 800064e:	2104      	movs	r1, #4
 8000650:	4618      	mov	r0, r3
 8000652:	f003 fd49 	bl	80040e8 <HAL_RCC_ClockConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800065c:	f000 f948 	bl	80008f0 <Error_Handler>
  }
}
 8000660:	bf00      	nop
 8000662:	3758      	adds	r7, #88	@ 0x58
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800066c:	4b14      	ldr	r3, [pc, #80]	@ (80006c0 <MX_USART1_UART_Init+0x58>)
 800066e:	4a15      	ldr	r2, [pc, #84]	@ (80006c4 <MX_USART1_UART_Init+0x5c>)
 8000670:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000672:	4b13      	ldr	r3, [pc, #76]	@ (80006c0 <MX_USART1_UART_Init+0x58>)
 8000674:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000678:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800067a:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <MX_USART1_UART_Init+0x58>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000680:	4b0f      	ldr	r3, [pc, #60]	@ (80006c0 <MX_USART1_UART_Init+0x58>)
 8000682:	2200      	movs	r2, #0
 8000684:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000686:	4b0e      	ldr	r3, [pc, #56]	@ (80006c0 <MX_USART1_UART_Init+0x58>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800068c:	4b0c      	ldr	r3, [pc, #48]	@ (80006c0 <MX_USART1_UART_Init+0x58>)
 800068e:	220c      	movs	r2, #12
 8000690:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000692:	4b0b      	ldr	r3, [pc, #44]	@ (80006c0 <MX_USART1_UART_Init+0x58>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000698:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <MX_USART1_UART_Init+0x58>)
 800069a:	2200      	movs	r2, #0
 800069c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800069e:	4b08      	ldr	r3, [pc, #32]	@ (80006c0 <MX_USART1_UART_Init+0x58>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006a4:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <MX_USART1_UART_Init+0x58>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006aa:	4805      	ldr	r0, [pc, #20]	@ (80006c0 <MX_USART1_UART_Init+0x58>)
 80006ac:	f004 fbfc 	bl	8004ea8 <HAL_UART_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006b6:	f000 f91b 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000084 	.word	0x20000084
 80006c4:	40013800 	.word	0x40013800

080006c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08a      	sub	sp, #40	@ 0x28
 80006cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	4b35      	ldr	r3, [pc, #212]	@ (80007b4 <MX_GPIO_Init+0xec>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e2:	4a34      	ldr	r2, [pc, #208]	@ (80007b4 <MX_GPIO_Init+0xec>)
 80006e4:	f043 0304 	orr.w	r3, r3, #4
 80006e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ea:	4b32      	ldr	r3, [pc, #200]	@ (80007b4 <MX_GPIO_Init+0xec>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ee:	f003 0304 	and.w	r3, r3, #4
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	4b2f      	ldr	r3, [pc, #188]	@ (80007b4 <MX_GPIO_Init+0xec>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fa:	4a2e      	ldr	r2, [pc, #184]	@ (80007b4 <MX_GPIO_Init+0xec>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000702:	4b2c      	ldr	r3, [pc, #176]	@ (80007b4 <MX_GPIO_Init+0xec>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070e:	4b29      	ldr	r3, [pc, #164]	@ (80007b4 <MX_GPIO_Init+0xec>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000712:	4a28      	ldr	r2, [pc, #160]	@ (80007b4 <MX_GPIO_Init+0xec>)
 8000714:	f043 0302 	orr.w	r3, r3, #2
 8000718:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800071a:	4b26      	ldr	r3, [pc, #152]	@ (80007b4 <MX_GPIO_Init+0xec>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071e:	f003 0302 	and.w	r3, r3, #2
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000726:	4b23      	ldr	r3, [pc, #140]	@ (80007b4 <MX_GPIO_Init+0xec>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072a:	4a22      	ldr	r2, [pc, #136]	@ (80007b4 <MX_GPIO_Init+0xec>)
 800072c:	f043 0310 	orr.w	r3, r3, #16
 8000730:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000732:	4b20      	ldr	r3, [pc, #128]	@ (80007b4 <MX_GPIO_Init+0xec>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000736:	f003 0310 	and.w	r3, r3, #16
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073e:	4b1d      	ldr	r3, [pc, #116]	@ (80007b4 <MX_GPIO_Init+0xec>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000742:	4a1c      	ldr	r2, [pc, #112]	@ (80007b4 <MX_GPIO_Init+0xec>)
 8000744:	f043 0308 	orr.w	r3, r3, #8
 8000748:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800074a:	4b1a      	ldr	r3, [pc, #104]	@ (80007b4 <MX_GPIO_Init+0xec>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074e:	f003 0308 	and.w	r3, r3, #8
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800075c:	4816      	ldr	r0, [pc, #88]	@ (80007b8 <MX_GPIO_Init+0xf0>)
 800075e:	f002 f9d3 	bl	8002b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000762:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000768:	2301      	movs	r3, #1
 800076a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000770:	2300      	movs	r3, #0
 8000772:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	4619      	mov	r1, r3
 800077a:	480f      	ldr	r0, [pc, #60]	@ (80007b8 <MX_GPIO_Init+0xf0>)
 800077c:	f001 ff26 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LSM6DSL_INT1_EXTI11_Pin */
  GPIO_InitStruct.Pin = LSM6DSL_INT1_EXTI11_Pin;
 8000780:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000786:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800078a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LSM6DSL_INT1_EXTI11_GPIO_Port, &GPIO_InitStruct);
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	4619      	mov	r1, r3
 8000796:	4809      	ldr	r0, [pc, #36]	@ (80007bc <MX_GPIO_Init+0xf4>)
 8000798:	f001 ff18 	bl	80025cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800079c:	2200      	movs	r2, #0
 800079e:	2100      	movs	r1, #0
 80007a0:	2028      	movs	r0, #40	@ 0x28
 80007a2:	f001 fedc 	bl	800255e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007a6:	2028      	movs	r0, #40	@ 0x28
 80007a8:	f001 fef5 	bl	8002596 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ac:	bf00      	nop
 80007ae:	3728      	adds	r7, #40	@ 0x28
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40021000 	.word	0x40021000
 80007b8:	48000400 	.word	0x48000400
 80007bc:	48000c00 	.word	0x48000c00

080007c0 <MEMS_Init>:

/* USER CODE BEGIN 4 */
static void MEMS_Init(void)

{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08a      	sub	sp, #40	@ 0x28
 80007c4:	af00      	add	r7, sp, #0
  LSM6DSL_IO_t IO;
  uint8_t ID;
  LSM6DSL_AxesRaw_t axes_raw;

  /* Link I2C functions to the LSM6DSL driver */
  IO.BusType     = LSM6DSL_I2C_BUS;
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
  IO.Address     = LSM6DSL_I2C_ADD_L;
 80007ca:	23d5      	movs	r3, #213	@ 0xd5
 80007cc:	753b      	strb	r3, [r7, #20]
  IO.Init        = BSP_I2C2_Init;
 80007ce:	4b24      	ldr	r3, [pc, #144]	@ (8000860 <MEMS_Init+0xa0>)
 80007d0:	60bb      	str	r3, [r7, #8]
  IO.DeInit      = BSP_I2C2_DeInit;
 80007d2:	4b24      	ldr	r3, [pc, #144]	@ (8000864 <MEMS_Init+0xa4>)
 80007d4:	60fb      	str	r3, [r7, #12]
  IO.ReadReg     = BSP_I2C2_ReadReg;
 80007d6:	4b24      	ldr	r3, [pc, #144]	@ (8000868 <MEMS_Init+0xa8>)
 80007d8:	61fb      	str	r3, [r7, #28]
  IO.WriteReg    = BSP_I2C2_WriteReg;
 80007da:	4b24      	ldr	r3, [pc, #144]	@ (800086c <MEMS_Init+0xac>)
 80007dc:	61bb      	str	r3, [r7, #24]
  IO.GetTick     = BSP_GetTick;
 80007de:	4b24      	ldr	r3, [pc, #144]	@ (8000870 <MEMS_Init+0xb0>)
 80007e0:	623b      	str	r3, [r7, #32]

  LSM6DSL_RegisterBusIO(&MovementDetector, &IO);
 80007e2:	f107 0308 	add.w	r3, r7, #8
 80007e6:	4619      	mov	r1, r3
 80007e8:	4822      	ldr	r0, [pc, #136]	@ (8000874 <MEMS_Init+0xb4>)
 80007ea:	f000 fb95 	bl	8000f18 <LSM6DSL_RegisterBusIO>

  /* Read the LSM6DSL WHO_AM_I register */
  LSM6DSL_ReadID(&MovementDetector, &ID);
 80007ee:	1dfb      	adds	r3, r7, #7
 80007f0:	4619      	mov	r1, r3
 80007f2:	4820      	ldr	r0, [pc, #128]	@ (8000874 <MEMS_Init+0xb4>)
 80007f4:	f000 fc63 	bl	80010be <LSM6DSL_ReadID>

  if (ID != LSM6DSL_ID) {
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	2b6a      	cmp	r3, #106	@ 0x6a
 80007fc:	d001      	beq.n	8000802 <MEMS_Init+0x42>

    Error_Handler();
 80007fe:	f000 f877 	bl	80008f0 <Error_Handler>

  }

  /* Initialize the LSM6DSL sensor */
  LSM6DSL_Init(&MovementDetector);
 8000802:	481c      	ldr	r0, [pc, #112]	@ (8000874 <MEMS_Init+0xb4>)
 8000804:	f000 fbf2 	bl	8000fec <LSM6DSL_Init>

  /* Configure the LSM6DSL accelerometer (ODR, scale and interrupt) */
  LSM6DSL_ACC_SetOutputDataRate(&MovementDetector, 1.6f); /* 26 Hz */
 8000808:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8000878 <MEMS_Init+0xb8>
 800080c:	4819      	ldr	r0, [pc, #100]	@ (8000874 <MEMS_Init+0xb4>)
 800080e:	f000 fcd7 	bl	80011c0 <LSM6DSL_ACC_SetOutputDataRate>
  LSM6DSL_ACC_SetFullScale(&MovementDetector, 4);          /* [-4000mg; +4000mg] */
 8000812:	2104      	movs	r1, #4
 8000814:	4817      	ldr	r0, [pc, #92]	@ (8000874 <MEMS_Init+0xb4>)
 8000816:	f000 fcef 	bl	80011f8 <LSM6DSL_ACC_SetFullScale>
  LSM6DSL_ACC_Set_INT1_DRDY(&MovementDetector, ENABLE);    /* Enable DRDY */
 800081a:	2101      	movs	r1, #1
 800081c:	4815      	ldr	r0, [pc, #84]	@ (8000874 <MEMS_Init+0xb4>)
 800081e:	f000 fe18 	bl	8001452 <LSM6DSL_ACC_Set_INT1_DRDY>
  LSM6DSL_ACC_GetAxesRaw(&MovementDetector, &axes_raw);        /* Clear DRDY */
 8000822:	463b      	mov	r3, r7
 8000824:	4619      	mov	r1, r3
 8000826:	4813      	ldr	r0, [pc, #76]	@ (8000874 <MEMS_Init+0xb4>)
 8000828:	f000 fd0e 	bl	8001248 <LSM6DSL_ACC_GetAxesRaw>

  /* Configure the LSM6DSL Gyroscope (ODR, scale and interrupt) */
  LSM6DSL_GYRO_SetOutputDataRate(&MovementDetector, 12.5f); /* 52 Hz */
 800082c:	eeb2 0a09 	vmov.f32	s0, #41	@ 0x41480000  12.5
 8000830:	4810      	ldr	r0, [pc, #64]	@ (8000874 <MEMS_Init+0xb4>)
 8000832:	f000 fd84 	bl	800133e <LSM6DSL_GYRO_SetOutputDataRate>
  LSM6DSL_GYRO_SetFullScale(&MovementDetector, 250);        /* [-250dps; 250dps] */
 8000836:	21fa      	movs	r1, #250	@ 0xfa
 8000838:	480e      	ldr	r0, [pc, #56]	@ (8000874 <MEMS_Init+0xb4>)
 800083a:	f000 fd9c 	bl	8001376 <LSM6DSL_GYRO_SetFullScale>
  LSM6DSL_GYRO_Set_INT1_DRDY(&MovementDetector, ENABLE);    /* Enable DRDY */
 800083e:	2101      	movs	r1, #1
 8000840:	480c      	ldr	r0, [pc, #48]	@ (8000874 <MEMS_Init+0xb4>)
 8000842:	f000 fe3a 	bl	80014ba <LSM6DSL_GYRO_Set_INT1_DRDY>
  LSM6DSL_GYRO_GetAxesRaw(&MovementDetector, &axes_raw);        /* Clear DRDY */
 8000846:	463b      	mov	r3, r7
 8000848:	4619      	mov	r1, r3
 800084a:	480a      	ldr	r0, [pc, #40]	@ (8000874 <MEMS_Init+0xb4>)
 800084c:	f000 fdc2 	bl	80013d4 <LSM6DSL_GYRO_GetAxesRaw>

  /* Start the LSM6DSL accelerometer */
  LSM6DSL_ACC_Enable(&MovementDetector);
 8000850:	4808      	ldr	r0, [pc, #32]	@ (8000874 <MEMS_Init+0xb4>)
 8000852:	f000 fc4a 	bl	80010ea <LSM6DSL_ACC_Enable>

  /* Start the LSM6DSL Gyroscope */
  //LSM6DSL_GYRO_Enable(&MovementDetector);

}
 8000856:	bf00      	nop
 8000858:	3728      	adds	r7, #40	@ 0x28
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	08000bf5 	.word	0x08000bf5
 8000864:	08000c71 	.word	0x08000c71
 8000868:	08000d25 	.word	0x08000d25
 800086c:	08000cc1 	.word	0x08000cc1
 8000870:	08000d89 	.word	0x08000d89
 8000874:	2000010c 	.word	0x2000010c
 8000878:	3fcccccd 	.word	0x3fcccccd

0800087c <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	80fb      	strh	r3, [r7, #6]

        if (GPIO_Pin == GPIO_PIN_11) {
 8000886:	88fb      	ldrh	r3, [r7, #6]
 8000888:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800088c:	d109      	bne.n	80008a2 <HAL_GPIO_EXTI_Callback+0x26>
            DrdyUpdate_1++;
 800088e:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <HAL_GPIO_EXTI_Callback+0x34>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	3301      	adds	r3, #1
 8000894:	4a06      	ldr	r2, [pc, #24]	@ (80008b0 <HAL_GPIO_EXTI_Callback+0x34>)
 8000896:	6013      	str	r3, [r2, #0]
            DrdyUpdate_2++;
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <HAL_GPIO_EXTI_Callback+0x38>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	3301      	adds	r3, #1
 800089e:	4a05      	ldr	r2, [pc, #20]	@ (80008b4 <HAL_GPIO_EXTI_Callback+0x38>)
 80008a0:	6013      	str	r3, [r2, #0]
        }

}
 80008a2:	bf00      	nop
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	20000144 	.word	0x20000144
 80008b4:	20000148 	.word	0x20000148

080008b8 <_write>:



int _write(int fd, char *ptr, int len)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
    while (HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_TX) {
 80008c4:	bf00      	nop
 80008c6:	4809      	ldr	r0, [pc, #36]	@ (80008ec <_write+0x34>)
 80008c8:	f004 fbc5 	bl	8005056 <HAL_UART_GetState>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b21      	cmp	r3, #33	@ 0x21
 80008d0:	d0f9      	beq.n	80008c6 <_write+0xe>
        // Wait for the previous transmission to complete
    }
    HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	b29a      	uxth	r2, r3
 80008d6:	f04f 33ff 	mov.w	r3, #4294967295
 80008da:	68b9      	ldr	r1, [r7, #8]
 80008dc:	4803      	ldr	r0, [pc, #12]	@ (80008ec <_write+0x34>)
 80008de:	f004 fb31 	bl	8004f44 <HAL_UART_Transmit>
    return len;
 80008e2:	687b      	ldr	r3, [r7, #4]
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000084 	.word	0x20000084

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <Error_Handler+0x8>

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000902:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <HAL_MspInit+0x44>)
 8000904:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000906:	4a0e      	ldr	r2, [pc, #56]	@ (8000940 <HAL_MspInit+0x44>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6613      	str	r3, [r2, #96]	@ 0x60
 800090e:	4b0c      	ldr	r3, [pc, #48]	@ (8000940 <HAL_MspInit+0x44>)
 8000910:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	4b09      	ldr	r3, [pc, #36]	@ (8000940 <HAL_MspInit+0x44>)
 800091c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800091e:	4a08      	ldr	r2, [pc, #32]	@ (8000940 <HAL_MspInit+0x44>)
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000924:	6593      	str	r3, [r2, #88]	@ 0x58
 8000926:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <HAL_MspInit+0x44>)
 8000928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800092a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40021000 	.word	0x40021000

08000944 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b0ac      	sub	sp, #176	@ 0xb0
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	2288      	movs	r2, #136	@ 0x88
 8000962:	2100      	movs	r1, #0
 8000964:	4618      	mov	r0, r3
 8000966:	f005 f976 	bl	8005c56 <memset>
  if(huart->Instance==USART1)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a21      	ldr	r2, [pc, #132]	@ (80009f4 <HAL_UART_MspInit+0xb0>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d13a      	bne.n	80009ea <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000974:	2301      	movs	r3, #1
 8000976:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000978:	2300      	movs	r3, #0
 800097a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4618      	mov	r0, r3
 8000982:	f003 fdd5 	bl	8004530 <HAL_RCCEx_PeriphCLKConfig>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800098c:	f7ff ffb0 	bl	80008f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000990:	4b19      	ldr	r3, [pc, #100]	@ (80009f8 <HAL_UART_MspInit+0xb4>)
 8000992:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000994:	4a18      	ldr	r2, [pc, #96]	@ (80009f8 <HAL_UART_MspInit+0xb4>)
 8000996:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800099a:	6613      	str	r3, [r2, #96]	@ 0x60
 800099c:	4b16      	ldr	r3, [pc, #88]	@ (80009f8 <HAL_UART_MspInit+0xb4>)
 800099e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a8:	4b13      	ldr	r3, [pc, #76]	@ (80009f8 <HAL_UART_MspInit+0xb4>)
 80009aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ac:	4a12      	ldr	r2, [pc, #72]	@ (80009f8 <HAL_UART_MspInit+0xb4>)
 80009ae:	f043 0302 	orr.w	r3, r3, #2
 80009b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b4:	4b10      	ldr	r3, [pc, #64]	@ (80009f8 <HAL_UART_MspInit+0xb4>)
 80009b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b8:	f003 0302 	and.w	r3, r3, #2
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80009c0:	23c0      	movs	r3, #192	@ 0xc0
 80009c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d2:	2303      	movs	r3, #3
 80009d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009d8:	2307      	movs	r3, #7
 80009da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009de:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009e2:	4619      	mov	r1, r3
 80009e4:	4805      	ldr	r0, [pc, #20]	@ (80009fc <HAL_UART_MspInit+0xb8>)
 80009e6:	f001 fdf1 	bl	80025cc <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80009ea:	bf00      	nop
 80009ec:	37b0      	adds	r7, #176	@ 0xb0
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40013800 	.word	0x40013800
 80009f8:	40021000 	.word	0x40021000
 80009fc:	48000400 	.word	0x48000400

08000a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <NMI_Handler+0x4>

08000a08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <HardFault_Handler+0x4>

08000a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <MemManage_Handler+0x4>

08000a18 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <BusFault_Handler+0x4>

08000a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <UsageFault_Handler+0x4>

08000a28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr

08000a52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a56:	f001 fc63 	bl	8002320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8000a62:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000a66:	f002 f867 	bl	8002b38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b086      	sub	sp, #24
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	60f8      	str	r0, [r7, #12]
 8000a76:	60b9      	str	r1, [r7, #8]
 8000a78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
 8000a7e:	e00a      	b.n	8000a96 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a80:	f3af 8000 	nop.w
 8000a84:	4601      	mov	r1, r0
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	1c5a      	adds	r2, r3, #1
 8000a8a:	60ba      	str	r2, [r7, #8]
 8000a8c:	b2ca      	uxtb	r2, r1
 8000a8e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	3301      	adds	r3, #1
 8000a94:	617b      	str	r3, [r7, #20]
 8000a96:	697a      	ldr	r2, [r7, #20]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	dbf0      	blt.n	8000a80 <_read+0x12>
  }

  return len;
 8000a9e:	687b      	ldr	r3, [r7, #4]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3718      	adds	r7, #24
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ab0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ad0:	605a      	str	r2, [r3, #4]
  return 0;
 8000ad2:	2300      	movs	r3, #0
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <_isatty>:

int _isatty(int file)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ae8:	2301      	movs	r3, #1
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr

08000af6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000af6:	b480      	push	{r7}
 8000af8:	b085      	sub	sp, #20
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	60f8      	str	r0, [r7, #12]
 8000afe:	60b9      	str	r1, [r7, #8]
 8000b00:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b02:	2300      	movs	r3, #0
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3714      	adds	r7, #20
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b18:	4a14      	ldr	r2, [pc, #80]	@ (8000b6c <_sbrk+0x5c>)
 8000b1a:	4b15      	ldr	r3, [pc, #84]	@ (8000b70 <_sbrk+0x60>)
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b24:	4b13      	ldr	r3, [pc, #76]	@ (8000b74 <_sbrk+0x64>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d102      	bne.n	8000b32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b2c:	4b11      	ldr	r3, [pc, #68]	@ (8000b74 <_sbrk+0x64>)
 8000b2e:	4a12      	ldr	r2, [pc, #72]	@ (8000b78 <_sbrk+0x68>)
 8000b30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b32:	4b10      	ldr	r3, [pc, #64]	@ (8000b74 <_sbrk+0x64>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d207      	bcs.n	8000b50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b40:	f005 f8d8 	bl	8005cf4 <__errno>
 8000b44:	4603      	mov	r3, r0
 8000b46:	220c      	movs	r2, #12
 8000b48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4e:	e009      	b.n	8000b64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b50:	4b08      	ldr	r3, [pc, #32]	@ (8000b74 <_sbrk+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b56:	4b07      	ldr	r3, [pc, #28]	@ (8000b74 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a05      	ldr	r2, [pc, #20]	@ (8000b74 <_sbrk+0x64>)
 8000b60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b62:	68fb      	ldr	r3, [r7, #12]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20018000 	.word	0x20018000
 8000b70:	00000400 	.word	0x00000400
 8000b74:	2000014c 	.word	0x2000014c
 8000b78:	200002f8 	.word	0x200002f8

08000b7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b80:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <SystemInit+0x20>)
 8000b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b86:	4a05      	ldr	r2, [pc, #20]	@ (8000b9c <SystemInit+0x20>)
 8000b88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ba0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bd8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ba4:	f7ff ffea 	bl	8000b7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba8:	480c      	ldr	r0, [pc, #48]	@ (8000bdc <LoopForever+0x6>)
  ldr r1, =_edata
 8000baa:	490d      	ldr	r1, [pc, #52]	@ (8000be0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bac:	4a0d      	ldr	r2, [pc, #52]	@ (8000be4 <LoopForever+0xe>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb0:	e002      	b.n	8000bb8 <LoopCopyDataInit>

08000bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb6:	3304      	adds	r3, #4

08000bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bbc:	d3f9      	bcc.n	8000bb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000be8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bc0:	4c0a      	ldr	r4, [pc, #40]	@ (8000bec <LoopForever+0x16>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc4:	e001      	b.n	8000bca <LoopFillZerobss>

08000bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc8:	3204      	adds	r2, #4

08000bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bcc:	d3fb      	bcc.n	8000bc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bce:	f005 f897 	bl	8005d00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bd2:	f7ff fcc5 	bl	8000560 <main>

08000bd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bd6:	e7fe      	b.n	8000bd6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bd8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000be4:	08006964 	.word	0x08006964
  ldr r2, =_sbss
 8000be8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000bec:	200002f8 	.word	0x200002f8

08000bf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bf0:	e7fe      	b.n	8000bf0 <ADC1_2_IRQHandler>
	...

08000bf4 <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 8000bfe:	4b19      	ldr	r3, [pc, #100]	@ (8000c64 <BSP_I2C2_Init+0x70>)
 8000c00:	4a19      	ldr	r2, [pc, #100]	@ (8000c68 <BSP_I2C2_Init+0x74>)
 8000c02:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 8000c04:	4b19      	ldr	r3, [pc, #100]	@ (8000c6c <BSP_I2C2_Init+0x78>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	1c5a      	adds	r2, r3, #1
 8000c0a:	4918      	ldr	r1, [pc, #96]	@ (8000c6c <BSP_I2C2_Init+0x78>)
 8000c0c:	600a      	str	r2, [r1, #0]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d122      	bne.n	8000c58 <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8000c12:	4814      	ldr	r0, [pc, #80]	@ (8000c64 <BSP_I2C2_Init+0x70>)
 8000c14:	f002 fab4 	bl	8003180 <HAL_I2C_GetState>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d11c      	bne.n	8000c58 <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 8000c1e:	4811      	ldr	r0, [pc, #68]	@ (8000c64 <BSP_I2C2_Init+0x70>)
 8000c20:	f000 f8fe 	bl	8000e20 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d116      	bne.n	8000c58 <BSP_I2C2_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 8000c2a:	480e      	ldr	r0, [pc, #56]	@ (8000c64 <BSP_I2C2_Init+0x70>)
 8000c2c:	f000 f8b4 	bl	8000d98 <MX_I2C2_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d003      	beq.n	8000c3e <BSP_I2C2_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000c36:	f06f 0307 	mvn.w	r3, #7
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	e00c      	b.n	8000c58 <BSP_I2C2_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4808      	ldr	r0, [pc, #32]	@ (8000c64 <BSP_I2C2_Init+0x70>)
 8000c42:	f002 fd79 	bl	8003738 <HAL_I2CEx_ConfigAnalogFilter>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d003      	beq.n	8000c54 <BSP_I2C2_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000c4c:	f06f 0307 	mvn.w	r3, #7
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	e001      	b.n	8000c58 <BSP_I2C2_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000c58:	687b      	ldr	r3, [r7, #4]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000150 	.word	0x20000150
 8000c68:	40005800 	.word	0x40005800
 8000c6c:	200001a4 	.word	0x200001a4

08000c70 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000c76:	2300      	movs	r3, #0
 8000c78:	607b      	str	r3, [r7, #4]

  if (I2C2InitCounter > 0)
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb8 <BSP_I2C2_DeInit+0x48>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d014      	beq.n	8000cac <BSP_I2C2_DeInit+0x3c>
  {
    if (--I2C2InitCounter == 0)
 8000c82:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb8 <BSP_I2C2_DeInit+0x48>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	4a0b      	ldr	r2, [pc, #44]	@ (8000cb8 <BSP_I2C2_DeInit+0x48>)
 8000c8a:	6013      	str	r3, [r2, #0]
 8000c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb8 <BSP_I2C2_DeInit+0x48>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d10b      	bne.n	8000cac <BSP_I2C2_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C2_MspDeInit(&hi2c2);
 8000c94:	4809      	ldr	r0, [pc, #36]	@ (8000cbc <BSP_I2C2_DeInit+0x4c>)
 8000c96:	f000 f923 	bl	8000ee0 <I2C2_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c2) != HAL_OK)
 8000c9a:	4808      	ldr	r0, [pc, #32]	@ (8000cbc <BSP_I2C2_DeInit+0x4c>)
 8000c9c:	f001 ffff 	bl	8002c9e <HAL_I2C_DeInit>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d002      	beq.n	8000cac <BSP_I2C2_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000ca6:	f06f 0307 	mvn.w	r3, #7
 8000caa:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000cac:	687b      	ldr	r3, [r7, #4]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	200001a4 	.word	0x200001a4
 8000cbc:	20000150 	.word	0x20000150

08000cc0 <BSP_I2C2_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	@ 0x28
 8000cc4:	af04      	add	r7, sp, #16
 8000cc6:	60ba      	str	r2, [r7, #8]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4603      	mov	r3, r0
 8000ccc:	81fb      	strh	r3, [r7, #14]
 8000cce:	460b      	mov	r3, r1
 8000cd0:	81bb      	strh	r3, [r7, #12]
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c2, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8000cda:	89ba      	ldrh	r2, [r7, #12]
 8000cdc:	89f9      	ldrh	r1, [r7, #14]
 8000cde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ce2:	9302      	str	r3, [sp, #8]
 8000ce4:	88fb      	ldrh	r3, [r7, #6]
 8000ce6:	9301      	str	r3, [sp, #4]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	9300      	str	r3, [sp, #0]
 8000cec:	2301      	movs	r3, #1
 8000cee:	480c      	ldr	r0, [pc, #48]	@ (8000d20 <BSP_I2C2_WriteReg+0x60>)
 8000cf0:	f002 f818 	bl	8002d24 <HAL_I2C_Mem_Write>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d00c      	beq.n	8000d14 <BSP_I2C2_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8000cfa:	4809      	ldr	r0, [pc, #36]	@ (8000d20 <BSP_I2C2_WriteReg+0x60>)
 8000cfc:	f002 fa4e 	bl	800319c <HAL_I2C_GetError>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b04      	cmp	r3, #4
 8000d04:	d103      	bne.n	8000d0e <BSP_I2C2_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000d06:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8000d0a:	617b      	str	r3, [r7, #20]
 8000d0c:	e002      	b.n	8000d14 <BSP_I2C2_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000d0e:	f06f 0303 	mvn.w	r3, #3
 8000d12:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000d14:	697b      	ldr	r3, [r7, #20]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000150 	.word	0x20000150

08000d24 <BSP_I2C2_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	@ 0x28
 8000d28:	af04      	add	r7, sp, #16
 8000d2a:	60ba      	str	r2, [r7, #8]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4603      	mov	r3, r0
 8000d30:	81fb      	strh	r3, [r7, #14]
 8000d32:	460b      	mov	r3, r1
 8000d34:	81bb      	strh	r3, [r7, #12]
 8000d36:	4613      	mov	r3, r2
 8000d38:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8000d3e:	89ba      	ldrh	r2, [r7, #12]
 8000d40:	89f9      	ldrh	r1, [r7, #14]
 8000d42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d46:	9302      	str	r3, [sp, #8]
 8000d48:	88fb      	ldrh	r3, [r7, #6]
 8000d4a:	9301      	str	r3, [sp, #4]
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	9300      	str	r3, [sp, #0]
 8000d50:	2301      	movs	r3, #1
 8000d52:	480c      	ldr	r0, [pc, #48]	@ (8000d84 <BSP_I2C2_ReadReg+0x60>)
 8000d54:	f002 f8fa 	bl	8002f4c <HAL_I2C_Mem_Read>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d00c      	beq.n	8000d78 <BSP_I2C2_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8000d5e:	4809      	ldr	r0, [pc, #36]	@ (8000d84 <BSP_I2C2_ReadReg+0x60>)
 8000d60:	f002 fa1c 	bl	800319c <HAL_I2C_GetError>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b04      	cmp	r3, #4
 8000d68:	d103      	bne.n	8000d72 <BSP_I2C2_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000d6a:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8000d6e:	617b      	str	r3, [r7, #20]
 8000d70:	e002      	b.n	8000d78 <BSP_I2C2_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000d72:	f06f 0303 	mvn.w	r3, #3
 8000d76:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000d78:	697b      	ldr	r3, [r7, #20]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000150 	.word	0x20000150

08000d88 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000d8c:	f001 fadc 	bl	8002348 <HAL_GetTick>
 8000d90:	4603      	mov	r3, r0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <MX_I2C2_Init>:

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000da0:	2300      	movs	r3, #0
 8000da2:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C2;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a1c      	ldr	r2, [pc, #112]	@ (8000e18 <MX_I2C2_Init+0x80>)
 8000da8:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00F12981;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a1b      	ldr	r2, [pc, #108]	@ (8000e1c <MX_I2C2_Init+0x84>)
 8000dae:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2201      	movs	r2, #1
 8000dba:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f001 fec4 	bl	8002b68 <HAL_I2C_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dea:	2100      	movs	r1, #0
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f002 fca3 	bl	8003738 <HAL_I2CEx_ConfigAnalogFilter>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f002 fce5 	bl	80037ce <HAL_I2CEx_ConfigDigitalFilter>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40005800 	.word	0x40005800
 8000e1c:	00f12981 	.word	0x00f12981

08000e20 <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b0ac      	sub	sp, #176	@ 0xb0
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	2288      	movs	r2, #136	@ 0x88
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4618      	mov	r0, r3
 8000e32:	f004 ff10 	bl	8005c56 <memset>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e36:	2380      	movs	r3, #128	@ 0x80
 8000e38:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	66bb      	str	r3, [r7, #104]	@ 0x68
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4618      	mov	r0, r3
 8000e44:	f003 fb74 	bl	8004530 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e48:	4b23      	ldr	r3, [pc, #140]	@ (8000ed8 <I2C2_MspInit+0xb8>)
 8000e4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e4c:	4a22      	ldr	r2, [pc, #136]	@ (8000ed8 <I2C2_MspInit+0xb8>)
 8000e4e:	f043 0302 	orr.w	r3, r3, #2
 8000e52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e54:	4b20      	ldr	r3, [pc, #128]	@ (8000ed8 <I2C2_MspInit+0xb8>)
 8000e56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e58:	f003 0302 	and.w	r3, r3, #2
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 8000e60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e68:	2312      	movs	r3, #18
 8000e6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e74:	2303      	movs	r3, #3
 8000e76:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000e80:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e84:	4619      	mov	r1, r3
 8000e86:	4815      	ldr	r0, [pc, #84]	@ (8000edc <I2C2_MspInit+0xbc>)
 8000e88:	f001 fba0 	bl	80025cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 8000e8c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e94:	2312      	movs	r3, #18
 8000e96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8000ea6:	2304      	movs	r3, #4
 8000ea8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000eac:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	480a      	ldr	r0, [pc, #40]	@ (8000edc <I2C2_MspInit+0xbc>)
 8000eb4:	f001 fb8a 	bl	80025cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000eb8:	4b07      	ldr	r3, [pc, #28]	@ (8000ed8 <I2C2_MspInit+0xb8>)
 8000eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ebc:	4a06      	ldr	r2, [pc, #24]	@ (8000ed8 <I2C2_MspInit+0xb8>)
 8000ebe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ec2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ec4:	4b04      	ldr	r3, [pc, #16]	@ (8000ed8 <I2C2_MspInit+0xb8>)
 8000ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ec8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	37b0      	adds	r7, #176	@ 0xb0
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	48000400 	.word	0x48000400

08000ee0 <I2C2_MspDeInit>:

static void I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8000ee8:	4b09      	ldr	r3, [pc, #36]	@ (8000f10 <I2C2_MspDeInit+0x30>)
 8000eea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eec:	4a08      	ldr	r2, [pc, #32]	@ (8000f10 <I2C2_MspDeInit+0x30>)
 8000eee:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000ef2:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_GPIO_PIN);
 8000ef4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ef8:	4806      	ldr	r0, [pc, #24]	@ (8000f14 <I2C2_MspDeInit+0x34>)
 8000efa:	f001 fd11 	bl	8002920 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 8000efe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f02:	4804      	ldr	r0, [pc, #16]	@ (8000f14 <I2C2_MspDeInit+0x34>)
 8000f04:	f001 fd0c 	bl	8002920 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40021000 	.word	0x40021000
 8000f14:	48000400 	.word	0x48000400

08000f18 <LSM6DSL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d103      	bne.n	8000f34 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8000f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	e051      	b.n	8000fd8 <LSM6DSL_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685a      	ldr	r2, [r3, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	689a      	ldr	r2, [r3, #8]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	7b1a      	ldrb	r2, [r3, #12]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	691a      	ldr	r2, [r3, #16]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	695a      	ldr	r2, [r3, #20]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	699a      	ldr	r2, [r3, #24]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a1d      	ldr	r2, [pc, #116]	@ (8000fe4 <LSM6DSL_RegisterBusIO+0xcc>)
 8000f70:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a1c      	ldr	r2, [pc, #112]	@ (8000fe8 <LSM6DSL_RegisterBusIO+0xd0>)
 8000f76:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	69da      	ldr	r2, [r3, #28]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d103      	bne.n	8000f96 <LSM6DSL_RegisterBusIO+0x7e>
    {
      ret = LSM6DSL_ERROR;
 8000f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	e020      	b.n	8000fd8 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4798      	blx	r3
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <LSM6DSL_RegisterBusIO+0x92>
    {
      ret = LSM6DSL_ERROR;
 8000fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	e016      	b.n	8000fd8 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d112      	bne.n	8000fd8 <LSM6DSL_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d10d      	bne.n	8000fd8 <LSM6DSL_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8000fbc:	230c      	movs	r3, #12
 8000fbe:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8000fc0:	7afb      	ldrb	r3, [r7, #11]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	2112      	movs	r1, #18
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f000 fa28 	bl	800141c <LSM6DSL_Write_Reg>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d002      	beq.n	8000fd8 <LSM6DSL_RegisterBusIO+0xc0>
          {
            ret = LSM6DSL_ERROR;
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd6:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	0800195d 	.word	0x0800195d
 8000fe8:	08001993 	.word	0x08001993

08000fec <LSM6DSL_Init>:
  * @brief  Initialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3320      	adds	r3, #32
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 feb7 	bl	8001d6e <lsm6dsl_auto_increment_set>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d002      	beq.n	800100c <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8001006:	f04f 33ff 	mov.w	r3, #4294967295
 800100a:	e054      	b.n	80010b6 <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3320      	adds	r3, #32
 8001010:	2101      	movs	r1, #1
 8001012:	4618      	mov	r0, r3
 8001014:	f000 fde4 	bl	8001be0 <lsm6dsl_block_data_update_set>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d002      	beq.n	8001024 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 800101e:	f04f 33ff 	mov.w	r3, #4294967295
 8001022:	e048      	b.n	80010b6 <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3320      	adds	r3, #32
 8001028:	2100      	movs	r1, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f001 f8fe 	bl	800222c <lsm6dsl_fifo_mode_set>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d002      	beq.n	800103c <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8001036:	f04f 33ff 	mov.w	r3, #4294967295
 800103a:	e03c      	b.n	80010b6 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2204      	movs	r2, #4
 8001040:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3320      	adds	r3, #32
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f000 fd56 	bl	8001afc <lsm6dsl_xl_data_rate_set>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d002      	beq.n	800105c <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8001056:	f04f 33ff 	mov.w	r3, #4294967295
 800105a:	e02c      	b.n	80010b6 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3320      	adds	r3, #32
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f000 fcec 	bl	8001a40 <lsm6dsl_xl_full_scale_set>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d002      	beq.n	8001074 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 800106e:	f04f 33ff 	mov.w	r3, #4294967295
 8001072:	e020      	b.n	80010b6 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2204      	movs	r2, #4
 8001078:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3320      	adds	r3, #32
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f000 fd86 	bl	8001b94 <lsm6dsl_gy_data_rate_set>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d002      	beq.n	8001094 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 800108e:	f04f 33ff 	mov.w	r3, #4294967295
 8001092:	e010      	b.n	80010b6 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3320      	adds	r3, #32
 8001098:	2106      	movs	r1, #6
 800109a:	4618      	mov	r0, r3
 800109c:	f000 fd54 	bl	8001b48 <lsm6dsl_gy_full_scale_set>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d002      	beq.n	80010ac <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295
 80010aa:	e004      	b.n	80010b6 <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2201      	movs	r2, #1
 80010b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSL_OK;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <LSM6DSL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
 80010c6:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3320      	adds	r3, #32
 80010cc:	6839      	ldr	r1, [r7, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 fe3c 	bl	8001d4c <lsm6dsl_device_id_get>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d002      	beq.n	80010e0 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 80010da:	f04f 33ff 	mov.w	r3, #4294967295
 80010de:	e000      	b.n	80010e2 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <LSM6DSL_ACC_Enable>:
  * @brief  Enable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d101      	bne.n	8001100 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 80010fc:	2300      	movs	r3, #0
 80010fe:	e014      	b.n	800112a <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f103 0220 	add.w	r2, r3, #32
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800110c:	4619      	mov	r1, r3
 800110e:	4610      	mov	r0, r2
 8001110:	f000 fcf4 	bl	8001afc <lsm6dsl_xl_data_rate_set>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d002      	beq.n	8001120 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 800111a:	f04f 33ff 	mov.w	r3, #4294967295
 800111e:	e004      	b.n	800112a <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2201      	movs	r2, #1
 8001124:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSL_OK;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <LSM6DSL_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	3320      	adds	r3, #32
 8001146:	f107 020b 	add.w	r2, r7, #11
 800114a:	4611      	mov	r1, r2
 800114c:	4618      	mov	r0, r3
 800114e:	f000 fc9d 	bl	8001a8c <lsm6dsl_xl_full_scale_get>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d002      	beq.n	800115e <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8001158:	f04f 33ff 	mov.w	r3, #4294967295
 800115c:	e023      	b.n	80011a6 <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 800115e:	7afb      	ldrb	r3, [r7, #11]
 8001160:	2b03      	cmp	r3, #3
 8001162:	d81b      	bhi.n	800119c <LSM6DSL_ACC_GetSensitivity+0x68>
 8001164:	a201      	add	r2, pc, #4	@ (adr r2, 800116c <LSM6DSL_ACC_GetSensitivity+0x38>)
 8001166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800116a:	bf00      	nop
 800116c:	0800117d 	.word	0x0800117d
 8001170:	08001195 	.word	0x08001195
 8001174:	08001185 	.word	0x08001185
 8001178:	0800118d 	.word	0x0800118d
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	4a0c      	ldr	r2, [pc, #48]	@ (80011b0 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8001180:	601a      	str	r2, [r3, #0]
      break;
 8001182:	e00f      	b.n	80011a4 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	4a0b      	ldr	r2, [pc, #44]	@ (80011b4 <LSM6DSL_ACC_GetSensitivity+0x80>)
 8001188:	601a      	str	r2, [r3, #0]
      break;
 800118a:	e00b      	b.n	80011a4 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	4a0a      	ldr	r2, [pc, #40]	@ (80011b8 <LSM6DSL_ACC_GetSensitivity+0x84>)
 8001190:	601a      	str	r2, [r3, #0]
      break;
 8001192:	e007      	b.n	80011a4 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	4a09      	ldr	r2, [pc, #36]	@ (80011bc <LSM6DSL_ACC_GetSensitivity+0x88>)
 8001198:	601a      	str	r2, [r3, #0]
      break;
 800119a:	e003      	b.n	80011a4 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 800119c:	f04f 33ff 	mov.w	r3, #4294967295
 80011a0:	60fb      	str	r3, [r7, #12]
      break;
 80011a2:	bf00      	nop
  }

  return ret;
 80011a4:	68fb      	ldr	r3, [r7, #12]
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	3d79db23 	.word	0x3d79db23
 80011b4:	3df9db23 	.word	0x3df9db23
 80011b8:	3e79db23 	.word	0x3e79db23
 80011bc:	3ef9db23 	.word	0x3ef9db23

080011c0 <LSM6DSL_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d106      	bne.n	80011e4 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80011d6:	ed97 0a00 	vldr	s0, [r7]
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f000 f9a2 	bl	8001524 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 80011e0:	4603      	mov	r3, r0
 80011e2:	e005      	b.n	80011f0 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80011e4:	ed97 0a00 	vldr	s0, [r7]
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f000 fa27 	bl	800163c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 80011ee:	4603      	mov	r3, r0
  }
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <LSM6DSL_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	2b02      	cmp	r3, #2
 8001206:	dd0b      	ble.n	8001220 <LSM6DSL_ACC_SetFullScale+0x28>
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	2b04      	cmp	r3, #4
 800120c:	dd06      	ble.n	800121c <LSM6DSL_ACC_SetFullScale+0x24>
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	2b08      	cmp	r3, #8
 8001212:	dc01      	bgt.n	8001218 <LSM6DSL_ACC_SetFullScale+0x20>
 8001214:	2303      	movs	r3, #3
 8001216:	e004      	b.n	8001222 <LSM6DSL_ACC_SetFullScale+0x2a>
 8001218:	2301      	movs	r3, #1
 800121a:	e002      	b.n	8001222 <LSM6DSL_ACC_SetFullScale+0x2a>
 800121c:	2302      	movs	r3, #2
 800121e:	e000      	b.n	8001222 <LSM6DSL_ACC_SetFullScale+0x2a>
 8001220:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 8001222:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3320      	adds	r3, #32
 8001228:	7bfa      	ldrb	r2, [r7, #15]
 800122a:	4611      	mov	r1, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f000 fc07 	bl	8001a40 <lsm6dsl_xl_full_scale_set>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d002      	beq.n	800123e <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8001238:	f04f 33ff 	mov.w	r3, #4294967295
 800123c:	e000      	b.n	8001240 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <LSM6DSL_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3320      	adds	r3, #32
 8001256:	f107 0208 	add.w	r2, r7, #8
 800125a:	4611      	mov	r1, r2
 800125c:	4618      	mov	r0, r3
 800125e:	f000 fd2d 	bl	8001cbc <lsm6dsl_acceleration_raw_get>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d002      	beq.n	800126e <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8001268:	f04f 33ff 	mov.w	r3, #4294967295
 800126c:	e00c      	b.n	8001288 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800126e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8001276:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800127e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <LSM6DSL_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 800129a:	f04f 0300 	mov.w	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3320      	adds	r3, #32
 80012a4:	f107 0210 	add.w	r2, r7, #16
 80012a8:	4611      	mov	r1, r2
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 fd06 	bl	8001cbc <lsm6dsl_acceleration_raw_get>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d002      	beq.n	80012bc <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 80012b6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ba:	e03c      	b.n	8001336 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 80012bc:	f107 030c 	add.w	r3, r7, #12
 80012c0:	4619      	mov	r1, r3
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff ff36 	bl	8001134 <LSM6DSL_ACC_GetSensitivity>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d002      	beq.n	80012d4 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295
 80012d2:	e030      	b.n	8001336 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80012d4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80012d8:	ee07 3a90 	vmov	s15, r3
 80012dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ec:	ee17 2a90 	vmov	r2, s15
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80012f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012f8:	ee07 3a90 	vmov	s15, r3
 80012fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001300:	edd7 7a03 	vldr	s15, [r7, #12]
 8001304:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001308:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800130c:	ee17 2a90 	vmov	r2, s15
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8001314:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001318:	ee07 3a90 	vmov	s15, r3
 800131c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001320:	edd7 7a03 	vldr	s15, [r7, #12]
 8001324:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001328:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800132c:	ee17 2a90 	vmov	r2, s15
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <LSM6DSL_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001350:	2b01      	cmp	r3, #1
 8001352:	d106      	bne.n	8001362 <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8001354:	ed97 0a00 	vldr	s0, [r7]
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f000 f9f1 	bl	8001740 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 800135e:	4603      	mov	r3, r0
 8001360:	e005      	b.n	800136e <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8001362:	ed97 0a00 	vldr	s0, [r7]
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f000 fa76 	bl	8001858 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 800136c:	4603      	mov	r3, r0
  }
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <LSM6DSL_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b084      	sub	sp, #16
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
 800137e:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	2b7d      	cmp	r3, #125	@ 0x7d
 8001384:	dd12      	ble.n	80013ac <LSM6DSL_GYRO_SetFullScale+0x36>
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	2bfa      	cmp	r3, #250	@ 0xfa
 800138a:	dd0d      	ble.n	80013a8 <LSM6DSL_GYRO_SetFullScale+0x32>
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001392:	dd07      	ble.n	80013a4 <LSM6DSL_GYRO_SetFullScale+0x2e>
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800139a:	dc01      	bgt.n	80013a0 <LSM6DSL_GYRO_SetFullScale+0x2a>
 800139c:	2304      	movs	r3, #4
 800139e:	e006      	b.n	80013ae <LSM6DSL_GYRO_SetFullScale+0x38>
 80013a0:	2306      	movs	r3, #6
 80013a2:	e004      	b.n	80013ae <LSM6DSL_GYRO_SetFullScale+0x38>
 80013a4:	2302      	movs	r3, #2
 80013a6:	e002      	b.n	80013ae <LSM6DSL_GYRO_SetFullScale+0x38>
 80013a8:	2300      	movs	r3, #0
 80013aa:	e000      	b.n	80013ae <LSM6DSL_GYRO_SetFullScale+0x38>
 80013ac:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 80013ae:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3320      	adds	r3, #32
 80013b4:	7bfa      	ldrb	r2, [r7, #15]
 80013b6:	4611      	mov	r1, r2
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 fbc5 	bl	8001b48 <lsm6dsl_gy_full_scale_set>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d002      	beq.n	80013ca <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 80013c4:	f04f 33ff 	mov.w	r3, #4294967295
 80013c8:	e000      	b.n	80013cc <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <LSM6DSL_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3320      	adds	r3, #32
 80013e2:	f107 0208 	add.w	r2, r7, #8
 80013e6:	4611      	mov	r1, r2
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 fc1f 	bl	8001c2c <lsm6dsl_angular_rate_raw_get>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d002      	beq.n	80013fa <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 80013f4:	f04f 33ff 	mov.w	r3, #4294967295
 80013f8:	e00c      	b.n	8001414 <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80013fa:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8001402:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800140a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <LSM6DSL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	460b      	mov	r3, r1
 8001426:	70fb      	strb	r3, [r7, #3]
 8001428:	4613      	mov	r3, r2
 800142a:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f103 0020 	add.w	r0, r3, #32
 8001432:	1cba      	adds	r2, r7, #2
 8001434:	78f9      	ldrb	r1, [r7, #3]
 8001436:	2301      	movs	r3, #1
 8001438:	f000 fae4 	bl	8001a04 <lsm6dsl_write_reg>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d002      	beq.n	8001448 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
 8001446:	e000      	b.n	800144a <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <LSM6DSL_ACC_Set_INT1_DRDY>:
  * @param  pObj the device pObj
  * @param  Val the value of int1_drdy_xl in reg INT1_CTRL
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Set_INT1_DRDY(LSM6DSL_Object_t *pObj, uint8_t Val)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b084      	sub	sp, #16
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
 800145a:	460b      	mov	r3, r1
 800145c:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_int1_route_t reg;

  if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &reg) != LSM6DSL_OK)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	3320      	adds	r3, #32
 8001462:	f107 020c 	add.w	r2, r7, #12
 8001466:	4611      	mov	r1, r2
 8001468:	4618      	mov	r0, r3
 800146a:	f000 fe09 	bl	8002080 <lsm6dsl_pin_int1_route_get>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d002      	beq.n	800147a <LSM6DSL_ACC_Set_INT1_DRDY+0x28>
  {
    return LSM6DSL_ERROR;
 8001474:	f04f 33ff 	mov.w	r3, #4294967295
 8001478:	e01b      	b.n	80014b2 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  if (Val <= 1)
 800147a:	78fb      	ldrb	r3, [r7, #3]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d811      	bhi.n	80014a4 <LSM6DSL_ACC_Set_INT1_DRDY+0x52>
  {
    reg.int1_drdy_xl = Val;
 8001480:	78fb      	ldrb	r3, [r7, #3]
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	b2da      	uxtb	r2, r3
 8001488:	7b3b      	ldrb	r3, [r7, #12]
 800148a:	f362 0300 	bfi	r3, r2, #0, #1
 800148e:	733b      	strb	r3, [r7, #12]
  else
  {
    return LSM6DSL_ERROR;
  }

  if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), reg) != LSM6DSL_OK)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3320      	adds	r3, #32
 8001494:	68f9      	ldr	r1, [r7, #12]
 8001496:	4618      	mov	r0, r3
 8001498:	f000 fc8f 	bl	8001dba <lsm6dsl_pin_int1_route_set>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d006      	beq.n	80014b0 <LSM6DSL_ACC_Set_INT1_DRDY+0x5e>
 80014a2:	e002      	b.n	80014aa <LSM6DSL_ACC_Set_INT1_DRDY+0x58>
    return LSM6DSL_ERROR;
 80014a4:	f04f 33ff 	mov.w	r3, #4294967295
 80014a8:	e003      	b.n	80014b2 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  {
    return LSM6DSL_ERROR;
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295
 80014ae:	e000      	b.n	80014b2 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  return LSM6DSL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <LSM6DSL_GYRO_Set_INT1_DRDY>:
  * @param  pObj the device pObj
  * @param  Val the value of int1_drdy_g in reg INT1_CTRL
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_Set_INT1_DRDY(LSM6DSL_Object_t *pObj, uint8_t Val)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b084      	sub	sp, #16
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
 80014c2:	460b      	mov	r3, r1
 80014c4:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_int1_route_t reg;

  if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &reg) != LSM6DSL_OK)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	3320      	adds	r3, #32
 80014ca:	f107 020c 	add.w	r2, r7, #12
 80014ce:	4611      	mov	r1, r2
 80014d0:	4618      	mov	r0, r3
 80014d2:	f000 fdd5 	bl	8002080 <lsm6dsl_pin_int1_route_get>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d002      	beq.n	80014e2 <LSM6DSL_GYRO_Set_INT1_DRDY+0x28>
  {
    return LSM6DSL_ERROR;
 80014dc:	f04f 33ff 	mov.w	r3, #4294967295
 80014e0:	e01b      	b.n	800151a <LSM6DSL_GYRO_Set_INT1_DRDY+0x60>
  }

  if (Val <= 1)
 80014e2:	78fb      	ldrb	r3, [r7, #3]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d811      	bhi.n	800150c <LSM6DSL_GYRO_Set_INT1_DRDY+0x52>
  {
    reg.int1_drdy_g = Val;
 80014e8:	78fb      	ldrb	r3, [r7, #3]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	7b3b      	ldrb	r3, [r7, #12]
 80014f2:	f362 0341 	bfi	r3, r2, #1, #1
 80014f6:	733b      	strb	r3, [r7, #12]
  else
  {
    return LSM6DSL_ERROR;
  }

  if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), reg) != LSM6DSL_OK)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3320      	adds	r3, #32
 80014fc:	68f9      	ldr	r1, [r7, #12]
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 fc5b 	bl	8001dba <lsm6dsl_pin_int1_route_set>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d006      	beq.n	8001518 <LSM6DSL_GYRO_Set_INT1_DRDY+0x5e>
 800150a:	e002      	b.n	8001512 <LSM6DSL_GYRO_Set_INT1_DRDY+0x58>
    return LSM6DSL_ERROR;
 800150c:	f04f 33ff 	mov.w	r3, #4294967295
 8001510:	e003      	b.n	800151a <LSM6DSL_GYRO_Set_INT1_DRDY+0x60>
  {
    return LSM6DSL_ERROR;
 8001512:	f04f 33ff 	mov.w	r3, #4294967295
 8001516:	e000      	b.n	800151a <LSM6DSL_GYRO_Set_INT1_DRDY+0x60>
  }

  return LSM6DSL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8001530:	edd7 7a00 	vldr	s15, [r7]
 8001534:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8001538:	eef4 7ac7 	vcmpe.f32	s15, s14
 800153c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001540:	d801      	bhi.n	8001546 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 8001542:	2301      	movs	r3, #1
 8001544:	e058      	b.n	80015f8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8001546:	edd7 7a00 	vldr	s15, [r7]
 800154a:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800154e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001556:	d801      	bhi.n	800155c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8001558:	2302      	movs	r3, #2
 800155a:	e04d      	b.n	80015f8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800155c:	edd7 7a00 	vldr	s15, [r7]
 8001560:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001620 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8001564:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156c:	d801      	bhi.n	8001572 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800156e:	2303      	movs	r3, #3
 8001570:	e042      	b.n	80015f8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8001572:	edd7 7a00 	vldr	s15, [r7]
 8001576:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001624 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 800157a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800157e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001582:	d801      	bhi.n	8001588 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8001584:	2304      	movs	r3, #4
 8001586:	e037      	b.n	80015f8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8001588:	edd7 7a00 	vldr	s15, [r7]
 800158c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001628 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8001590:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001598:	d801      	bhi.n	800159e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800159a:	2305      	movs	r3, #5
 800159c:	e02c      	b.n	80015f8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800159e:	edd7 7a00 	vldr	s15, [r7]
 80015a2:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800162c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 80015a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ae:	d801      	bhi.n	80015b4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 80015b0:	2306      	movs	r3, #6
 80015b2:	e021      	b.n	80015f8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80015b4:	edd7 7a00 	vldr	s15, [r7]
 80015b8:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001630 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 80015bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c4:	d801      	bhi.n	80015ca <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80015c6:	2307      	movs	r3, #7
 80015c8:	e016      	b.n	80015f8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80015ca:	edd7 7a00 	vldr	s15, [r7]
 80015ce:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001634 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 80015d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015da:	d801      	bhi.n	80015e0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80015dc:	2308      	movs	r3, #8
 80015de:	e00b      	b.n	80015f8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80015e0:	edd7 7a00 	vldr	s15, [r7]
 80015e4:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001638 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 80015e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f0:	d801      	bhi.n	80015f6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80015f2:	2309      	movs	r3, #9
 80015f4:	e000      	b.n	80015f8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80015f6:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 80015f8:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
            : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
            :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	3320      	adds	r3, #32
 80015fe:	7bfa      	ldrb	r2, [r7, #15]
 8001600:	4611      	mov	r1, r2
 8001602:	4618      	mov	r0, r3
 8001604:	f000 fa7a 	bl	8001afc <lsm6dsl_xl_data_rate_set>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d002      	beq.n	8001614 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 800160e:	f04f 33ff 	mov.w	r3, #4294967295
 8001612:	e000      	b.n	8001616 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	42500000 	.word	0x42500000
 8001624:	42d00000 	.word	0x42d00000
 8001628:	43500000 	.word	0x43500000
 800162c:	43d00000 	.word	0x43d00000
 8001630:	44504000 	.word	0x44504000
 8001634:	44cf8000 	.word	0x44cf8000
 8001638:	45502000 	.word	0x45502000

0800163c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                  : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8001648:	edd7 7a00 	vldr	s15, [r7]
 800164c:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8001650:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001658:	d801      	bhi.n	800165e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 800165a:	2301      	movs	r3, #1
 800165c:	e058      	b.n	8001710 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800165e:	edd7 7a00 	vldr	s15, [r7]
 8001662:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8001666:	eef4 7ac7 	vcmpe.f32	s15, s14
 800166a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166e:	d801      	bhi.n	8001674 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 8001670:	2302      	movs	r3, #2
 8001672:	e04d      	b.n	8001710 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001674:	edd7 7a00 	vldr	s15, [r7]
 8001678:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001724 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 800167c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001684:	d801      	bhi.n	800168a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8001686:	2303      	movs	r3, #3
 8001688:	e042      	b.n	8001710 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800168a:	edd7 7a00 	vldr	s15, [r7]
 800168e:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001728 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8001692:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800169a:	d801      	bhi.n	80016a0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 800169c:	2304      	movs	r3, #4
 800169e:	e037      	b.n	8001710 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80016a0:	edd7 7a00 	vldr	s15, [r7]
 80016a4:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800172c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 80016a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b0:	d801      	bhi.n	80016b6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80016b2:	2305      	movs	r3, #5
 80016b4:	e02c      	b.n	8001710 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80016b6:	edd7 7a00 	vldr	s15, [r7]
 80016ba:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001730 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 80016be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c6:	d801      	bhi.n	80016cc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 80016c8:	2306      	movs	r3, #6
 80016ca:	e021      	b.n	8001710 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80016cc:	edd7 7a00 	vldr	s15, [r7]
 80016d0:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001734 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 80016d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016dc:	d801      	bhi.n	80016e2 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80016de:	2307      	movs	r3, #7
 80016e0:	e016      	b.n	8001710 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80016e2:	edd7 7a00 	vldr	s15, [r7]
 80016e6:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001738 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 80016ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f2:	d801      	bhi.n	80016f8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80016f4:	2308      	movs	r3, #8
 80016f6:	e00b      	b.n	8001710 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80016f8:	edd7 7a00 	vldr	s15, [r7]
 80016fc:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800173c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8001700:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001708:	d801      	bhi.n	800170e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800170a:	2309      	movs	r3, #9
 800170c:	e000      	b.n	8001710 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800170e:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                  : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                  : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                  :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	42500000 	.word	0x42500000
 8001728:	42d00000 	.word	0x42d00000
 800172c:	43500000 	.word	0x43500000
 8001730:	43d00000 	.word	0x43d00000
 8001734:	44504000 	.word	0x44504000
 8001738:	44cf8000 	.word	0x44cf8000
 800173c:	45502000 	.word	0x45502000

08001740 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 800174c:	edd7 7a00 	vldr	s15, [r7]
 8001750:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8001754:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175c:	d801      	bhi.n	8001762 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 800175e:	2301      	movs	r3, #1
 8001760:	e058      	b.n	8001814 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8001762:	edd7 7a00 	vldr	s15, [r7]
 8001766:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800176a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800176e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001772:	d801      	bhi.n	8001778 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8001774:	2302      	movs	r3, #2
 8001776:	e04d      	b.n	8001814 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8001778:	edd7 7a00 	vldr	s15, [r7]
 800177c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800183c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8001780:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001788:	d801      	bhi.n	800178e <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 800178a:	2303      	movs	r3, #3
 800178c:	e042      	b.n	8001814 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800178e:	edd7 7a00 	vldr	s15, [r7]
 8001792:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001840 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8001796:	eef4 7ac7 	vcmpe.f32	s15, s14
 800179a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800179e:	d801      	bhi.n	80017a4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 80017a0:	2304      	movs	r3, #4
 80017a2:	e037      	b.n	8001814 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80017a4:	edd7 7a00 	vldr	s15, [r7]
 80017a8:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001844 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 80017ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b4:	d801      	bhi.n	80017ba <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 80017b6:	2305      	movs	r3, #5
 80017b8:	e02c      	b.n	8001814 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80017ba:	edd7 7a00 	vldr	s15, [r7]
 80017be:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001848 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 80017c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ca:	d801      	bhi.n	80017d0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 80017cc:	2306      	movs	r3, #6
 80017ce:	e021      	b.n	8001814 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80017d0:	edd7 7a00 	vldr	s15, [r7]
 80017d4:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800184c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 80017d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e0:	d801      	bhi.n	80017e6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 80017e2:	2307      	movs	r3, #7
 80017e4:	e016      	b.n	8001814 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80017e6:	edd7 7a00 	vldr	s15, [r7]
 80017ea:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001850 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 80017ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f6:	d801      	bhi.n	80017fc <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 80017f8:	2308      	movs	r3, #8
 80017fa:	e00b      	b.n	8001814 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80017fc:	edd7 7a00 	vldr	s15, [r7]
 8001800:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001854 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8001804:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180c:	d801      	bhi.n	8001812 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800180e:	2309      	movs	r3, #9
 8001810:	e000      	b.n	8001814 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8001812:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8001814:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
            : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
            :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	3320      	adds	r3, #32
 800181a:	7bfa      	ldrb	r2, [r7, #15]
 800181c:	4611      	mov	r1, r2
 800181e:	4618      	mov	r0, r3
 8001820:	f000 f9b8 	bl	8001b94 <lsm6dsl_gy_data_rate_set>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d002      	beq.n	8001830 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 800182a:	f04f 33ff 	mov.w	r3, #4294967295
 800182e:	e000      	b.n	8001832 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	42500000 	.word	0x42500000
 8001840:	42d00000 	.word	0x42d00000
 8001844:	43500000 	.word	0x43500000
 8001848:	43d00000 	.word	0x43d00000
 800184c:	44504000 	.word	0x44504000
 8001850:	44cf8000 	.word	0x44cf8000
 8001854:	45502000 	.word	0x45502000

08001858 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8001864:	edd7 7a00 	vldr	s15, [r7]
 8001868:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800186c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001874:	d801      	bhi.n	800187a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8001876:	2301      	movs	r3, #1
 8001878:	e058      	b.n	800192c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800187a:	edd7 7a00 	vldr	s15, [r7]
 800187e:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8001882:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800188a:	d801      	bhi.n	8001890 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 800188c:	2302      	movs	r3, #2
 800188e:	e04d      	b.n	800192c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8001890:	edd7 7a00 	vldr	s15, [r7]
 8001894:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001940 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8001898:	eef4 7ac7 	vcmpe.f32	s15, s14
 800189c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a0:	d801      	bhi.n	80018a6 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80018a2:	2303      	movs	r3, #3
 80018a4:	e042      	b.n	800192c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80018a6:	edd7 7a00 	vldr	s15, [r7]
 80018aa:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001944 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 80018ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b6:	d801      	bhi.n	80018bc <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80018b8:	2304      	movs	r3, #4
 80018ba:	e037      	b.n	800192c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80018bc:	edd7 7a00 	vldr	s15, [r7]
 80018c0:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001948 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 80018c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018cc:	d801      	bhi.n	80018d2 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 80018ce:	2305      	movs	r3, #5
 80018d0:	e02c      	b.n	800192c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80018d2:	edd7 7a00 	vldr	s15, [r7]
 80018d6:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800194c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 80018da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e2:	d801      	bhi.n	80018e8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80018e4:	2306      	movs	r3, #6
 80018e6:	e021      	b.n	800192c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80018e8:	edd7 7a00 	vldr	s15, [r7]
 80018ec:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001950 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 80018f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f8:	d801      	bhi.n	80018fe <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80018fa:	2307      	movs	r3, #7
 80018fc:	e016      	b.n	800192c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80018fe:	edd7 7a00 	vldr	s15, [r7]
 8001902:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001954 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8001906:	eef4 7ac7 	vcmpe.f32	s15, s14
 800190a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190e:	d801      	bhi.n	8001914 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8001910:	2308      	movs	r3, #8
 8001912:	e00b      	b.n	800192c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8001914:	edd7 7a00 	vldr	s15, [r7]
 8001918:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001958 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 800191c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001924:	d801      	bhi.n	800192a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8001926:	2309      	movs	r3, #9
 8001928:	e000      	b.n	800192c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800192a:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                   : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                   : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                   :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	42500000 	.word	0x42500000
 8001944:	42d00000 	.word	0x42d00000
 8001948:	43500000 	.word	0x43500000
 800194c:	43d00000 	.word	0x43d00000
 8001950:	44504000 	.word	0x44504000
 8001954:	44cf8000 	.word	0x44cf8000
 8001958:	45502000 	.word	0x45502000

0800195c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800195c:	b590      	push	{r4, r7, lr}
 800195e:	b087      	sub	sp, #28
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	607a      	str	r2, [r7, #4]
 8001966:	461a      	mov	r2, r3
 8001968:	460b      	mov	r3, r1
 800196a:	72fb      	strb	r3, [r7, #11]
 800196c:	4613      	mov	r3, r2
 800196e:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	695c      	ldr	r4, [r3, #20]
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	7b1b      	ldrb	r3, [r3, #12]
 800197c:	4618      	mov	r0, r3
 800197e:	7afb      	ldrb	r3, [r7, #11]
 8001980:	b299      	uxth	r1, r3
 8001982:	893b      	ldrh	r3, [r7, #8]
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	47a0      	blx	r4
 8001988:	4603      	mov	r3, r0
}
 800198a:	4618      	mov	r0, r3
 800198c:	371c      	adds	r7, #28
 800198e:	46bd      	mov	sp, r7
 8001990:	bd90      	pop	{r4, r7, pc}

08001992 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001992:	b590      	push	{r4, r7, lr}
 8001994:	b087      	sub	sp, #28
 8001996:	af00      	add	r7, sp, #0
 8001998:	60f8      	str	r0, [r7, #12]
 800199a:	607a      	str	r2, [r7, #4]
 800199c:	461a      	mov	r2, r3
 800199e:	460b      	mov	r3, r1
 80019a0:	72fb      	strb	r3, [r7, #11]
 80019a2:	4613      	mov	r3, r2
 80019a4:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	691c      	ldr	r4, [r3, #16]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	7b1b      	ldrb	r3, [r3, #12]
 80019b2:	4618      	mov	r0, r3
 80019b4:	7afb      	ldrb	r3, [r7, #11]
 80019b6:	b299      	uxth	r1, r3
 80019b8:	893b      	ldrh	r3, [r7, #8]
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	47a0      	blx	r4
 80019be:	4603      	mov	r3, r0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	371c      	adds	r7, #28
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd90      	pop	{r4, r7, pc}

080019c8 <lsm6dsl_read_reg>:
  *
  */
int32_t __weak lsm6dsl_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80019c8:	b590      	push	{r4, r7, lr}
 80019ca:	b087      	sub	sp, #28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	607a      	str	r2, [r7, #4]
 80019d2:	461a      	mov	r2, r3
 80019d4:	460b      	mov	r3, r1
 80019d6:	72fb      	strb	r3, [r7, #11]
 80019d8:	4613      	mov	r3, r2
 80019da:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d102      	bne.n	80019e8 <lsm6dsl_read_reg+0x20>
  {
    return -1;
 80019e2:	f04f 33ff 	mov.w	r3, #4294967295
 80019e6:	e009      	b.n	80019fc <lsm6dsl_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	685c      	ldr	r4, [r3, #4]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	68d8      	ldr	r0, [r3, #12]
 80019f0:	893b      	ldrh	r3, [r7, #8]
 80019f2:	7af9      	ldrb	r1, [r7, #11]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	47a0      	blx	r4
 80019f8:	6178      	str	r0, [r7, #20]

  return ret;
 80019fa:	697b      	ldr	r3, [r7, #20]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	371c      	adds	r7, #28
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd90      	pop	{r4, r7, pc}

08001a04 <lsm6dsl_write_reg>:
  *
  */
int32_t __weak lsm6dsl_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8001a04:	b590      	push	{r4, r7, lr}
 8001a06:	b087      	sub	sp, #28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	607a      	str	r2, [r7, #4]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	460b      	mov	r3, r1
 8001a12:	72fb      	strb	r3, [r7, #11]
 8001a14:	4613      	mov	r3, r2
 8001a16:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d102      	bne.n	8001a24 <lsm6dsl_write_reg+0x20>
  {
    return -1;
 8001a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a22:	e009      	b.n	8001a38 <lsm6dsl_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681c      	ldr	r4, [r3, #0]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	68d8      	ldr	r0, [r3, #12]
 8001a2c:	893b      	ldrh	r3, [r7, #8]
 8001a2e:	7af9      	ldrb	r1, [r7, #11]
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	47a0      	blx	r4
 8001a34:	6178      	str	r0, [r7, #20]

  return ret;
 8001a36:	697b      	ldr	r3, [r7, #20]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	371c      	adds	r7, #28
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd90      	pop	{r4, r7, pc}

08001a40 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001a4c:	f107 0208 	add.w	r2, r7, #8
 8001a50:	2301      	movs	r3, #1
 8001a52:	2110      	movs	r1, #16
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7ff ffb7 	bl	80019c8 <lsm6dsl_read_reg>
 8001a5a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10f      	bne.n	8001a82 <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8001a62:	78fb      	ldrb	r3, [r7, #3]
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	7a3b      	ldrb	r3, [r7, #8]
 8001a6c:	f362 0383 	bfi	r3, r2, #2, #2
 8001a70:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001a72:	f107 0208 	add.w	r2, r7, #8
 8001a76:	2301      	movs	r3, #1
 8001a78:	2110      	movs	r1, #16
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff ffc2 	bl	8001a04 <lsm6dsl_write_reg>
 8001a80:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001a82:	68fb      	ldr	r3, [r7, #12]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(const stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001a96:	f107 0208 	add.w	r2, r7, #8
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	2110      	movs	r1, #16
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff ff92 	bl	80019c8 <lsm6dsl_read_reg>
 8001aa4:	60f8      	str	r0, [r7, #12]

  switch (ctrl1_xl.fs_xl)
 8001aa6:	7a3b      	ldrb	r3, [r7, #8]
 8001aa8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b03      	cmp	r3, #3
 8001ab0:	d81a      	bhi.n	8001ae8 <lsm6dsl_xl_full_scale_get+0x5c>
 8001ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8001ab8 <lsm6dsl_xl_full_scale_get+0x2c>)
 8001ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab8:	08001ac9 	.word	0x08001ac9
 8001abc:	08001ad1 	.word	0x08001ad1
 8001ac0:	08001ad9 	.word	0x08001ad9
 8001ac4:	08001ae1 	.word	0x08001ae1
  {
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
      break;
 8001ace:	e00f      	b.n	8001af0 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	701a      	strb	r2, [r3, #0]
      break;
 8001ad6:	e00b      	b.n	8001af0 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	2202      	movs	r2, #2
 8001adc:	701a      	strb	r2, [r3, #0]
      break;
 8001ade:	e007      	b.n	8001af0 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	2203      	movs	r2, #3
 8001ae4:	701a      	strb	r2, [r3, #0]
      break;
 8001ae6:	e003      	b.n	8001af0 <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	2204      	movs	r2, #4
 8001aec:	701a      	strb	r2, [r3, #0]
      break;
 8001aee:	bf00      	nop
  }

  return ret;
 8001af0:	68fb      	ldr	r3, [r7, #12]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop

08001afc <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001b08:	f107 0208 	add.w	r2, r7, #8
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	2110      	movs	r1, #16
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff ff59 	bl	80019c8 <lsm6dsl_read_reg>
 8001b16:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10f      	bne.n	8001b3e <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 8001b1e:	78fb      	ldrb	r3, [r7, #3]
 8001b20:	f003 030f 	and.w	r3, r3, #15
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	7a3b      	ldrb	r3, [r7, #8]
 8001b28:	f362 1307 	bfi	r3, r2, #4, #4
 8001b2c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001b2e:	f107 0208 	add.w	r2, r7, #8
 8001b32:	2301      	movs	r3, #1
 8001b34:	2110      	movs	r1, #16
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff ff64 	bl	8001a04 <lsm6dsl_write_reg>
 8001b3c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(const stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001b54:	f107 0208 	add.w	r2, r7, #8
 8001b58:	2301      	movs	r3, #1
 8001b5a:	2111      	movs	r1, #17
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff ff33 	bl	80019c8 <lsm6dsl_read_reg>
 8001b62:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10f      	bne.n	8001b8a <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8001b6a:	78fb      	ldrb	r3, [r7, #3]
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	7a3b      	ldrb	r3, [r7, #8]
 8001b74:	f362 0343 	bfi	r3, r2, #1, #3
 8001b78:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001b7a:	f107 0208 	add.w	r2, r7, #8
 8001b7e:	2301      	movs	r3, #1
 8001b80:	2111      	movs	r1, #17
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff ff3e 	bl	8001a04 <lsm6dsl_write_reg>
 8001b88:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(const stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001ba0:	f107 0208 	add.w	r2, r7, #8
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	2111      	movs	r1, #17
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff ff0d 	bl	80019c8 <lsm6dsl_read_reg>
 8001bae:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10f      	bne.n	8001bd6 <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 8001bb6:	78fb      	ldrb	r3, [r7, #3]
 8001bb8:	f003 030f 	and.w	r3, r3, #15
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	7a3b      	ldrb	r3, [r7, #8]
 8001bc0:	f362 1307 	bfi	r3, r2, #4, #4
 8001bc4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001bc6:	f107 0208 	add.w	r2, r7, #8
 8001bca:	2301      	movs	r3, #1
 8001bcc:	2111      	movs	r1, #17
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff ff18 	bl	8001a04 <lsm6dsl_write_reg>
 8001bd4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	460b      	mov	r3, r1
 8001bea:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001bec:	f107 0208 	add.w	r2, r7, #8
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	2112      	movs	r1, #18
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7ff fee7 	bl	80019c8 <lsm6dsl_read_reg>
 8001bfa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10f      	bne.n	8001c22 <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8001c02:	78fb      	ldrb	r3, [r7, #3]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	7a3b      	ldrb	r3, [r7, #8]
 8001c0c:	f362 1386 	bfi	r3, r2, #6, #1
 8001c10:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001c12:	f107 0208 	add.w	r2, r7, #8
 8001c16:	2301      	movs	r3, #1
 8001c18:	2112      	movs	r1, #18
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff fef2 	bl	8001a04 <lsm6dsl_write_reg>
 8001c20:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001c22:	68fb      	ldr	r3, [r7, #12]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8001c36:	f107 020c 	add.w	r2, r7, #12
 8001c3a:	2306      	movs	r3, #6
 8001c3c:	2122      	movs	r1, #34	@ 0x22
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff fec2 	bl	80019c8 <lsm6dsl_read_reg>
 8001c44:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001c46:	7b7b      	ldrb	r3, [r7, #13]
 8001c48:	b21a      	sxth	r2, r3
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	021b      	lsls	r3, r3, #8
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	7b3a      	ldrb	r2, [r7, #12]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	b21a      	sxth	r2, r3
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001c66:	7bfa      	ldrb	r2, [r7, #15]
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	3302      	adds	r3, #2
 8001c6c:	b212      	sxth	r2, r2
 8001c6e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	3302      	adds	r3, #2
 8001c74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	021b      	lsls	r3, r3, #8
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	7bba      	ldrb	r2, [r7, #14]
 8001c80:	4413      	add	r3, r2
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	3302      	adds	r3, #2
 8001c88:	b212      	sxth	r2, r2
 8001c8a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001c8c:	7c7a      	ldrb	r2, [r7, #17]
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	3304      	adds	r3, #4
 8001c92:	b212      	sxth	r2, r2
 8001c94:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	3304      	adds	r3, #4
 8001c9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	021b      	lsls	r3, r3, #8
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	7c3a      	ldrb	r2, [r7, #16]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	3304      	adds	r3, #4
 8001cae:	b212      	sxth	r2, r2
 8001cb0:	801a      	strh	r2, [r3, #0]

  return ret;
 8001cb2:	697b      	ldr	r3, [r7, #20]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3718      	adds	r7, #24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8001cc6:	f107 020c 	add.w	r2, r7, #12
 8001cca:	2306      	movs	r3, #6
 8001ccc:	2128      	movs	r1, #40	@ 0x28
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff fe7a 	bl	80019c8 <lsm6dsl_read_reg>
 8001cd4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001cd6:	7b7b      	ldrb	r3, [r7, #13]
 8001cd8:	b21a      	sxth	r2, r3
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	021b      	lsls	r3, r3, #8
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	7b3a      	ldrb	r2, [r7, #12]
 8001cec:	4413      	add	r3, r2
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	b21a      	sxth	r2, r3
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001cf6:	7bfa      	ldrb	r2, [r7, #15]
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	3302      	adds	r3, #2
 8001cfc:	b212      	sxth	r2, r2
 8001cfe:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	3302      	adds	r3, #2
 8001d04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	021b      	lsls	r3, r3, #8
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	7bba      	ldrb	r2, [r7, #14]
 8001d10:	4413      	add	r3, r2
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	3302      	adds	r3, #2
 8001d18:	b212      	sxth	r2, r2
 8001d1a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001d1c:	7c7a      	ldrb	r2, [r7, #17]
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	3304      	adds	r3, #4
 8001d22:	b212      	sxth	r2, r2
 8001d24:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	3304      	adds	r3, #4
 8001d2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	021b      	lsls	r3, r3, #8
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	7c3a      	ldrb	r2, [r7, #16]
 8001d36:	4413      	add	r3, r2
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	b212      	sxth	r2, r2
 8001d40:	801a      	strh	r2, [r3, #0]

  return ret;
 8001d42:	697b      	ldr	r3, [r7, #20]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8001d56:	2301      	movs	r3, #1
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	210f      	movs	r1, #15
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff fe33 	bl	80019c8 <lsm6dsl_read_reg>
 8001d62:	60f8      	str	r0, [r7, #12]

  return ret;
 8001d64:	68fb      	ldr	r3, [r7, #12]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b084      	sub	sp, #16
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
 8001d76:	460b      	mov	r3, r1
 8001d78:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001d7a:	f107 0208 	add.w	r2, r7, #8
 8001d7e:	2301      	movs	r3, #1
 8001d80:	2112      	movs	r1, #18
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff fe20 	bl	80019c8 <lsm6dsl_read_reg>
 8001d88:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d10f      	bne.n	8001db0 <lsm6dsl_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 8001d90:	78fb      	ldrb	r3, [r7, #3]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	7a3b      	ldrb	r3, [r7, #8]
 8001d9a:	f362 0382 	bfi	r3, r2, #2, #1
 8001d9e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001da0:	f107 0208 	add.w	r2, r7, #8
 8001da4:	2301      	movs	r3, #1
 8001da6:	2112      	movs	r1, #18
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f7ff fe2b 	bl	8001a04 <lsm6dsl_write_reg>
 8001dae:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001db0:	68fb      	ldr	r3, [r7, #12]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <lsm6dsl_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_set(const stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t val)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b08a      	sub	sp, #40	@ 0x28
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	6039      	str	r1, [r7, #0]
  lsm6dsl_md2_cfg_t md2_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8001dc4:	f107 021c 	add.w	r2, r7, #28
 8001dc8:	2301      	movs	r3, #1
 8001dca:	210d      	movs	r1, #13
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7ff fdfb 	bl	80019c8 <lsm6dsl_read_reg>
 8001dd2:	6278      	str	r0, [r7, #36]	@ 0x24

  if (ret == 0)
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d147      	bne.n	8001e6a <lsm6dsl_pin_int1_route_set+0xb0>
  {
    int1_ctrl.int1_drdy_xl        = val.int1_drdy_xl;
 8001dda:	783b      	ldrb	r3, [r7, #0]
 8001ddc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	7f3b      	ldrb	r3, [r7, #28]
 8001de4:	f362 0300 	bfi	r3, r2, #0, #1
 8001de8:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_drdy_g         = val.int1_drdy_g;
 8001dea:	783b      	ldrb	r3, [r7, #0]
 8001dec:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	7f3b      	ldrb	r3, [r7, #28]
 8001df4:	f362 0341 	bfi	r3, r2, #1, #1
 8001df8:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_boot           = val.int1_boot;
 8001dfa:	783b      	ldrb	r3, [r7, #0]
 8001dfc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	7f3b      	ldrb	r3, [r7, #28]
 8001e04:	f362 0382 	bfi	r3, r2, #2, #1
 8001e08:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fth            = val.int1_fth;
 8001e0a:	783b      	ldrb	r3, [r7, #0]
 8001e0c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	7f3b      	ldrb	r3, [r7, #28]
 8001e14:	f362 03c3 	bfi	r3, r2, #3, #1
 8001e18:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fifo_ovr       = val.int1_fifo_ovr;
 8001e1a:	783b      	ldrb	r3, [r7, #0]
 8001e1c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	7f3b      	ldrb	r3, [r7, #28]
 8001e24:	f362 1304 	bfi	r3, r2, #4, #1
 8001e28:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_full_flag      = val.int1_full_flag;
 8001e2a:	783b      	ldrb	r3, [r7, #0]
 8001e2c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	7f3b      	ldrb	r3, [r7, #28]
 8001e34:	f362 1345 	bfi	r3, r2, #5, #1
 8001e38:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_sign_mot       = val.int1_sign_mot;
 8001e3a:	783b      	ldrb	r3, [r7, #0]
 8001e3c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	7f3b      	ldrb	r3, [r7, #28]
 8001e44:	f362 1386 	bfi	r3, r2, #6, #1
 8001e48:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_step_detector  = val.int1_step_detector;
 8001e4a:	783b      	ldrb	r3, [r7, #0]
 8001e4c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	7f3b      	ldrb	r3, [r7, #28]
 8001e54:	f362 13c7 	bfi	r3, r2, #7, #1
 8001e58:	773b      	strb	r3, [r7, #28]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8001e5a:	f107 021c 	add.w	r2, r7, #28
 8001e5e:	2301      	movs	r3, #1
 8001e60:	210d      	movs	r1, #13
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff fdce 	bl	8001a04 <lsm6dsl_write_reg>
 8001e68:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d107      	bne.n	8001e80 <lsm6dsl_pin_int1_route_set+0xc6>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8001e70:	f107 0218 	add.w	r2, r7, #24
 8001e74:	2301      	movs	r3, #1
 8001e76:	215e      	movs	r1, #94	@ 0x5e
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff fda5 	bl	80019c8 <lsm6dsl_read_reg>
 8001e7e:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 8001e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d107      	bne.n	8001e96 <lsm6dsl_pin_int1_route_set+0xdc>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8001e86:	f107 0214 	add.w	r2, r7, #20
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	215f      	movs	r1, #95	@ 0x5f
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff fd9a 	bl	80019c8 <lsm6dsl_read_reg>
 8001e94:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 8001e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d147      	bne.n	8001f2c <lsm6dsl_pin_int1_route_set+0x172>
  {
    md1_cfg.int1_timer           = val.int1_timer;
 8001e9c:	787b      	ldrb	r3, [r7, #1]
 8001e9e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	7e3b      	ldrb	r3, [r7, #24]
 8001ea6:	f362 0300 	bfi	r3, r2, #0, #1
 8001eaa:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_tilt            = val.int1_tilt;
 8001eac:	787b      	ldrb	r3, [r7, #1]
 8001eae:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	7e3b      	ldrb	r3, [r7, #24]
 8001eb6:	f362 0341 	bfi	r3, r2, #1, #1
 8001eba:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_6d              = val.int1_6d;
 8001ebc:	787b      	ldrb	r3, [r7, #1]
 8001ebe:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	7e3b      	ldrb	r3, [r7, #24]
 8001ec6:	f362 0382 	bfi	r3, r2, #2, #1
 8001eca:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_double_tap      = val.int1_double_tap;
 8001ecc:	787b      	ldrb	r3, [r7, #1]
 8001ece:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	7e3b      	ldrb	r3, [r7, #24]
 8001ed6:	f362 03c3 	bfi	r3, r2, #3, #1
 8001eda:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_ff              = val.int1_ff;
 8001edc:	787b      	ldrb	r3, [r7, #1]
 8001ede:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	7e3b      	ldrb	r3, [r7, #24]
 8001ee6:	f362 1304 	bfi	r3, r2, #4, #1
 8001eea:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_wu              = val.int1_wu;
 8001eec:	787b      	ldrb	r3, [r7, #1]
 8001eee:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	7e3b      	ldrb	r3, [r7, #24]
 8001ef6:	f362 1345 	bfi	r3, r2, #5, #1
 8001efa:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_single_tap      = val.int1_single_tap;
 8001efc:	787b      	ldrb	r3, [r7, #1]
 8001efe:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	7e3b      	ldrb	r3, [r7, #24]
 8001f06:	f362 1386 	bfi	r3, r2, #6, #1
 8001f0a:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_inact_state     = val.int1_inact_state;
 8001f0c:	787b      	ldrb	r3, [r7, #1]
 8001f0e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	7e3b      	ldrb	r3, [r7, #24]
 8001f16:	f362 13c7 	bfi	r3, r2, #7, #1
 8001f1a:	763b      	strb	r3, [r7, #24]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8001f1c:	f107 0218 	add.w	r2, r7, #24
 8001f20:	2301      	movs	r3, #1
 8001f22:	215e      	movs	r1, #94	@ 0x5e
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff fd6d 	bl	8001a04 <lsm6dsl_write_reg>
 8001f2a:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d107      	bne.n	8001f42 <lsm6dsl_pin_int1_route_set+0x188>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8001f32:	f107 0210 	add.w	r2, r7, #16
 8001f36:	2301      	movs	r3, #1
 8001f38:	2113      	movs	r1, #19
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7ff fd44 	bl	80019c8 <lsm6dsl_read_reg>
 8001f40:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 8001f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d10f      	bne.n	8001f68 <lsm6dsl_pin_int1_route_set+0x1ae>
  {
    ctrl4_c.den_drdy_int1 = val.den_drdy_int1;
 8001f48:	78bb      	ldrb	r3, [r7, #2]
 8001f4a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	7c3b      	ldrb	r3, [r7, #16]
 8001f52:	f362 1304 	bfi	r3, r2, #4, #1
 8001f56:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8001f58:	f107 0210 	add.w	r2, r7, #16
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	2113      	movs	r1, #19
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f7ff fd4f 	bl	8001a04 <lsm6dsl_write_reg>
 8001f66:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 8001f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d107      	bne.n	8001f7e <lsm6dsl_pin_int1_route_set+0x1c4>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8001f6e:	f107 0220 	add.w	r2, r7, #32
 8001f72:	2301      	movs	r3, #1
 8001f74:	211a      	movs	r1, #26
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7ff fd26 	bl	80019c8 <lsm6dsl_read_reg>
 8001f7c:	6278      	str	r0, [r7, #36]	@ 0x24
                           (uint8_t *)&master_config, 1);
  }

  if (ret == 0)
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d111      	bne.n	8001fa8 <lsm6dsl_pin_int1_route_set+0x1ee>
  {
    master_config.drdy_on_int1   = val.den_drdy_int1;
 8001f84:	78bb      	ldrb	r3, [r7, #2]
 8001f86:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f90:	f362 13c7 	bfi	r3, r2, #7, #1
 8001f94:	f887 3020 	strb.w	r3, [r7, #32]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8001f98:	f107 0220 	add.w	r2, r7, #32
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	211a      	movs	r1, #26
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff fd2f 	bl	8001a04 <lsm6dsl_write_reg>
 8001fa6:	6278      	str	r0, [r7, #36]	@ 0x24
                            (uint8_t *)&master_config, 1);
  }

  if (ret == 0)
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d158      	bne.n	8002060 <lsm6dsl_pin_int1_route_set+0x2a6>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 8001fae:	f107 020c 	add.w	r2, r7, #12
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	2158      	movs	r1, #88	@ 0x58
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff fd06 	bl	80019c8 <lsm6dsl_read_reg>
 8001fbc:	6278      	str	r0, [r7, #36]	@ 0x24

    if ((val.int1_6d != 0x00U) ||
 8001fbe:	787b      	ldrb	r3, [r7, #1]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d141      	bne.n	800204e <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_ff != 0x00U) ||
 8001fca:	787b      	ldrb	r3, [r7, #1]
 8001fcc:	f003 0310 	and.w	r3, r3, #16
 8001fd0:	b2db      	uxtb	r3, r3
    if ((val.int1_6d != 0x00U) ||
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d13b      	bne.n	800204e <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_wu != 0x00U) ||
 8001fd6:	787b      	ldrb	r3, [r7, #1]
 8001fd8:	f003 0320 	and.w	r3, r3, #32
 8001fdc:	b2db      	uxtb	r3, r3
        (val.int1_ff != 0x00U) ||
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d135      	bne.n	800204e <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_single_tap != 0x00U) ||
 8001fe2:	787b      	ldrb	r3, [r7, #1]
 8001fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fe8:	b2db      	uxtb	r3, r3
        (val.int1_wu != 0x00U) ||
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d12f      	bne.n	800204e <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_double_tap != 0x00U) ||
 8001fee:	787b      	ldrb	r3, [r7, #1]
 8001ff0:	f003 0308 	and.w	r3, r3, #8
 8001ff4:	b2db      	uxtb	r3, r3
        (val.int1_single_tap != 0x00U) ||
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d129      	bne.n	800204e <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_inact_state != 0x00U) ||
 8001ffa:	787b      	ldrb	r3, [r7, #1]
 8001ffc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002000:	b2db      	uxtb	r3, r3
        (val.int1_double_tap != 0x00U) ||
 8002002:	2b00      	cmp	r3, #0
 8002004:	d123      	bne.n	800204e <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_6d != 0x00U) ||
 8002006:	7d3b      	ldrb	r3, [r7, #20]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	b2db      	uxtb	r3, r3
        (val.int1_inact_state != 0x00U) ||
 800200e:	2b00      	cmp	r3, #0
 8002010:	d11d      	bne.n	800204e <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_ff != 0x00U) ||
 8002012:	7d3b      	ldrb	r3, [r7, #20]
 8002014:	f003 0310 	and.w	r3, r3, #16
 8002018:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_6d != 0x00U) ||
 800201a:	2b00      	cmp	r3, #0
 800201c:	d117      	bne.n	800204e <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_wu != 0x00U) ||
 800201e:	7d3b      	ldrb	r3, [r7, #20]
 8002020:	f003 0320 	and.w	r3, r3, #32
 8002024:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_ff != 0x00U) ||
 8002026:	2b00      	cmp	r3, #0
 8002028:	d111      	bne.n	800204e <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_single_tap != 0x00U) ||
 800202a:	7d3b      	ldrb	r3, [r7, #20]
 800202c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002030:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_wu != 0x00U) ||
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10b      	bne.n	800204e <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_double_tap != 0x00U) ||
 8002036:	7d3b      	ldrb	r3, [r7, #20]
 8002038:	f003 0308 	and.w	r3, r3, #8
 800203c:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_single_tap != 0x00U) ||
 800203e:	2b00      	cmp	r3, #0
 8002040:	d105      	bne.n	800204e <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_inact_state != 0x00U))
 8002042:	7d3b      	ldrb	r3, [r7, #20]
 8002044:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002048:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_double_tap != 0x00U) ||
 800204a:	2b00      	cmp	r3, #0
 800204c:	d004      	beq.n	8002058 <lsm6dsl_pin_int1_route_set+0x29e>
    {
      tap_cfg.interrupts_enable = PROPERTY_ENABLE;
 800204e:	7b3b      	ldrb	r3, [r7, #12]
 8002050:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002054:	733b      	strb	r3, [r7, #12]
 8002056:	e003      	b.n	8002060 <lsm6dsl_pin_int1_route_set+0x2a6>
    }

    else
    {
      tap_cfg.interrupts_enable = PROPERTY_DISABLE;
 8002058:	7b3b      	ldrb	r3, [r7, #12]
 800205a:	f36f 13c7 	bfc	r3, #7, #1
 800205e:	733b      	strb	r3, [r7, #12]
    }
  }

  if (ret == 0)
 8002060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002062:	2b00      	cmp	r3, #0
 8002064:	d107      	bne.n	8002076 <lsm6dsl_pin_int1_route_set+0x2bc>
  {
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 8002066:	f107 020c 	add.w	r2, r7, #12
 800206a:	2301      	movs	r3, #1
 800206c:	2158      	movs	r1, #88	@ 0x58
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff fcc8 	bl	8001a04 <lsm6dsl_write_reg>
 8002074:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  return ret;
 8002076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002078:	4618      	mov	r0, r3
 800207a:	3728      	adds	r7, #40	@ 0x28
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <lsm6dsl_pin_int1_route_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_get(const stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t *val)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  lsm6dsl_int1_ctrl_t int1_ctrl;
  lsm6dsl_md1_cfg_t md1_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 800208a:	f107 0214 	add.w	r2, r7, #20
 800208e:	2301      	movs	r3, #1
 8002090:	210d      	movs	r1, #13
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7ff fc98 	bl	80019c8 <lsm6dsl_read_reg>
 8002098:	61f8      	str	r0, [r7, #28]

  if (ret == 0)
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	2b00      	cmp	r3, #0
 800209e:	f040 80c0 	bne.w	8002222 <lsm6dsl_pin_int1_route_get+0x1a2>
  {
    val->int1_drdy_xl       = int1_ctrl.int1_drdy_xl;
 80020a2:	7d3b      	ldrb	r3, [r7, #20]
 80020a4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80020a8:	b2d9      	uxtb	r1, r3
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	7813      	ldrb	r3, [r2, #0]
 80020ae:	f361 0300 	bfi	r3, r1, #0, #1
 80020b2:	7013      	strb	r3, [r2, #0]
    val->int1_drdy_g        = int1_ctrl.int1_drdy_g;
 80020b4:	7d3b      	ldrb	r3, [r7, #20]
 80020b6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80020ba:	b2d9      	uxtb	r1, r3
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	7813      	ldrb	r3, [r2, #0]
 80020c0:	f361 0341 	bfi	r3, r1, #1, #1
 80020c4:	7013      	strb	r3, [r2, #0]
    val->int1_boot          = int1_ctrl.int1_boot;
 80020c6:	7d3b      	ldrb	r3, [r7, #20]
 80020c8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80020cc:	b2d9      	uxtb	r1, r3
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	7813      	ldrb	r3, [r2, #0]
 80020d2:	f361 0382 	bfi	r3, r1, #2, #1
 80020d6:	7013      	strb	r3, [r2, #0]
    val->int1_fth           = int1_ctrl.int1_fth;
 80020d8:	7d3b      	ldrb	r3, [r7, #20]
 80020da:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80020de:	b2d9      	uxtb	r1, r3
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	7813      	ldrb	r3, [r2, #0]
 80020e4:	f361 03c3 	bfi	r3, r1, #3, #1
 80020e8:	7013      	strb	r3, [r2, #0]
    val->int1_fifo_ovr      = int1_ctrl.int1_fifo_ovr;
 80020ea:	7d3b      	ldrb	r3, [r7, #20]
 80020ec:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80020f0:	b2d9      	uxtb	r1, r3
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	7813      	ldrb	r3, [r2, #0]
 80020f6:	f361 1304 	bfi	r3, r1, #4, #1
 80020fa:	7013      	strb	r3, [r2, #0]
    val->int1_full_flag     = int1_ctrl.int1_full_flag;
 80020fc:	7d3b      	ldrb	r3, [r7, #20]
 80020fe:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002102:	b2d9      	uxtb	r1, r3
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	7813      	ldrb	r3, [r2, #0]
 8002108:	f361 1345 	bfi	r3, r1, #5, #1
 800210c:	7013      	strb	r3, [r2, #0]
    val->int1_sign_mot      = int1_ctrl.int1_sign_mot;
 800210e:	7d3b      	ldrb	r3, [r7, #20]
 8002110:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002114:	b2d9      	uxtb	r1, r3
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	7813      	ldrb	r3, [r2, #0]
 800211a:	f361 1386 	bfi	r3, r1, #6, #1
 800211e:	7013      	strb	r3, [r2, #0]
    val->int1_step_detector = int1_ctrl.int1_step_detector ;
 8002120:	7d3b      	ldrb	r3, [r7, #20]
 8002122:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002126:	b2d9      	uxtb	r1, r3
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	7813      	ldrb	r3, [r2, #0]
 800212c:	f361 13c7 	bfi	r3, r1, #7, #1
 8002130:	7013      	strb	r3, [r2, #0]
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8002132:	f107 0210 	add.w	r2, r7, #16
 8002136:	2301      	movs	r3, #1
 8002138:	215e      	movs	r1, #94	@ 0x5e
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7ff fc44 	bl	80019c8 <lsm6dsl_read_reg>
 8002140:	61f8      	str	r0, [r7, #28]

    if (ret == 0)
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d16c      	bne.n	8002222 <lsm6dsl_pin_int1_route_get+0x1a2>
    {
      val->int1_timer       = md1_cfg.int1_timer;
 8002148:	7c3b      	ldrb	r3, [r7, #16]
 800214a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800214e:	b2d9      	uxtb	r1, r3
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	7853      	ldrb	r3, [r2, #1]
 8002154:	f361 0300 	bfi	r3, r1, #0, #1
 8002158:	7053      	strb	r3, [r2, #1]
      val->int1_tilt        = md1_cfg.int1_tilt;
 800215a:	7c3b      	ldrb	r3, [r7, #16]
 800215c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002160:	b2d9      	uxtb	r1, r3
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	7853      	ldrb	r3, [r2, #1]
 8002166:	f361 0341 	bfi	r3, r1, #1, #1
 800216a:	7053      	strb	r3, [r2, #1]
      val->int1_6d          = md1_cfg.int1_6d;
 800216c:	7c3b      	ldrb	r3, [r7, #16]
 800216e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002172:	b2d9      	uxtb	r1, r3
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	7853      	ldrb	r3, [r2, #1]
 8002178:	f361 0382 	bfi	r3, r1, #2, #1
 800217c:	7053      	strb	r3, [r2, #1]
      val->int1_double_tap  = md1_cfg.int1_double_tap;
 800217e:	7c3b      	ldrb	r3, [r7, #16]
 8002180:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002184:	b2d9      	uxtb	r1, r3
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	7853      	ldrb	r3, [r2, #1]
 800218a:	f361 03c3 	bfi	r3, r1, #3, #1
 800218e:	7053      	strb	r3, [r2, #1]
      val->int1_ff          = md1_cfg.int1_ff;
 8002190:	7c3b      	ldrb	r3, [r7, #16]
 8002192:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002196:	b2d9      	uxtb	r1, r3
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	7853      	ldrb	r3, [r2, #1]
 800219c:	f361 1304 	bfi	r3, r1, #4, #1
 80021a0:	7053      	strb	r3, [r2, #1]
      val->int1_wu          = md1_cfg.int1_wu;
 80021a2:	7c3b      	ldrb	r3, [r7, #16]
 80021a4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80021a8:	b2d9      	uxtb	r1, r3
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	7853      	ldrb	r3, [r2, #1]
 80021ae:	f361 1345 	bfi	r3, r1, #5, #1
 80021b2:	7053      	strb	r3, [r2, #1]
      val->int1_single_tap  = md1_cfg.int1_single_tap;
 80021b4:	7c3b      	ldrb	r3, [r7, #16]
 80021b6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80021ba:	b2d9      	uxtb	r1, r3
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	7853      	ldrb	r3, [r2, #1]
 80021c0:	f361 1386 	bfi	r3, r1, #6, #1
 80021c4:	7053      	strb	r3, [r2, #1]
      val->int1_inact_state = md1_cfg.int1_inact_state;
 80021c6:	7c3b      	ldrb	r3, [r7, #16]
 80021c8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80021cc:	b2d9      	uxtb	r1, r3
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	7853      	ldrb	r3, [r2, #1]
 80021d2:	f361 13c7 	bfi	r3, r1, #7, #1
 80021d6:	7053      	strb	r3, [r2, #1]
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 80021d8:	f107 020c 	add.w	r2, r7, #12
 80021dc:	2301      	movs	r3, #1
 80021de:	2113      	movs	r1, #19
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff fbf1 	bl	80019c8 <lsm6dsl_read_reg>
 80021e6:	61f8      	str	r0, [r7, #28]

      if (ret == 0)
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d119      	bne.n	8002222 <lsm6dsl_pin_int1_route_get+0x1a2>
      {
        val->den_drdy_int1 = ctrl4_c.den_drdy_int1;
 80021ee:	7b3b      	ldrb	r3, [r7, #12]
 80021f0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80021f4:	b2d9      	uxtb	r1, r3
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	7893      	ldrb	r3, [r2, #2]
 80021fa:	f361 0300 	bfi	r3, r1, #0, #1
 80021fe:	7093      	strb	r3, [r2, #2]
        ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8002200:	f107 0218 	add.w	r2, r7, #24
 8002204:	2301      	movs	r3, #1
 8002206:	211a      	movs	r1, #26
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f7ff fbdd 	bl	80019c8 <lsm6dsl_read_reg>
 800220e:	61f8      	str	r0, [r7, #28]
                               (uint8_t *)&master_config, 1);
        val->den_drdy_int1 = master_config.drdy_on_int1;
 8002210:	7e3b      	ldrb	r3, [r7, #24]
 8002212:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002216:	b2d9      	uxtb	r1, r3
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	7893      	ldrb	r3, [r2, #2]
 800221c:	f361 0300 	bfi	r3, r1, #0, #1
 8002220:	7093      	strb	r3, [r2, #2]
      }
    }
  }

  return ret;
 8002222:	69fb      	ldr	r3, [r7, #28]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3720      	adds	r7, #32
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(const stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	460b      	mov	r3, r1
 8002236:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8002238:	f107 0208 	add.w	r2, r7, #8
 800223c:	2301      	movs	r3, #1
 800223e:	210a      	movs	r1, #10
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7ff fbc1 	bl	80019c8 <lsm6dsl_read_reg>
 8002246:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10f      	bne.n	800226e <lsm6dsl_fifo_mode_set+0x42>
  {
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 800224e:	78fb      	ldrb	r3, [r7, #3]
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	b2da      	uxtb	r2, r3
 8002256:	7a3b      	ldrb	r3, [r7, #8]
 8002258:	f362 0302 	bfi	r3, r2, #0, #3
 800225c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 800225e:	f107 0208 	add.w	r2, r7, #8
 8002262:	2301      	movs	r3, #1
 8002264:	210a      	movs	r1, #10
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7ff fbcc 	bl	8001a04 <lsm6dsl_write_reg>
 800226c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 800226e:	68fb      	ldr	r3, [r7, #12]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800227e:	2300      	movs	r3, #0
 8002280:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002282:	2003      	movs	r0, #3
 8002284:	f000 f960 	bl	8002548 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002288:	2000      	movs	r0, #0
 800228a:	f000 f80d 	bl	80022a8 <HAL_InitTick>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d002      	beq.n	800229a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	71fb      	strb	r3, [r7, #7]
 8002298:	e001      	b.n	800229e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800229a:	f7fe fb2f 	bl	80008fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800229e:	79fb      	ldrb	r3, [r7, #7]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022b0:	2300      	movs	r3, #0
 80022b2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80022b4:	4b17      	ldr	r3, [pc, #92]	@ (8002314 <HAL_InitTick+0x6c>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d023      	beq.n	8002304 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80022bc:	4b16      	ldr	r3, [pc, #88]	@ (8002318 <HAL_InitTick+0x70>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	4b14      	ldr	r3, [pc, #80]	@ (8002314 <HAL_InitTick+0x6c>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	4619      	mov	r1, r3
 80022c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d2:	4618      	mov	r0, r3
 80022d4:	f000 f96d 	bl	80025b2 <HAL_SYSTICK_Config>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10f      	bne.n	80022fe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b0f      	cmp	r3, #15
 80022e2:	d809      	bhi.n	80022f8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022e4:	2200      	movs	r2, #0
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	f04f 30ff 	mov.w	r0, #4294967295
 80022ec:	f000 f937 	bl	800255e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022f0:	4a0a      	ldr	r2, [pc, #40]	@ (800231c <HAL_InitTick+0x74>)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6013      	str	r3, [r2, #0]
 80022f6:	e007      	b.n	8002308 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	73fb      	strb	r3, [r7, #15]
 80022fc:	e004      	b.n	8002308 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	73fb      	strb	r3, [r7, #15]
 8002302:	e001      	b.n	8002308 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002308:	7bfb      	ldrb	r3, [r7, #15]
}
 800230a:	4618      	mov	r0, r3
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20000008 	.word	0x20000008
 8002318:	20000000 	.word	0x20000000
 800231c:	20000004 	.word	0x20000004

08002320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002324:	4b06      	ldr	r3, [pc, #24]	@ (8002340 <HAL_IncTick+0x20>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	461a      	mov	r2, r3
 800232a:	4b06      	ldr	r3, [pc, #24]	@ (8002344 <HAL_IncTick+0x24>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4413      	add	r3, r2
 8002330:	4a04      	ldr	r2, [pc, #16]	@ (8002344 <HAL_IncTick+0x24>)
 8002332:	6013      	str	r3, [r2, #0]
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	20000008 	.word	0x20000008
 8002344:	200001a8 	.word	0x200001a8

08002348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  return uwTick;
 800234c:	4b03      	ldr	r3, [pc, #12]	@ (800235c <HAL_GetTick+0x14>)
 800234e:	681b      	ldr	r3, [r3, #0]
}
 8002350:	4618      	mov	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	200001a8 	.word	0x200001a8

08002360 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002368:	f7ff ffee 	bl	8002348 <HAL_GetTick>
 800236c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002378:	d005      	beq.n	8002386 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800237a:	4b0a      	ldr	r3, [pc, #40]	@ (80023a4 <HAL_Delay+0x44>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	461a      	mov	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4413      	add	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002386:	bf00      	nop
 8002388:	f7ff ffde 	bl	8002348 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	429a      	cmp	r2, r3
 8002396:	d8f7      	bhi.n	8002388 <HAL_Delay+0x28>
  {
  }
}
 8002398:	bf00      	nop
 800239a:	bf00      	nop
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000008 	.word	0x20000008

080023a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b8:	4b0c      	ldr	r3, [pc, #48]	@ (80023ec <__NVIC_SetPriorityGrouping+0x44>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023c4:	4013      	ands	r3, r2
 80023c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023da:	4a04      	ldr	r2, [pc, #16]	@ (80023ec <__NVIC_SetPriorityGrouping+0x44>)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	60d3      	str	r3, [r2, #12]
}
 80023e0:	bf00      	nop
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023f4:	4b04      	ldr	r3, [pc, #16]	@ (8002408 <__NVIC_GetPriorityGrouping+0x18>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	0a1b      	lsrs	r3, r3, #8
 80023fa:	f003 0307 	and.w	r3, r3, #7
}
 80023fe:	4618      	mov	r0, r3
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241a:	2b00      	cmp	r3, #0
 800241c:	db0b      	blt.n	8002436 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800241e:	79fb      	ldrb	r3, [r7, #7]
 8002420:	f003 021f 	and.w	r2, r3, #31
 8002424:	4907      	ldr	r1, [pc, #28]	@ (8002444 <__NVIC_EnableIRQ+0x38>)
 8002426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242a:	095b      	lsrs	r3, r3, #5
 800242c:	2001      	movs	r0, #1
 800242e:	fa00 f202 	lsl.w	r2, r0, r2
 8002432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	e000e100 	.word	0xe000e100

08002448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	6039      	str	r1, [r7, #0]
 8002452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002458:	2b00      	cmp	r3, #0
 800245a:	db0a      	blt.n	8002472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	b2da      	uxtb	r2, r3
 8002460:	490c      	ldr	r1, [pc, #48]	@ (8002494 <__NVIC_SetPriority+0x4c>)
 8002462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002466:	0112      	lsls	r2, r2, #4
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	440b      	add	r3, r1
 800246c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002470:	e00a      	b.n	8002488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	b2da      	uxtb	r2, r3
 8002476:	4908      	ldr	r1, [pc, #32]	@ (8002498 <__NVIC_SetPriority+0x50>)
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	3b04      	subs	r3, #4
 8002480:	0112      	lsls	r2, r2, #4
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	440b      	add	r3, r1
 8002486:	761a      	strb	r2, [r3, #24]
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	e000e100 	.word	0xe000e100
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800249c:	b480      	push	{r7}
 800249e:	b089      	sub	sp, #36	@ 0x24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	f1c3 0307 	rsb	r3, r3, #7
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	bf28      	it	cs
 80024ba:	2304      	movcs	r3, #4
 80024bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	3304      	adds	r3, #4
 80024c2:	2b06      	cmp	r3, #6
 80024c4:	d902      	bls.n	80024cc <NVIC_EncodePriority+0x30>
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	3b03      	subs	r3, #3
 80024ca:	e000      	b.n	80024ce <NVIC_EncodePriority+0x32>
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d0:	f04f 32ff 	mov.w	r2, #4294967295
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43da      	mvns	r2, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	401a      	ands	r2, r3
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024e4:	f04f 31ff 	mov.w	r1, #4294967295
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	fa01 f303 	lsl.w	r3, r1, r3
 80024ee:	43d9      	mvns	r1, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f4:	4313      	orrs	r3, r2
         );
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3724      	adds	r7, #36	@ 0x24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
	...

08002504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3b01      	subs	r3, #1
 8002510:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002514:	d301      	bcc.n	800251a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002516:	2301      	movs	r3, #1
 8002518:	e00f      	b.n	800253a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800251a:	4a0a      	ldr	r2, [pc, #40]	@ (8002544 <SysTick_Config+0x40>)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3b01      	subs	r3, #1
 8002520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002522:	210f      	movs	r1, #15
 8002524:	f04f 30ff 	mov.w	r0, #4294967295
 8002528:	f7ff ff8e 	bl	8002448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800252c:	4b05      	ldr	r3, [pc, #20]	@ (8002544 <SysTick_Config+0x40>)
 800252e:	2200      	movs	r2, #0
 8002530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002532:	4b04      	ldr	r3, [pc, #16]	@ (8002544 <SysTick_Config+0x40>)
 8002534:	2207      	movs	r2, #7
 8002536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	e000e010 	.word	0xe000e010

08002548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff ff29 	bl	80023a8 <__NVIC_SetPriorityGrouping>
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b086      	sub	sp, #24
 8002562:	af00      	add	r7, sp, #0
 8002564:	4603      	mov	r3, r0
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	607a      	str	r2, [r7, #4]
 800256a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002570:	f7ff ff3e 	bl	80023f0 <__NVIC_GetPriorityGrouping>
 8002574:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	68b9      	ldr	r1, [r7, #8]
 800257a:	6978      	ldr	r0, [r7, #20]
 800257c:	f7ff ff8e 	bl	800249c <NVIC_EncodePriority>
 8002580:	4602      	mov	r2, r0
 8002582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002586:	4611      	mov	r1, r2
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff ff5d 	bl	8002448 <__NVIC_SetPriority>
}
 800258e:	bf00      	nop
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b082      	sub	sp, #8
 800259a:	af00      	add	r7, sp, #0
 800259c:	4603      	mov	r3, r0
 800259e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff ff31 	bl	800240c <__NVIC_EnableIRQ>
}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff ffa2 	bl	8002504 <SysTick_Config>
 80025c0:	4603      	mov	r3, r0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
	...

080025cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025da:	e17f      	b.n	80028dc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	2101      	movs	r1, #1
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	fa01 f303 	lsl.w	r3, r1, r3
 80025e8:	4013      	ands	r3, r2
 80025ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 8171 	beq.w	80028d6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 0303 	and.w	r3, r3, #3
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d005      	beq.n	800260c <HAL_GPIO_Init+0x40>
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d130      	bne.n	800266e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	2203      	movs	r2, #3
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	4013      	ands	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	68da      	ldr	r2, [r3, #12]
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	4313      	orrs	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002642:	2201      	movs	r2, #1
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43db      	mvns	r3, r3
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	4013      	ands	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	091b      	lsrs	r3, r3, #4
 8002658:	f003 0201 	and.w	r2, r3, #1
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	2b03      	cmp	r3, #3
 8002678:	d118      	bne.n	80026ac <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800267e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002680:	2201      	movs	r2, #1
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	4013      	ands	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	08db      	lsrs	r3, r3, #3
 8002696:	f003 0201 	and.w	r2, r3, #1
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f003 0303 	and.w	r3, r3, #3
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d017      	beq.n	80026e8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	2203      	movs	r2, #3
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	4013      	ands	r3, r2
 80026ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	4313      	orrs	r3, r2
 80026e0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 0303 	and.w	r3, r3, #3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d123      	bne.n	800273c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	08da      	lsrs	r2, r3, #3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3208      	adds	r2, #8
 80026fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002700:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	220f      	movs	r2, #15
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	4013      	ands	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	691a      	ldr	r2, [r3, #16]
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	4313      	orrs	r3, r2
 800272c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	08da      	lsrs	r2, r3, #3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	3208      	adds	r2, #8
 8002736:	6939      	ldr	r1, [r7, #16]
 8002738:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	2203      	movs	r2, #3
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4013      	ands	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f003 0203 	and.w	r2, r3, #3
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	4313      	orrs	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 80ac 	beq.w	80028d6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800277e:	4b5f      	ldr	r3, [pc, #380]	@ (80028fc <HAL_GPIO_Init+0x330>)
 8002780:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002782:	4a5e      	ldr	r2, [pc, #376]	@ (80028fc <HAL_GPIO_Init+0x330>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	6613      	str	r3, [r2, #96]	@ 0x60
 800278a:	4b5c      	ldr	r3, [pc, #368]	@ (80028fc <HAL_GPIO_Init+0x330>)
 800278c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	60bb      	str	r3, [r7, #8]
 8002794:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002796:	4a5a      	ldr	r2, [pc, #360]	@ (8002900 <HAL_GPIO_Init+0x334>)
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	089b      	lsrs	r3, r3, #2
 800279c:	3302      	adds	r3, #2
 800279e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	220f      	movs	r2, #15
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	43db      	mvns	r3, r3
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	4013      	ands	r3, r2
 80027b8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80027c0:	d025      	beq.n	800280e <HAL_GPIO_Init+0x242>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a4f      	ldr	r2, [pc, #316]	@ (8002904 <HAL_GPIO_Init+0x338>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d01f      	beq.n	800280a <HAL_GPIO_Init+0x23e>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a4e      	ldr	r2, [pc, #312]	@ (8002908 <HAL_GPIO_Init+0x33c>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d019      	beq.n	8002806 <HAL_GPIO_Init+0x23a>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a4d      	ldr	r2, [pc, #308]	@ (800290c <HAL_GPIO_Init+0x340>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d013      	beq.n	8002802 <HAL_GPIO_Init+0x236>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a4c      	ldr	r2, [pc, #304]	@ (8002910 <HAL_GPIO_Init+0x344>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d00d      	beq.n	80027fe <HAL_GPIO_Init+0x232>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a4b      	ldr	r2, [pc, #300]	@ (8002914 <HAL_GPIO_Init+0x348>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d007      	beq.n	80027fa <HAL_GPIO_Init+0x22e>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a4a      	ldr	r2, [pc, #296]	@ (8002918 <HAL_GPIO_Init+0x34c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d101      	bne.n	80027f6 <HAL_GPIO_Init+0x22a>
 80027f2:	2306      	movs	r3, #6
 80027f4:	e00c      	b.n	8002810 <HAL_GPIO_Init+0x244>
 80027f6:	2307      	movs	r3, #7
 80027f8:	e00a      	b.n	8002810 <HAL_GPIO_Init+0x244>
 80027fa:	2305      	movs	r3, #5
 80027fc:	e008      	b.n	8002810 <HAL_GPIO_Init+0x244>
 80027fe:	2304      	movs	r3, #4
 8002800:	e006      	b.n	8002810 <HAL_GPIO_Init+0x244>
 8002802:	2303      	movs	r3, #3
 8002804:	e004      	b.n	8002810 <HAL_GPIO_Init+0x244>
 8002806:	2302      	movs	r3, #2
 8002808:	e002      	b.n	8002810 <HAL_GPIO_Init+0x244>
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <HAL_GPIO_Init+0x244>
 800280e:	2300      	movs	r3, #0
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	f002 0203 	and.w	r2, r2, #3
 8002816:	0092      	lsls	r2, r2, #2
 8002818:	4093      	lsls	r3, r2
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	4313      	orrs	r3, r2
 800281e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002820:	4937      	ldr	r1, [pc, #220]	@ (8002900 <HAL_GPIO_Init+0x334>)
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	089b      	lsrs	r3, r3, #2
 8002826:	3302      	adds	r3, #2
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800282e:	4b3b      	ldr	r3, [pc, #236]	@ (800291c <HAL_GPIO_Init+0x350>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	43db      	mvns	r3, r3
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	4013      	ands	r3, r2
 800283c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4313      	orrs	r3, r2
 8002850:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002852:	4a32      	ldr	r2, [pc, #200]	@ (800291c <HAL_GPIO_Init+0x350>)
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002858:	4b30      	ldr	r3, [pc, #192]	@ (800291c <HAL_GPIO_Init+0x350>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	43db      	mvns	r3, r3
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	4013      	ands	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d003      	beq.n	800287c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	4313      	orrs	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800287c:	4a27      	ldr	r2, [pc, #156]	@ (800291c <HAL_GPIO_Init+0x350>)
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002882:	4b26      	ldr	r3, [pc, #152]	@ (800291c <HAL_GPIO_Init+0x350>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	43db      	mvns	r3, r3
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	4013      	ands	r3, r2
 8002890:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028a6:	4a1d      	ldr	r2, [pc, #116]	@ (800291c <HAL_GPIO_Init+0x350>)
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80028ac:	4b1b      	ldr	r3, [pc, #108]	@ (800291c <HAL_GPIO_Init+0x350>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	43db      	mvns	r3, r3
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	4013      	ands	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d003      	beq.n	80028d0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028d0:	4a12      	ldr	r2, [pc, #72]	@ (800291c <HAL_GPIO_Init+0x350>)
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	3301      	adds	r3, #1
 80028da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	fa22 f303 	lsr.w	r3, r2, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f47f ae78 	bne.w	80025dc <HAL_GPIO_Init+0x10>
  }
}
 80028ec:	bf00      	nop
 80028ee:	bf00      	nop
 80028f0:	371c      	adds	r7, #28
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	40021000 	.word	0x40021000
 8002900:	40010000 	.word	0x40010000
 8002904:	48000400 	.word	0x48000400
 8002908:	48000800 	.word	0x48000800
 800290c:	48000c00 	.word	0x48000c00
 8002910:	48001000 	.word	0x48001000
 8002914:	48001400 	.word	0x48001400
 8002918:	48001800 	.word	0x48001800
 800291c:	40010400 	.word	0x40010400

08002920 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002920:	b480      	push	{r7}
 8002922:	b087      	sub	sp, #28
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800292e:	e0cd      	b.n	8002acc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002930:	2201      	movs	r2, #1
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	4013      	ands	r3, r2
 800293c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 80c0 	beq.w	8002ac6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002946:	4a68      	ldr	r2, [pc, #416]	@ (8002ae8 <HAL_GPIO_DeInit+0x1c8>)
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	089b      	lsrs	r3, r3, #2
 800294c:	3302      	adds	r3, #2
 800294e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002952:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	220f      	movs	r2, #15
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	4013      	ands	r3, r2
 8002966:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800296e:	d025      	beq.n	80029bc <HAL_GPIO_DeInit+0x9c>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a5e      	ldr	r2, [pc, #376]	@ (8002aec <HAL_GPIO_DeInit+0x1cc>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d01f      	beq.n	80029b8 <HAL_GPIO_DeInit+0x98>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a5d      	ldr	r2, [pc, #372]	@ (8002af0 <HAL_GPIO_DeInit+0x1d0>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d019      	beq.n	80029b4 <HAL_GPIO_DeInit+0x94>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a5c      	ldr	r2, [pc, #368]	@ (8002af4 <HAL_GPIO_DeInit+0x1d4>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d013      	beq.n	80029b0 <HAL_GPIO_DeInit+0x90>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a5b      	ldr	r2, [pc, #364]	@ (8002af8 <HAL_GPIO_DeInit+0x1d8>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d00d      	beq.n	80029ac <HAL_GPIO_DeInit+0x8c>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a5a      	ldr	r2, [pc, #360]	@ (8002afc <HAL_GPIO_DeInit+0x1dc>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d007      	beq.n	80029a8 <HAL_GPIO_DeInit+0x88>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a59      	ldr	r2, [pc, #356]	@ (8002b00 <HAL_GPIO_DeInit+0x1e0>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d101      	bne.n	80029a4 <HAL_GPIO_DeInit+0x84>
 80029a0:	2306      	movs	r3, #6
 80029a2:	e00c      	b.n	80029be <HAL_GPIO_DeInit+0x9e>
 80029a4:	2307      	movs	r3, #7
 80029a6:	e00a      	b.n	80029be <HAL_GPIO_DeInit+0x9e>
 80029a8:	2305      	movs	r3, #5
 80029aa:	e008      	b.n	80029be <HAL_GPIO_DeInit+0x9e>
 80029ac:	2304      	movs	r3, #4
 80029ae:	e006      	b.n	80029be <HAL_GPIO_DeInit+0x9e>
 80029b0:	2303      	movs	r3, #3
 80029b2:	e004      	b.n	80029be <HAL_GPIO_DeInit+0x9e>
 80029b4:	2302      	movs	r3, #2
 80029b6:	e002      	b.n	80029be <HAL_GPIO_DeInit+0x9e>
 80029b8:	2301      	movs	r3, #1
 80029ba:	e000      	b.n	80029be <HAL_GPIO_DeInit+0x9e>
 80029bc:	2300      	movs	r3, #0
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	f002 0203 	and.w	r2, r2, #3
 80029c4:	0092      	lsls	r2, r2, #2
 80029c6:	4093      	lsls	r3, r2
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d132      	bne.n	8002a34 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80029ce:	4b4d      	ldr	r3, [pc, #308]	@ (8002b04 <HAL_GPIO_DeInit+0x1e4>)
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	43db      	mvns	r3, r3
 80029d6:	494b      	ldr	r1, [pc, #300]	@ (8002b04 <HAL_GPIO_DeInit+0x1e4>)
 80029d8:	4013      	ands	r3, r2
 80029da:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80029dc:	4b49      	ldr	r3, [pc, #292]	@ (8002b04 <HAL_GPIO_DeInit+0x1e4>)
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	43db      	mvns	r3, r3
 80029e4:	4947      	ldr	r1, [pc, #284]	@ (8002b04 <HAL_GPIO_DeInit+0x1e4>)
 80029e6:	4013      	ands	r3, r2
 80029e8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80029ea:	4b46      	ldr	r3, [pc, #280]	@ (8002b04 <HAL_GPIO_DeInit+0x1e4>)
 80029ec:	68da      	ldr	r2, [r3, #12]
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	43db      	mvns	r3, r3
 80029f2:	4944      	ldr	r1, [pc, #272]	@ (8002b04 <HAL_GPIO_DeInit+0x1e4>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80029f8:	4b42      	ldr	r3, [pc, #264]	@ (8002b04 <HAL_GPIO_DeInit+0x1e4>)
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	43db      	mvns	r3, r3
 8002a00:	4940      	ldr	r1, [pc, #256]	@ (8002b04 <HAL_GPIO_DeInit+0x1e4>)
 8002a02:	4013      	ands	r3, r2
 8002a04:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	f003 0303 	and.w	r3, r3, #3
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	220f      	movs	r2, #15
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002a16:	4a34      	ldr	r2, [pc, #208]	@ (8002ae8 <HAL_GPIO_DeInit+0x1c8>)
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	089b      	lsrs	r3, r3, #2
 8002a1c:	3302      	adds	r3, #2
 8002a1e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	43da      	mvns	r2, r3
 8002a26:	4830      	ldr	r0, [pc, #192]	@ (8002ae8 <HAL_GPIO_DeInit+0x1c8>)
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	089b      	lsrs	r3, r3, #2
 8002a2c:	400a      	ands	r2, r1
 8002a2e:	3302      	adds	r3, #2
 8002a30:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	2103      	movs	r1, #3
 8002a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	08da      	lsrs	r2, r3, #3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3208      	adds	r2, #8
 8002a50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	220f      	movs	r2, #15
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43db      	mvns	r3, r3
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	08d2      	lsrs	r2, r2, #3
 8002a68:	4019      	ands	r1, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	3208      	adds	r2, #8
 8002a6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689a      	ldr	r2, [r3, #8]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	2103      	movs	r1, #3
 8002a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	401a      	ands	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	fa01 f303 	lsl.w	r3, r1, r3
 8002a94:	43db      	mvns	r3, r3
 8002a96:	401a      	ands	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68da      	ldr	r2, [r3, #12]
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	2103      	movs	r1, #3
 8002aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	401a      	ands	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	fa01 f303 	lsl.w	r3, r1, r3
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	401a      	ands	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f47f af2b 	bne.w	8002930 <HAL_GPIO_DeInit+0x10>
  }
}
 8002ada:	bf00      	nop
 8002adc:	bf00      	nop
 8002ade:	371c      	adds	r7, #28
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr
 8002ae8:	40010000 	.word	0x40010000
 8002aec:	48000400 	.word	0x48000400
 8002af0:	48000800 	.word	0x48000800
 8002af4:	48000c00 	.word	0x48000c00
 8002af8:	48001000 	.word	0x48001000
 8002afc:	48001400 	.word	0x48001400
 8002b00:	48001800 	.word	0x48001800
 8002b04:	40010400 	.word	0x40010400

08002b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	807b      	strh	r3, [r7, #2]
 8002b14:	4613      	mov	r3, r2
 8002b16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b18:	787b      	ldrb	r3, [r7, #1]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b1e:	887a      	ldrh	r2, [r7, #2]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b24:	e002      	b.n	8002b2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b26:	887a      	ldrh	r2, [r7, #2]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b42:	4b08      	ldr	r3, [pc, #32]	@ (8002b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b44:	695a      	ldr	r2, [r3, #20]
 8002b46:	88fb      	ldrh	r3, [r7, #6]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d006      	beq.n	8002b5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b4e:	4a05      	ldr	r2, [pc, #20]	@ (8002b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b50:	88fb      	ldrh	r3, [r7, #6]
 8002b52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b54:	88fb      	ldrh	r3, [r7, #6]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fd fe90 	bl	800087c <HAL_GPIO_EXTI_Callback>
  }
}
 8002b5c:	bf00      	nop
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40010400 	.word	0x40010400

08002b68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e08d      	b.n	8002c96 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d106      	bne.n	8002b94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f8b4 	bl	8002cfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2224      	movs	r2, #36	@ 0x24
 8002b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 0201 	bic.w	r2, r2, #1
 8002baa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002bb8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bc8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d107      	bne.n	8002be2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002bde:	609a      	str	r2, [r3, #8]
 8002be0:	e006      	b.n	8002bf0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002bee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d108      	bne.n	8002c0a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c06:	605a      	str	r2, [r3, #4]
 8002c08:	e007      	b.n	8002c1a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c18:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	6812      	ldr	r2, [r2, #0]
 8002c24:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c2c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68da      	ldr	r2, [r3, #12]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c3c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691a      	ldr	r2, [r3, #16]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	69d9      	ldr	r1, [r3, #28]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a1a      	ldr	r2, [r3, #32]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f042 0201 	orr.w	r2, r2, #1
 8002c76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2220      	movs	r2, #32
 8002c82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b082      	sub	sp, #8
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e021      	b.n	8002cf4 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2224      	movs	r2, #36	@ 0x24
 8002cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 0201 	bic.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f821 	bl	8002d10 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b088      	sub	sp, #32
 8002d28:	af02      	add	r7, sp, #8
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	4608      	mov	r0, r1
 8002d2e:	4611      	mov	r1, r2
 8002d30:	461a      	mov	r2, r3
 8002d32:	4603      	mov	r3, r0
 8002d34:	817b      	strh	r3, [r7, #10]
 8002d36:	460b      	mov	r3, r1
 8002d38:	813b      	strh	r3, [r7, #8]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b20      	cmp	r3, #32
 8002d48:	f040 80f9 	bne.w	8002f3e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d002      	beq.n	8002d58 <HAL_I2C_Mem_Write+0x34>
 8002d52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d105      	bne.n	8002d64 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d5e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e0ed      	b.n	8002f40 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d101      	bne.n	8002d72 <HAL_I2C_Mem_Write+0x4e>
 8002d6e:	2302      	movs	r3, #2
 8002d70:	e0e6      	b.n	8002f40 <HAL_I2C_Mem_Write+0x21c>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d7a:	f7ff fae5 	bl	8002348 <HAL_GetTick>
 8002d7e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	2319      	movs	r3, #25
 8002d86:	2201      	movs	r2, #1
 8002d88:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 fadd 	bl	800334c <I2C_WaitOnFlagUntilTimeout>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e0d1      	b.n	8002f40 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2221      	movs	r2, #33	@ 0x21
 8002da0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2240      	movs	r2, #64	@ 0x40
 8002da8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a3a      	ldr	r2, [r7, #32]
 8002db6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002dbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002dc4:	88f8      	ldrh	r0, [r7, #6]
 8002dc6:	893a      	ldrh	r2, [r7, #8]
 8002dc8:	8979      	ldrh	r1, [r7, #10]
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	9301      	str	r3, [sp, #4]
 8002dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 f9ed 	bl	80031b4 <I2C_RequestMemoryWrite>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d005      	beq.n	8002dec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e0a9      	b.n	8002f40 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	2bff      	cmp	r3, #255	@ 0xff
 8002df4:	d90e      	bls.n	8002e14 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	22ff      	movs	r2, #255	@ 0xff
 8002dfa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	8979      	ldrh	r1, [r7, #10]
 8002e04:	2300      	movs	r3, #0
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 fc61 	bl	80036d4 <I2C_TransferConfig>
 8002e12:	e00f      	b.n	8002e34 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	8979      	ldrh	r1, [r7, #10]
 8002e26:	2300      	movs	r3, #0
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 fc50 	bl	80036d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 fae0 	bl	80033fe <I2C_WaitOnTXISFlagUntilTimeout>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e07b      	b.n	8002f40 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4c:	781a      	ldrb	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e58:	1c5a      	adds	r2, r3, #1
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	3b01      	subs	r3, #1
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d034      	beq.n	8002eec <HAL_I2C_Mem_Write+0x1c8>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d130      	bne.n	8002eec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e90:	2200      	movs	r2, #0
 8002e92:	2180      	movs	r1, #128	@ 0x80
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 fa59 	bl	800334c <I2C_WaitOnFlagUntilTimeout>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e04d      	b.n	8002f40 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	2bff      	cmp	r3, #255	@ 0xff
 8002eac:	d90e      	bls.n	8002ecc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	22ff      	movs	r2, #255	@ 0xff
 8002eb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	8979      	ldrh	r1, [r7, #10]
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f000 fc05 	bl	80036d4 <I2C_TransferConfig>
 8002eca:	e00f      	b.n	8002eec <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eda:	b2da      	uxtb	r2, r3
 8002edc:	8979      	ldrh	r1, [r7, #10]
 8002ede:	2300      	movs	r3, #0
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 fbf4 	bl	80036d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d19e      	bne.n	8002e34 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f000 fac6 	bl	800348c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e01a      	b.n	8002f40 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6859      	ldr	r1, [r3, #4]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f48 <HAL_I2C_Mem_Write+0x224>)
 8002f1e:	400b      	ands	r3, r1
 8002f20:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2220      	movs	r2, #32
 8002f26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	e000      	b.n	8002f40 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002f3e:	2302      	movs	r3, #2
  }
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	fe00e800 	.word	0xfe00e800

08002f4c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b088      	sub	sp, #32
 8002f50:	af02      	add	r7, sp, #8
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	4608      	mov	r0, r1
 8002f56:	4611      	mov	r1, r2
 8002f58:	461a      	mov	r2, r3
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	817b      	strh	r3, [r7, #10]
 8002f5e:	460b      	mov	r3, r1
 8002f60:	813b      	strh	r3, [r7, #8]
 8002f62:	4613      	mov	r3, r2
 8002f64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b20      	cmp	r3, #32
 8002f70:	f040 80fd 	bne.w	800316e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f74:	6a3b      	ldr	r3, [r7, #32]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d002      	beq.n	8002f80 <HAL_I2C_Mem_Read+0x34>
 8002f7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d105      	bne.n	8002f8c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f86:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e0f1      	b.n	8003170 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d101      	bne.n	8002f9a <HAL_I2C_Mem_Read+0x4e>
 8002f96:	2302      	movs	r3, #2
 8002f98:	e0ea      	b.n	8003170 <HAL_I2C_Mem_Read+0x224>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fa2:	f7ff f9d1 	bl	8002348 <HAL_GetTick>
 8002fa6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	2319      	movs	r3, #25
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 f9c9 	bl	800334c <I2C_WaitOnFlagUntilTimeout>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e0d5      	b.n	8003170 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2222      	movs	r2, #34	@ 0x22
 8002fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2240      	movs	r2, #64	@ 0x40
 8002fd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6a3a      	ldr	r2, [r7, #32]
 8002fde:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002fe4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fec:	88f8      	ldrh	r0, [r7, #6]
 8002fee:	893a      	ldrh	r2, [r7, #8]
 8002ff0:	8979      	ldrh	r1, [r7, #10]
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	9301      	str	r3, [sp, #4]
 8002ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 f92d 	bl	800325c <I2C_RequestMemoryRead>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d005      	beq.n	8003014 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e0ad      	b.n	8003170 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003018:	b29b      	uxth	r3, r3
 800301a:	2bff      	cmp	r3, #255	@ 0xff
 800301c:	d90e      	bls.n	800303c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2201      	movs	r2, #1
 8003022:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003028:	b2da      	uxtb	r2, r3
 800302a:	8979      	ldrh	r1, [r7, #10]
 800302c:	4b52      	ldr	r3, [pc, #328]	@ (8003178 <HAL_I2C_Mem_Read+0x22c>)
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 fb4d 	bl	80036d4 <I2C_TransferConfig>
 800303a:	e00f      	b.n	800305c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003040:	b29a      	uxth	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800304a:	b2da      	uxtb	r2, r3
 800304c:	8979      	ldrh	r1, [r7, #10]
 800304e:	4b4a      	ldr	r3, [pc, #296]	@ (8003178 <HAL_I2C_Mem_Read+0x22c>)
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 fb3c 	bl	80036d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003062:	2200      	movs	r2, #0
 8003064:	2104      	movs	r1, #4
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 f970 	bl	800334c <I2C_WaitOnFlagUntilTimeout>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e07c      	b.n	8003170 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003080:	b2d2      	uxtb	r2, r2
 8003082:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003088:	1c5a      	adds	r2, r3, #1
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003092:	3b01      	subs	r3, #1
 8003094:	b29a      	uxth	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800309e:	b29b      	uxth	r3, r3
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d034      	beq.n	800311c <HAL_I2C_Mem_Read+0x1d0>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d130      	bne.n	800311c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030c0:	2200      	movs	r2, #0
 80030c2:	2180      	movs	r1, #128	@ 0x80
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 f941 	bl	800334c <I2C_WaitOnFlagUntilTimeout>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e04d      	b.n	8003170 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d8:	b29b      	uxth	r3, r3
 80030da:	2bff      	cmp	r3, #255	@ 0xff
 80030dc:	d90e      	bls.n	80030fc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2201      	movs	r2, #1
 80030e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	8979      	ldrh	r1, [r7, #10]
 80030ec:	2300      	movs	r3, #0
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 faed 	bl	80036d4 <I2C_TransferConfig>
 80030fa:	e00f      	b.n	800311c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003100:	b29a      	uxth	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800310a:	b2da      	uxtb	r2, r3
 800310c:	8979      	ldrh	r1, [r7, #10]
 800310e:	2300      	movs	r3, #0
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 fadc 	bl	80036d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003120:	b29b      	uxth	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d19a      	bne.n	800305c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 f9ae 	bl	800348c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e01a      	b.n	8003170 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2220      	movs	r2, #32
 8003140:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6859      	ldr	r1, [r3, #4]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	4b0b      	ldr	r3, [pc, #44]	@ (800317c <HAL_I2C_Mem_Read+0x230>)
 800314e:	400b      	ands	r3, r1
 8003150:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2220      	movs	r2, #32
 8003156:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	e000      	b.n	8003170 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800316e:	2302      	movs	r3, #2
  }
}
 8003170:	4618      	mov	r0, r3
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	80002400 	.word	0x80002400
 800317c:	fe00e800 	.word	0xfe00e800

08003180 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800318e:	b2db      	uxtb	r3, r3
}
 8003190:	4618      	mov	r0, r3
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af02      	add	r7, sp, #8
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	4608      	mov	r0, r1
 80031be:	4611      	mov	r1, r2
 80031c0:	461a      	mov	r2, r3
 80031c2:	4603      	mov	r3, r0
 80031c4:	817b      	strh	r3, [r7, #10]
 80031c6:	460b      	mov	r3, r1
 80031c8:	813b      	strh	r3, [r7, #8]
 80031ca:	4613      	mov	r3, r2
 80031cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80031ce:	88fb      	ldrh	r3, [r7, #6]
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	8979      	ldrh	r1, [r7, #10]
 80031d4:	4b20      	ldr	r3, [pc, #128]	@ (8003258 <I2C_RequestMemoryWrite+0xa4>)
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f000 fa79 	bl	80036d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031e2:	69fa      	ldr	r2, [r7, #28]
 80031e4:	69b9      	ldr	r1, [r7, #24]
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 f909 	bl	80033fe <I2C_WaitOnTXISFlagUntilTimeout>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e02c      	b.n	8003250 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031f6:	88fb      	ldrh	r3, [r7, #6]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d105      	bne.n	8003208 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031fc:	893b      	ldrh	r3, [r7, #8]
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	629a      	str	r2, [r3, #40]	@ 0x28
 8003206:	e015      	b.n	8003234 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003208:	893b      	ldrh	r3, [r7, #8]
 800320a:	0a1b      	lsrs	r3, r3, #8
 800320c:	b29b      	uxth	r3, r3
 800320e:	b2da      	uxtb	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003216:	69fa      	ldr	r2, [r7, #28]
 8003218:	69b9      	ldr	r1, [r7, #24]
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 f8ef 	bl	80033fe <I2C_WaitOnTXISFlagUntilTimeout>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e012      	b.n	8003250 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800322a:	893b      	ldrh	r3, [r7, #8]
 800322c:	b2da      	uxtb	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	2200      	movs	r2, #0
 800323c:	2180      	movs	r1, #128	@ 0x80
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f000 f884 	bl	800334c <I2C_WaitOnFlagUntilTimeout>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e000      	b.n	8003250 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	80002000 	.word	0x80002000

0800325c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af02      	add	r7, sp, #8
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	4608      	mov	r0, r1
 8003266:	4611      	mov	r1, r2
 8003268:	461a      	mov	r2, r3
 800326a:	4603      	mov	r3, r0
 800326c:	817b      	strh	r3, [r7, #10]
 800326e:	460b      	mov	r3, r1
 8003270:	813b      	strh	r3, [r7, #8]
 8003272:	4613      	mov	r3, r2
 8003274:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003276:	88fb      	ldrh	r3, [r7, #6]
 8003278:	b2da      	uxtb	r2, r3
 800327a:	8979      	ldrh	r1, [r7, #10]
 800327c:	4b20      	ldr	r3, [pc, #128]	@ (8003300 <I2C_RequestMemoryRead+0xa4>)
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	2300      	movs	r3, #0
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f000 fa26 	bl	80036d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003288:	69fa      	ldr	r2, [r7, #28]
 800328a:	69b9      	ldr	r1, [r7, #24]
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 f8b6 	bl	80033fe <I2C_WaitOnTXISFlagUntilTimeout>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e02c      	b.n	80032f6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800329c:	88fb      	ldrh	r3, [r7, #6]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d105      	bne.n	80032ae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032a2:	893b      	ldrh	r3, [r7, #8]
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80032ac:	e015      	b.n	80032da <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80032ae:	893b      	ldrh	r3, [r7, #8]
 80032b0:	0a1b      	lsrs	r3, r3, #8
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032bc:	69fa      	ldr	r2, [r7, #28]
 80032be:	69b9      	ldr	r1, [r7, #24]
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 f89c 	bl	80033fe <I2C_WaitOnTXISFlagUntilTimeout>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e012      	b.n	80032f6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032d0:	893b      	ldrh	r3, [r7, #8]
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	2200      	movs	r2, #0
 80032e2:	2140      	movs	r1, #64	@ 0x40
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 f831 	bl	800334c <I2C_WaitOnFlagUntilTimeout>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e000      	b.n	80032f6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	80002000 	.word	0x80002000

08003304 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b02      	cmp	r3, #2
 8003318:	d103      	bne.n	8003322 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2200      	movs	r2, #0
 8003320:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b01      	cmp	r3, #1
 800332e:	d007      	beq.n	8003340 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699a      	ldr	r2, [r3, #24]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0201 	orr.w	r2, r2, #1
 800333e:	619a      	str	r2, [r3, #24]
  }
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	603b      	str	r3, [r7, #0]
 8003358:	4613      	mov	r3, r2
 800335a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800335c:	e03b      	b.n	80033d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	6839      	ldr	r1, [r7, #0]
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 f8d6 	bl	8003514 <I2C_IsErrorOccurred>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e041      	b.n	80033f6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003378:	d02d      	beq.n	80033d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800337a:	f7fe ffe5 	bl	8002348 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	429a      	cmp	r2, r3
 8003388:	d302      	bcc.n	8003390 <I2C_WaitOnFlagUntilTimeout+0x44>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d122      	bne.n	80033d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	699a      	ldr	r2, [r3, #24]
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	4013      	ands	r3, r2
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	429a      	cmp	r2, r3
 800339e:	bf0c      	ite	eq
 80033a0:	2301      	moveq	r3, #1
 80033a2:	2300      	movne	r3, #0
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	461a      	mov	r2, r3
 80033a8:	79fb      	ldrb	r3, [r7, #7]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d113      	bne.n	80033d6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b2:	f043 0220 	orr.w	r2, r3, #32
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2220      	movs	r2, #32
 80033be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e00f      	b.n	80033f6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	699a      	ldr	r2, [r3, #24]
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	4013      	ands	r3, r2
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	bf0c      	ite	eq
 80033e6:	2301      	moveq	r3, #1
 80033e8:	2300      	movne	r3, #0
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	461a      	mov	r2, r3
 80033ee:	79fb      	ldrb	r3, [r7, #7]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d0b4      	beq.n	800335e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b084      	sub	sp, #16
 8003402:	af00      	add	r7, sp, #0
 8003404:	60f8      	str	r0, [r7, #12]
 8003406:	60b9      	str	r1, [r7, #8]
 8003408:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800340a:	e033      	b.n	8003474 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	68b9      	ldr	r1, [r7, #8]
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f000 f87f 	bl	8003514 <I2C_IsErrorOccurred>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e031      	b.n	8003484 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003426:	d025      	beq.n	8003474 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003428:	f7fe ff8e 	bl	8002348 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	429a      	cmp	r2, r3
 8003436:	d302      	bcc.n	800343e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d11a      	bne.n	8003474 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b02      	cmp	r3, #2
 800344a:	d013      	beq.n	8003474 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003450:	f043 0220 	orr.w	r2, r3, #32
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e007      	b.n	8003484 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b02      	cmp	r3, #2
 8003480:	d1c4      	bne.n	800340c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003498:	e02f      	b.n	80034fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	68b9      	ldr	r1, [r7, #8]
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 f838 	bl	8003514 <I2C_IsErrorOccurred>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e02d      	b.n	800350a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ae:	f7fe ff4b 	bl	8002348 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	68ba      	ldr	r2, [r7, #8]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d302      	bcc.n	80034c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d11a      	bne.n	80034fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	f003 0320 	and.w	r3, r3, #32
 80034ce:	2b20      	cmp	r3, #32
 80034d0:	d013      	beq.n	80034fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d6:	f043 0220 	orr.w	r2, r3, #32
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2220      	movs	r2, #32
 80034e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e007      	b.n	800350a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	f003 0320 	and.w	r3, r3, #32
 8003504:	2b20      	cmp	r3, #32
 8003506:	d1c8      	bne.n	800349a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
	...

08003514 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b08a      	sub	sp, #40	@ 0x28
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003520:	2300      	movs	r3, #0
 8003522:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800352e:	2300      	movs	r3, #0
 8003530:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	f003 0310 	and.w	r3, r3, #16
 800353c:	2b00      	cmp	r3, #0
 800353e:	d068      	beq.n	8003612 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2210      	movs	r2, #16
 8003546:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003548:	e049      	b.n	80035de <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003550:	d045      	beq.n	80035de <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003552:	f7fe fef9 	bl	8002348 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	429a      	cmp	r2, r3
 8003560:	d302      	bcc.n	8003568 <I2C_IsErrorOccurred+0x54>
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d13a      	bne.n	80035de <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003572:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800357a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003586:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800358a:	d121      	bne.n	80035d0 <I2C_IsErrorOccurred+0xbc>
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003592:	d01d      	beq.n	80035d0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003594:	7cfb      	ldrb	r3, [r7, #19]
 8003596:	2b20      	cmp	r3, #32
 8003598:	d01a      	beq.n	80035d0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035a8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80035aa:	f7fe fecd 	bl	8002348 <HAL_GetTick>
 80035ae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035b0:	e00e      	b.n	80035d0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80035b2:	f7fe fec9 	bl	8002348 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b19      	cmp	r3, #25
 80035be:	d907      	bls.n	80035d0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80035c0:	6a3b      	ldr	r3, [r7, #32]
 80035c2:	f043 0320 	orr.w	r3, r3, #32
 80035c6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80035ce:	e006      	b.n	80035de <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	f003 0320 	and.w	r3, r3, #32
 80035da:	2b20      	cmp	r3, #32
 80035dc:	d1e9      	bne.n	80035b2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	f003 0320 	and.w	r3, r3, #32
 80035e8:	2b20      	cmp	r3, #32
 80035ea:	d003      	beq.n	80035f4 <I2C_IsErrorOccurred+0xe0>
 80035ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0aa      	beq.n	800354a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80035f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d103      	bne.n	8003604 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2220      	movs	r2, #32
 8003602:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	f043 0304 	orr.w	r3, r3, #4
 800360a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00b      	beq.n	800363c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	f043 0301 	orr.w	r3, r3, #1
 800362a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003634:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00b      	beq.n	800365e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	f043 0308 	orr.w	r3, r3, #8
 800364c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003656:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00b      	beq.n	8003680 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003668:	6a3b      	ldr	r3, [r7, #32]
 800366a:	f043 0302 	orr.w	r3, r3, #2
 800366e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003678:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003680:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003684:	2b00      	cmp	r3, #0
 8003686:	d01c      	beq.n	80036c2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f7ff fe3b 	bl	8003304 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6859      	ldr	r1, [r3, #4]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	4b0d      	ldr	r3, [pc, #52]	@ (80036d0 <I2C_IsErrorOccurred+0x1bc>)
 800369a:	400b      	ands	r3, r1
 800369c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	431a      	orrs	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80036c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3728      	adds	r7, #40	@ 0x28
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	fe00e800 	.word	0xfe00e800

080036d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b087      	sub	sp, #28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	607b      	str	r3, [r7, #4]
 80036de:	460b      	mov	r3, r1
 80036e0:	817b      	strh	r3, [r7, #10]
 80036e2:	4613      	mov	r3, r2
 80036e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036e6:	897b      	ldrh	r3, [r7, #10]
 80036e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80036ec:	7a7b      	ldrb	r3, [r7, #9]
 80036ee:	041b      	lsls	r3, r3, #16
 80036f0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036f4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036fa:	6a3b      	ldr	r3, [r7, #32]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003702:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	0d5b      	lsrs	r3, r3, #21
 800370e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003712:	4b08      	ldr	r3, [pc, #32]	@ (8003734 <I2C_TransferConfig+0x60>)
 8003714:	430b      	orrs	r3, r1
 8003716:	43db      	mvns	r3, r3
 8003718:	ea02 0103 	and.w	r1, r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	430a      	orrs	r2, r1
 8003724:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003726:	bf00      	nop
 8003728:	371c      	adds	r7, #28
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	03ff63ff 	.word	0x03ff63ff

08003738 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b20      	cmp	r3, #32
 800374c:	d138      	bne.n	80037c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003754:	2b01      	cmp	r3, #1
 8003756:	d101      	bne.n	800375c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003758:	2302      	movs	r3, #2
 800375a:	e032      	b.n	80037c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2224      	movs	r2, #36	@ 0x24
 8003768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 0201 	bic.w	r2, r2, #1
 800377a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800378a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6819      	ldr	r1, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 0201 	orr.w	r2, r2, #1
 80037aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80037bc:	2300      	movs	r3, #0
 80037be:	e000      	b.n	80037c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037c0:	2302      	movs	r3, #2
  }
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037ce:	b480      	push	{r7}
 80037d0:	b085      	sub	sp, #20
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
 80037d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b20      	cmp	r3, #32
 80037e2:	d139      	bne.n	8003858 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d101      	bne.n	80037f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037ee:	2302      	movs	r3, #2
 80037f0:	e033      	b.n	800385a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2224      	movs	r2, #36	@ 0x24
 80037fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 0201 	bic.w	r2, r2, #1
 8003810:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003820:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	021b      	lsls	r3, r3, #8
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	4313      	orrs	r3, r2
 800382a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0201 	orr.w	r2, r2, #1
 8003842:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2220      	movs	r2, #32
 8003848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003854:	2300      	movs	r3, #0
 8003856:	e000      	b.n	800385a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003858:	2302      	movs	r3, #2
  }
}
 800385a:	4618      	mov	r0, r3
 800385c:	3714      	adds	r7, #20
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
	...

08003868 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800386c:	4b04      	ldr	r3, [pc, #16]	@ (8003880 <HAL_PWREx_GetVoltageRange+0x18>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003874:	4618      	mov	r0, r3
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	40007000 	.word	0x40007000

08003884 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003892:	d130      	bne.n	80038f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003894:	4b23      	ldr	r3, [pc, #140]	@ (8003924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800389c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038a0:	d038      	beq.n	8003914 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038a2:	4b20      	ldr	r3, [pc, #128]	@ (8003924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80038aa:	4a1e      	ldr	r2, [pc, #120]	@ (8003924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003928 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2232      	movs	r2, #50	@ 0x32
 80038b8:	fb02 f303 	mul.w	r3, r2, r3
 80038bc:	4a1b      	ldr	r2, [pc, #108]	@ (800392c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80038be:	fba2 2303 	umull	r2, r3, r2, r3
 80038c2:	0c9b      	lsrs	r3, r3, #18
 80038c4:	3301      	adds	r3, #1
 80038c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038c8:	e002      	b.n	80038d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	3b01      	subs	r3, #1
 80038ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038d0:	4b14      	ldr	r3, [pc, #80]	@ (8003924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038dc:	d102      	bne.n	80038e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1f2      	bne.n	80038ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038f0:	d110      	bne.n	8003914 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e00f      	b.n	8003916 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80038f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80038fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003902:	d007      	beq.n	8003914 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003904:	4b07      	ldr	r3, [pc, #28]	@ (8003924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800390c:	4a05      	ldr	r2, [pc, #20]	@ (8003924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800390e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003912:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3714      	adds	r7, #20
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	40007000 	.word	0x40007000
 8003928:	20000000 	.word	0x20000000
 800392c:	431bde83 	.word	0x431bde83

08003930 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b088      	sub	sp, #32
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e3ca      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003942:	4b97      	ldr	r3, [pc, #604]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 030c 	and.w	r3, r3, #12
 800394a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800394c:	4b94      	ldr	r3, [pc, #592]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f003 0303 	and.w	r3, r3, #3
 8003954:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0310 	and.w	r3, r3, #16
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 80e4 	beq.w	8003b2c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d007      	beq.n	800397a <HAL_RCC_OscConfig+0x4a>
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	2b0c      	cmp	r3, #12
 800396e:	f040 808b 	bne.w	8003a88 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2b01      	cmp	r3, #1
 8003976:	f040 8087 	bne.w	8003a88 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800397a:	4b89      	ldr	r3, [pc, #548]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d005      	beq.n	8003992 <HAL_RCC_OscConfig+0x62>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e3a2      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1a      	ldr	r2, [r3, #32]
 8003996:	4b82      	ldr	r3, [pc, #520]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d004      	beq.n	80039ac <HAL_RCC_OscConfig+0x7c>
 80039a2:	4b7f      	ldr	r3, [pc, #508]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039aa:	e005      	b.n	80039b8 <HAL_RCC_OscConfig+0x88>
 80039ac:	4b7c      	ldr	r3, [pc, #496]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 80039ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039b2:	091b      	lsrs	r3, r3, #4
 80039b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d223      	bcs.n	8003a04 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 fd55 	bl	8004470 <RCC_SetFlashLatencyFromMSIRange>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e383      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039d0:	4b73      	ldr	r3, [pc, #460]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a72      	ldr	r2, [pc, #456]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 80039d6:	f043 0308 	orr.w	r3, r3, #8
 80039da:	6013      	str	r3, [r2, #0]
 80039dc:	4b70      	ldr	r3, [pc, #448]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	496d      	ldr	r1, [pc, #436]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039ee:	4b6c      	ldr	r3, [pc, #432]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	021b      	lsls	r3, r3, #8
 80039fc:	4968      	ldr	r1, [pc, #416]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	604b      	str	r3, [r1, #4]
 8003a02:	e025      	b.n	8003a50 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a04:	4b66      	ldr	r3, [pc, #408]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a65      	ldr	r2, [pc, #404]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003a0a:	f043 0308 	orr.w	r3, r3, #8
 8003a0e:	6013      	str	r3, [r2, #0]
 8003a10:	4b63      	ldr	r3, [pc, #396]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	4960      	ldr	r1, [pc, #384]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a22:	4b5f      	ldr	r3, [pc, #380]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	021b      	lsls	r3, r3, #8
 8003a30:	495b      	ldr	r1, [pc, #364]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d109      	bne.n	8003a50 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 fd15 	bl	8004470 <RCC_SetFlashLatencyFromMSIRange>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e343      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a50:	f000 fc4a 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 8003a54:	4602      	mov	r2, r0
 8003a56:	4b52      	ldr	r3, [pc, #328]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	091b      	lsrs	r3, r3, #4
 8003a5c:	f003 030f 	and.w	r3, r3, #15
 8003a60:	4950      	ldr	r1, [pc, #320]	@ (8003ba4 <HAL_RCC_OscConfig+0x274>)
 8003a62:	5ccb      	ldrb	r3, [r1, r3]
 8003a64:	f003 031f 	and.w	r3, r3, #31
 8003a68:	fa22 f303 	lsr.w	r3, r2, r3
 8003a6c:	4a4e      	ldr	r2, [pc, #312]	@ (8003ba8 <HAL_RCC_OscConfig+0x278>)
 8003a6e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a70:	4b4e      	ldr	r3, [pc, #312]	@ (8003bac <HAL_RCC_OscConfig+0x27c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fe fc17 	bl	80022a8 <HAL_InitTick>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a7e:	7bfb      	ldrb	r3, [r7, #15]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d052      	beq.n	8003b2a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003a84:	7bfb      	ldrb	r3, [r7, #15]
 8003a86:	e327      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d032      	beq.n	8003af6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a90:	4b43      	ldr	r3, [pc, #268]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a42      	ldr	r2, [pc, #264]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003a96:	f043 0301 	orr.w	r3, r3, #1
 8003a9a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a9c:	f7fe fc54 	bl	8002348 <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003aa4:	f7fe fc50 	bl	8002348 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e310      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ab6:	4b3a      	ldr	r3, [pc, #232]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0f0      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ac2:	4b37      	ldr	r3, [pc, #220]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a36      	ldr	r2, [pc, #216]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003ac8:	f043 0308 	orr.w	r3, r3, #8
 8003acc:	6013      	str	r3, [r2, #0]
 8003ace:	4b34      	ldr	r3, [pc, #208]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	4931      	ldr	r1, [pc, #196]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ae0:	4b2f      	ldr	r3, [pc, #188]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	021b      	lsls	r3, r3, #8
 8003aee:	492c      	ldr	r1, [pc, #176]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	604b      	str	r3, [r1, #4]
 8003af4:	e01a      	b.n	8003b2c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003af6:	4b2a      	ldr	r3, [pc, #168]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a29      	ldr	r2, [pc, #164]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003afc:	f023 0301 	bic.w	r3, r3, #1
 8003b00:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b02:	f7fe fc21 	bl	8002348 <HAL_GetTick>
 8003b06:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b08:	e008      	b.n	8003b1c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b0a:	f7fe fc1d 	bl	8002348 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e2dd      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b1c:	4b20      	ldr	r3, [pc, #128]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1f0      	bne.n	8003b0a <HAL_RCC_OscConfig+0x1da>
 8003b28:	e000      	b.n	8003b2c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b2a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d074      	beq.n	8003c22 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	2b08      	cmp	r3, #8
 8003b3c:	d005      	beq.n	8003b4a <HAL_RCC_OscConfig+0x21a>
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	2b0c      	cmp	r3, #12
 8003b42:	d10e      	bne.n	8003b62 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	2b03      	cmp	r3, #3
 8003b48:	d10b      	bne.n	8003b62 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b4a:	4b15      	ldr	r3, [pc, #84]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d064      	beq.n	8003c20 <HAL_RCC_OscConfig+0x2f0>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d160      	bne.n	8003c20 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e2ba      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b6a:	d106      	bne.n	8003b7a <HAL_RCC_OscConfig+0x24a>
 8003b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a0b      	ldr	r2, [pc, #44]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003b72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b76:	6013      	str	r3, [r2, #0]
 8003b78:	e026      	b.n	8003bc8 <HAL_RCC_OscConfig+0x298>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b82:	d115      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x280>
 8003b84:	4b06      	ldr	r3, [pc, #24]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a05      	ldr	r2, [pc, #20]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003b8a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b8e:	6013      	str	r3, [r2, #0]
 8003b90:	4b03      	ldr	r3, [pc, #12]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a02      	ldr	r2, [pc, #8]	@ (8003ba0 <HAL_RCC_OscConfig+0x270>)
 8003b96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b9a:	6013      	str	r3, [r2, #0]
 8003b9c:	e014      	b.n	8003bc8 <HAL_RCC_OscConfig+0x298>
 8003b9e:	bf00      	nop
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	080068d8 	.word	0x080068d8
 8003ba8:	20000000 	.word	0x20000000
 8003bac:	20000004 	.word	0x20000004
 8003bb0:	4ba0      	ldr	r3, [pc, #640]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a9f      	ldr	r2, [pc, #636]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003bb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bba:	6013      	str	r3, [r2, #0]
 8003bbc:	4b9d      	ldr	r3, [pc, #628]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a9c      	ldr	r2, [pc, #624]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003bc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d013      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd0:	f7fe fbba 	bl	8002348 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bd8:	f7fe fbb6 	bl	8002348 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b64      	cmp	r3, #100	@ 0x64
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e276      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bea:	4b92      	ldr	r3, [pc, #584]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0f0      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x2a8>
 8003bf6:	e014      	b.n	8003c22 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf8:	f7fe fba6 	bl	8002348 <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c00:	f7fe fba2 	bl	8002348 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b64      	cmp	r3, #100	@ 0x64
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e262      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c12:	4b88      	ldr	r3, [pc, #544]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1f0      	bne.n	8003c00 <HAL_RCC_OscConfig+0x2d0>
 8003c1e:	e000      	b.n	8003c22 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d060      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	d005      	beq.n	8003c40 <HAL_RCC_OscConfig+0x310>
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	2b0c      	cmp	r3, #12
 8003c38:	d119      	bne.n	8003c6e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d116      	bne.n	8003c6e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c40:	4b7c      	ldr	r3, [pc, #496]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d005      	beq.n	8003c58 <HAL_RCC_OscConfig+0x328>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e23f      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c58:	4b76      	ldr	r3, [pc, #472]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	061b      	lsls	r3, r3, #24
 8003c66:	4973      	ldr	r1, [pc, #460]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c6c:	e040      	b.n	8003cf0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d023      	beq.n	8003cbe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c76:	4b6f      	ldr	r3, [pc, #444]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a6e      	ldr	r2, [pc, #440]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003c7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c82:	f7fe fb61 	bl	8002348 <HAL_GetTick>
 8003c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c88:	e008      	b.n	8003c9c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c8a:	f7fe fb5d 	bl	8002348 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e21d      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c9c:	4b65      	ldr	r3, [pc, #404]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0f0      	beq.n	8003c8a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ca8:	4b62      	ldr	r3, [pc, #392]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	061b      	lsls	r3, r3, #24
 8003cb6:	495f      	ldr	r1, [pc, #380]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	604b      	str	r3, [r1, #4]
 8003cbc:	e018      	b.n	8003cf0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cbe:	4b5d      	ldr	r3, [pc, #372]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a5c      	ldr	r2, [pc, #368]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003cc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cca:	f7fe fb3d 	bl	8002348 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cd2:	f7fe fb39 	bl	8002348 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e1f9      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ce4:	4b53      	ldr	r3, [pc, #332]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1f0      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0308 	and.w	r3, r3, #8
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d03c      	beq.n	8003d76 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d01c      	beq.n	8003d3e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d04:	4b4b      	ldr	r3, [pc, #300]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d0a:	4a4a      	ldr	r2, [pc, #296]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003d0c:	f043 0301 	orr.w	r3, r3, #1
 8003d10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d14:	f7fe fb18 	bl	8002348 <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d1c:	f7fe fb14 	bl	8002348 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e1d4      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d2e:	4b41      	ldr	r3, [pc, #260]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0ef      	beq.n	8003d1c <HAL_RCC_OscConfig+0x3ec>
 8003d3c:	e01b      	b.n	8003d76 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d3e:	4b3d      	ldr	r3, [pc, #244]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003d40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d44:	4a3b      	ldr	r2, [pc, #236]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003d46:	f023 0301 	bic.w	r3, r3, #1
 8003d4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d4e:	f7fe fafb 	bl	8002348 <HAL_GetTick>
 8003d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d54:	e008      	b.n	8003d68 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d56:	f7fe faf7 	bl	8002348 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d901      	bls.n	8003d68 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e1b7      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d68:	4b32      	ldr	r3, [pc, #200]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1ef      	bne.n	8003d56 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 80a6 	beq.w	8003ed0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d84:	2300      	movs	r3, #0
 8003d86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d88:	4b2a      	ldr	r3, [pc, #168]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10d      	bne.n	8003db0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d94:	4b27      	ldr	r3, [pc, #156]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d98:	4a26      	ldr	r2, [pc, #152]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003d9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003da0:	4b24      	ldr	r3, [pc, #144]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003da4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003da8:	60bb      	str	r3, [r7, #8]
 8003daa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dac:	2301      	movs	r3, #1
 8003dae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003db0:	4b21      	ldr	r3, [pc, #132]	@ (8003e38 <HAL_RCC_OscConfig+0x508>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d118      	bne.n	8003dee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dbc:	4b1e      	ldr	r3, [pc, #120]	@ (8003e38 <HAL_RCC_OscConfig+0x508>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a1d      	ldr	r2, [pc, #116]	@ (8003e38 <HAL_RCC_OscConfig+0x508>)
 8003dc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dc6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dc8:	f7fe fabe 	bl	8002348 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd0:	f7fe faba 	bl	8002348 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e17a      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003de2:	4b15      	ldr	r3, [pc, #84]	@ (8003e38 <HAL_RCC_OscConfig+0x508>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0f0      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d108      	bne.n	8003e08 <HAL_RCC_OscConfig+0x4d8>
 8003df6:	4b0f      	ldr	r3, [pc, #60]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dfc:	4a0d      	ldr	r2, [pc, #52]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003dfe:	f043 0301 	orr.w	r3, r3, #1
 8003e02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e06:	e029      	b.n	8003e5c <HAL_RCC_OscConfig+0x52c>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	2b05      	cmp	r3, #5
 8003e0e:	d115      	bne.n	8003e3c <HAL_RCC_OscConfig+0x50c>
 8003e10:	4b08      	ldr	r3, [pc, #32]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e16:	4a07      	ldr	r2, [pc, #28]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003e18:	f043 0304 	orr.w	r3, r3, #4
 8003e1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e20:	4b04      	ldr	r3, [pc, #16]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e26:	4a03      	ldr	r2, [pc, #12]	@ (8003e34 <HAL_RCC_OscConfig+0x504>)
 8003e28:	f043 0301 	orr.w	r3, r3, #1
 8003e2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e30:	e014      	b.n	8003e5c <HAL_RCC_OscConfig+0x52c>
 8003e32:	bf00      	nop
 8003e34:	40021000 	.word	0x40021000
 8003e38:	40007000 	.word	0x40007000
 8003e3c:	4b9c      	ldr	r3, [pc, #624]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8003e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e42:	4a9b      	ldr	r2, [pc, #620]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8003e44:	f023 0301 	bic.w	r3, r3, #1
 8003e48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e4c:	4b98      	ldr	r3, [pc, #608]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8003e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e52:	4a97      	ldr	r2, [pc, #604]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8003e54:	f023 0304 	bic.w	r3, r3, #4
 8003e58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d016      	beq.n	8003e92 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e64:	f7fe fa70 	bl	8002348 <HAL_GetTick>
 8003e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e6a:	e00a      	b.n	8003e82 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e6c:	f7fe fa6c 	bl	8002348 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e12a      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e82:	4b8b      	ldr	r3, [pc, #556]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8003e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0ed      	beq.n	8003e6c <HAL_RCC_OscConfig+0x53c>
 8003e90:	e015      	b.n	8003ebe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e92:	f7fe fa59 	bl	8002348 <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e98:	e00a      	b.n	8003eb0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e9a:	f7fe fa55 	bl	8002348 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e113      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003eb0:	4b7f      	ldr	r3, [pc, #508]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8003eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1ed      	bne.n	8003e9a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ebe:	7ffb      	ldrb	r3, [r7, #31]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d105      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ec4:	4b7a      	ldr	r3, [pc, #488]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8003ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ec8:	4a79      	ldr	r2, [pc, #484]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8003eca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ece:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 80fe 	beq.w	80040d6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	f040 80d0 	bne.w	8004084 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ee4:	4b72      	ldr	r3, [pc, #456]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f003 0203 	and.w	r2, r3, #3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d130      	bne.n	8003f5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f02:	3b01      	subs	r3, #1
 8003f04:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d127      	bne.n	8003f5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f14:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d11f      	bne.n	8003f5a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003f24:	2a07      	cmp	r2, #7
 8003f26:	bf14      	ite	ne
 8003f28:	2201      	movne	r2, #1
 8003f2a:	2200      	moveq	r2, #0
 8003f2c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d113      	bne.n	8003f5a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f3c:	085b      	lsrs	r3, r3, #1
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d109      	bne.n	8003f5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f50:	085b      	lsrs	r3, r3, #1
 8003f52:	3b01      	subs	r3, #1
 8003f54:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d06e      	beq.n	8004038 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	2b0c      	cmp	r3, #12
 8003f5e:	d069      	beq.n	8004034 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f60:	4b53      	ldr	r3, [pc, #332]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d105      	bne.n	8003f78 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003f6c:	4b50      	ldr	r3, [pc, #320]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e0ad      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f7c:	4b4c      	ldr	r3, [pc, #304]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a4b      	ldr	r2, [pc, #300]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8003f82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f86:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f88:	f7fe f9de 	bl	8002348 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f90:	f7fe f9da 	bl	8002348 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e09a      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fa2:	4b43      	ldr	r3, [pc, #268]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1f0      	bne.n	8003f90 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fae:	4b40      	ldr	r3, [pc, #256]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8003fb0:	68da      	ldr	r2, [r3, #12]
 8003fb2:	4b40      	ldr	r3, [pc, #256]	@ (80040b4 <HAL_RCC_OscConfig+0x784>)
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003fbe:	3a01      	subs	r2, #1
 8003fc0:	0112      	lsls	r2, r2, #4
 8003fc2:	4311      	orrs	r1, r2
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003fc8:	0212      	lsls	r2, r2, #8
 8003fca:	4311      	orrs	r1, r2
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003fd0:	0852      	lsrs	r2, r2, #1
 8003fd2:	3a01      	subs	r2, #1
 8003fd4:	0552      	lsls	r2, r2, #21
 8003fd6:	4311      	orrs	r1, r2
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003fdc:	0852      	lsrs	r2, r2, #1
 8003fde:	3a01      	subs	r2, #1
 8003fe0:	0652      	lsls	r2, r2, #25
 8003fe2:	4311      	orrs	r1, r2
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003fe8:	0912      	lsrs	r2, r2, #4
 8003fea:	0452      	lsls	r2, r2, #17
 8003fec:	430a      	orrs	r2, r1
 8003fee:	4930      	ldr	r1, [pc, #192]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ff4:	4b2e      	ldr	r3, [pc, #184]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a2d      	ldr	r2, [pc, #180]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8003ffa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ffe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004000:	4b2b      	ldr	r3, [pc, #172]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	4a2a      	ldr	r2, [pc, #168]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8004006:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800400a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800400c:	f7fe f99c 	bl	8002348 <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004014:	f7fe f998 	bl	8002348 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e058      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004026:	4b22      	ldr	r3, [pc, #136]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0f0      	beq.n	8004014 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004032:	e050      	b.n	80040d6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e04f      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004038:	4b1d      	ldr	r3, [pc, #116]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d148      	bne.n	80040d6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004044:	4b1a      	ldr	r3, [pc, #104]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a19      	ldr	r2, [pc, #100]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 800404a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800404e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004050:	4b17      	ldr	r3, [pc, #92]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	4a16      	ldr	r2, [pc, #88]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8004056:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800405a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800405c:	f7fe f974 	bl	8002348 <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004064:	f7fe f970 	bl	8002348 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e030      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004076:	4b0e      	ldr	r3, [pc, #56]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d0f0      	beq.n	8004064 <HAL_RCC_OscConfig+0x734>
 8004082:	e028      	b.n	80040d6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	2b0c      	cmp	r3, #12
 8004088:	d023      	beq.n	80040d2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800408a:	4b09      	ldr	r3, [pc, #36]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a08      	ldr	r2, [pc, #32]	@ (80040b0 <HAL_RCC_OscConfig+0x780>)
 8004090:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004094:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004096:	f7fe f957 	bl	8002348 <HAL_GetTick>
 800409a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800409c:	e00c      	b.n	80040b8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800409e:	f7fe f953 	bl	8002348 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d905      	bls.n	80040b8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e013      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
 80040b0:	40021000 	.word	0x40021000
 80040b4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040b8:	4b09      	ldr	r3, [pc, #36]	@ (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1ec      	bne.n	800409e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80040c4:	4b06      	ldr	r3, [pc, #24]	@ (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 80040c6:	68da      	ldr	r2, [r3, #12]
 80040c8:	4905      	ldr	r1, [pc, #20]	@ (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 80040ca:	4b06      	ldr	r3, [pc, #24]	@ (80040e4 <HAL_RCC_OscConfig+0x7b4>)
 80040cc:	4013      	ands	r3, r2
 80040ce:	60cb      	str	r3, [r1, #12]
 80040d0:	e001      	b.n	80040d6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e000      	b.n	80040d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3720      	adds	r7, #32
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40021000 	.word	0x40021000
 80040e4:	feeefffc 	.word	0xfeeefffc

080040e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e0e7      	b.n	80042cc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040fc:	4b75      	ldr	r3, [pc, #468]	@ (80042d4 <HAL_RCC_ClockConfig+0x1ec>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0307 	and.w	r3, r3, #7
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	429a      	cmp	r2, r3
 8004108:	d910      	bls.n	800412c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800410a:	4b72      	ldr	r3, [pc, #456]	@ (80042d4 <HAL_RCC_ClockConfig+0x1ec>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f023 0207 	bic.w	r2, r3, #7
 8004112:	4970      	ldr	r1, [pc, #448]	@ (80042d4 <HAL_RCC_ClockConfig+0x1ec>)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	4313      	orrs	r3, r2
 8004118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800411a:	4b6e      	ldr	r3, [pc, #440]	@ (80042d4 <HAL_RCC_ClockConfig+0x1ec>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0307 	and.w	r3, r3, #7
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	429a      	cmp	r2, r3
 8004126:	d001      	beq.n	800412c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e0cf      	b.n	80042cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d010      	beq.n	800415a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689a      	ldr	r2, [r3, #8]
 800413c:	4b66      	ldr	r3, [pc, #408]	@ (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004144:	429a      	cmp	r2, r3
 8004146:	d908      	bls.n	800415a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004148:	4b63      	ldr	r3, [pc, #396]	@ (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	4960      	ldr	r1, [pc, #384]	@ (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004156:	4313      	orrs	r3, r2
 8004158:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	d04c      	beq.n	8004200 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2b03      	cmp	r3, #3
 800416c:	d107      	bne.n	800417e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800416e:	4b5a      	ldr	r3, [pc, #360]	@ (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d121      	bne.n	80041be <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e0a6      	b.n	80042cc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2b02      	cmp	r3, #2
 8004184:	d107      	bne.n	8004196 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004186:	4b54      	ldr	r3, [pc, #336]	@ (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d115      	bne.n	80041be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e09a      	b.n	80042cc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d107      	bne.n	80041ae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800419e:	4b4e      	ldr	r3, [pc, #312]	@ (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d109      	bne.n	80041be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e08e      	b.n	80042cc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041ae:	4b4a      	ldr	r3, [pc, #296]	@ (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e086      	b.n	80042cc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041be:	4b46      	ldr	r3, [pc, #280]	@ (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f023 0203 	bic.w	r2, r3, #3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	4943      	ldr	r1, [pc, #268]	@ (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041d0:	f7fe f8ba 	bl	8002348 <HAL_GetTick>
 80041d4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041d6:	e00a      	b.n	80041ee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041d8:	f7fe f8b6 	bl	8002348 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e06e      	b.n	80042cc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ee:	4b3a      	ldr	r3, [pc, #232]	@ (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 020c 	and.w	r2, r3, #12
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d1eb      	bne.n	80041d8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d010      	beq.n	800422e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	4b31      	ldr	r3, [pc, #196]	@ (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004218:	429a      	cmp	r2, r3
 800421a:	d208      	bcs.n	800422e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800421c:	4b2e      	ldr	r3, [pc, #184]	@ (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	492b      	ldr	r1, [pc, #172]	@ (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 800422a:	4313      	orrs	r3, r2
 800422c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800422e:	4b29      	ldr	r3, [pc, #164]	@ (80042d4 <HAL_RCC_ClockConfig+0x1ec>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	429a      	cmp	r2, r3
 800423a:	d210      	bcs.n	800425e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800423c:	4b25      	ldr	r3, [pc, #148]	@ (80042d4 <HAL_RCC_ClockConfig+0x1ec>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f023 0207 	bic.w	r2, r3, #7
 8004244:	4923      	ldr	r1, [pc, #140]	@ (80042d4 <HAL_RCC_ClockConfig+0x1ec>)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	4313      	orrs	r3, r2
 800424a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800424c:	4b21      	ldr	r3, [pc, #132]	@ (80042d4 <HAL_RCC_ClockConfig+0x1ec>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0307 	and.w	r3, r3, #7
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d001      	beq.n	800425e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e036      	b.n	80042cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0304 	and.w	r3, r3, #4
 8004266:	2b00      	cmp	r3, #0
 8004268:	d008      	beq.n	800427c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800426a:	4b1b      	ldr	r3, [pc, #108]	@ (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	4918      	ldr	r1, [pc, #96]	@ (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004278:	4313      	orrs	r3, r2
 800427a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0308 	and.w	r3, r3, #8
 8004284:	2b00      	cmp	r3, #0
 8004286:	d009      	beq.n	800429c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004288:	4b13      	ldr	r3, [pc, #76]	@ (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	00db      	lsls	r3, r3, #3
 8004296:	4910      	ldr	r1, [pc, #64]	@ (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004298:	4313      	orrs	r3, r2
 800429a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800429c:	f000 f824 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 80042a0:	4602      	mov	r2, r0
 80042a2:	4b0d      	ldr	r3, [pc, #52]	@ (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	091b      	lsrs	r3, r3, #4
 80042a8:	f003 030f 	and.w	r3, r3, #15
 80042ac:	490b      	ldr	r1, [pc, #44]	@ (80042dc <HAL_RCC_ClockConfig+0x1f4>)
 80042ae:	5ccb      	ldrb	r3, [r1, r3]
 80042b0:	f003 031f 	and.w	r3, r3, #31
 80042b4:	fa22 f303 	lsr.w	r3, r2, r3
 80042b8:	4a09      	ldr	r2, [pc, #36]	@ (80042e0 <HAL_RCC_ClockConfig+0x1f8>)
 80042ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80042bc:	4b09      	ldr	r3, [pc, #36]	@ (80042e4 <HAL_RCC_ClockConfig+0x1fc>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7fd fff1 	bl	80022a8 <HAL_InitTick>
 80042c6:	4603      	mov	r3, r0
 80042c8:	72fb      	strb	r3, [r7, #11]

  return status;
 80042ca:	7afb      	ldrb	r3, [r7, #11]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40022000 	.word	0x40022000
 80042d8:	40021000 	.word	0x40021000
 80042dc:	080068d8 	.word	0x080068d8
 80042e0:	20000000 	.word	0x20000000
 80042e4:	20000004 	.word	0x20000004

080042e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b089      	sub	sp, #36	@ 0x24
 80042ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80042ee:	2300      	movs	r3, #0
 80042f0:	61fb      	str	r3, [r7, #28]
 80042f2:	2300      	movs	r3, #0
 80042f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042f6:	4b3e      	ldr	r3, [pc, #248]	@ (80043f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 030c 	and.w	r3, r3, #12
 80042fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004300:	4b3b      	ldr	r3, [pc, #236]	@ (80043f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f003 0303 	and.w	r3, r3, #3
 8004308:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d005      	beq.n	800431c <HAL_RCC_GetSysClockFreq+0x34>
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	2b0c      	cmp	r3, #12
 8004314:	d121      	bne.n	800435a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d11e      	bne.n	800435a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800431c:	4b34      	ldr	r3, [pc, #208]	@ (80043f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0308 	and.w	r3, r3, #8
 8004324:	2b00      	cmp	r3, #0
 8004326:	d107      	bne.n	8004338 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004328:	4b31      	ldr	r3, [pc, #196]	@ (80043f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800432a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800432e:	0a1b      	lsrs	r3, r3, #8
 8004330:	f003 030f 	and.w	r3, r3, #15
 8004334:	61fb      	str	r3, [r7, #28]
 8004336:	e005      	b.n	8004344 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004338:	4b2d      	ldr	r3, [pc, #180]	@ (80043f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	091b      	lsrs	r3, r3, #4
 800433e:	f003 030f 	and.w	r3, r3, #15
 8004342:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004344:	4a2b      	ldr	r2, [pc, #172]	@ (80043f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800434c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10d      	bne.n	8004370 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004358:	e00a      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	2b04      	cmp	r3, #4
 800435e:	d102      	bne.n	8004366 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004360:	4b25      	ldr	r3, [pc, #148]	@ (80043f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004362:	61bb      	str	r3, [r7, #24]
 8004364:	e004      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	2b08      	cmp	r3, #8
 800436a:	d101      	bne.n	8004370 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800436c:	4b23      	ldr	r3, [pc, #140]	@ (80043fc <HAL_RCC_GetSysClockFreq+0x114>)
 800436e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	2b0c      	cmp	r3, #12
 8004374:	d134      	bne.n	80043e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004376:	4b1e      	ldr	r3, [pc, #120]	@ (80043f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f003 0303 	and.w	r3, r3, #3
 800437e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	2b02      	cmp	r3, #2
 8004384:	d003      	beq.n	800438e <HAL_RCC_GetSysClockFreq+0xa6>
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	2b03      	cmp	r3, #3
 800438a:	d003      	beq.n	8004394 <HAL_RCC_GetSysClockFreq+0xac>
 800438c:	e005      	b.n	800439a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800438e:	4b1a      	ldr	r3, [pc, #104]	@ (80043f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004390:	617b      	str	r3, [r7, #20]
      break;
 8004392:	e005      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004394:	4b19      	ldr	r3, [pc, #100]	@ (80043fc <HAL_RCC_GetSysClockFreq+0x114>)
 8004396:	617b      	str	r3, [r7, #20]
      break;
 8004398:	e002      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	617b      	str	r3, [r7, #20]
      break;
 800439e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043a0:	4b13      	ldr	r3, [pc, #76]	@ (80043f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	091b      	lsrs	r3, r3, #4
 80043a6:	f003 0307 	and.w	r3, r3, #7
 80043aa:	3301      	adds	r3, #1
 80043ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80043ae:	4b10      	ldr	r3, [pc, #64]	@ (80043f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	0a1b      	lsrs	r3, r3, #8
 80043b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	fb03 f202 	mul.w	r2, r3, r2
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043c6:	4b0a      	ldr	r3, [pc, #40]	@ (80043f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	0e5b      	lsrs	r3, r3, #25
 80043cc:	f003 0303 	and.w	r3, r3, #3
 80043d0:	3301      	adds	r3, #1
 80043d2:	005b      	lsls	r3, r3, #1
 80043d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	fbb2 f3f3 	udiv	r3, r2, r3
 80043de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80043e0:	69bb      	ldr	r3, [r7, #24]
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3724      	adds	r7, #36	@ 0x24
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	40021000 	.word	0x40021000
 80043f4:	080068f0 	.word	0x080068f0
 80043f8:	00f42400 	.word	0x00f42400
 80043fc:	007a1200 	.word	0x007a1200

08004400 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004404:	4b03      	ldr	r3, [pc, #12]	@ (8004414 <HAL_RCC_GetHCLKFreq+0x14>)
 8004406:	681b      	ldr	r3, [r3, #0]
}
 8004408:	4618      	mov	r0, r3
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	20000000 	.word	0x20000000

08004418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800441c:	f7ff fff0 	bl	8004400 <HAL_RCC_GetHCLKFreq>
 8004420:	4602      	mov	r2, r0
 8004422:	4b06      	ldr	r3, [pc, #24]	@ (800443c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	0a1b      	lsrs	r3, r3, #8
 8004428:	f003 0307 	and.w	r3, r3, #7
 800442c:	4904      	ldr	r1, [pc, #16]	@ (8004440 <HAL_RCC_GetPCLK1Freq+0x28>)
 800442e:	5ccb      	ldrb	r3, [r1, r3]
 8004430:	f003 031f 	and.w	r3, r3, #31
 8004434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004438:	4618      	mov	r0, r3
 800443a:	bd80      	pop	{r7, pc}
 800443c:	40021000 	.word	0x40021000
 8004440:	080068e8 	.word	0x080068e8

08004444 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004448:	f7ff ffda 	bl	8004400 <HAL_RCC_GetHCLKFreq>
 800444c:	4602      	mov	r2, r0
 800444e:	4b06      	ldr	r3, [pc, #24]	@ (8004468 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	0adb      	lsrs	r3, r3, #11
 8004454:	f003 0307 	and.w	r3, r3, #7
 8004458:	4904      	ldr	r1, [pc, #16]	@ (800446c <HAL_RCC_GetPCLK2Freq+0x28>)
 800445a:	5ccb      	ldrb	r3, [r1, r3]
 800445c:	f003 031f 	and.w	r3, r3, #31
 8004460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004464:	4618      	mov	r0, r3
 8004466:	bd80      	pop	{r7, pc}
 8004468:	40021000 	.word	0x40021000
 800446c:	080068e8 	.word	0x080068e8

08004470 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004478:	2300      	movs	r3, #0
 800447a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800447c:	4b2a      	ldr	r3, [pc, #168]	@ (8004528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800447e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004480:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d003      	beq.n	8004490 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004488:	f7ff f9ee 	bl	8003868 <HAL_PWREx_GetVoltageRange>
 800448c:	6178      	str	r0, [r7, #20]
 800448e:	e014      	b.n	80044ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004490:	4b25      	ldr	r3, [pc, #148]	@ (8004528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004494:	4a24      	ldr	r2, [pc, #144]	@ (8004528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004496:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800449a:	6593      	str	r3, [r2, #88]	@ 0x58
 800449c:	4b22      	ldr	r3, [pc, #136]	@ (8004528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800449e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044a4:	60fb      	str	r3, [r7, #12]
 80044a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80044a8:	f7ff f9de 	bl	8003868 <HAL_PWREx_GetVoltageRange>
 80044ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80044ae:	4b1e      	ldr	r3, [pc, #120]	@ (8004528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044b2:	4a1d      	ldr	r2, [pc, #116]	@ (8004528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044b8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044c0:	d10b      	bne.n	80044da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b80      	cmp	r3, #128	@ 0x80
 80044c6:	d919      	bls.n	80044fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2ba0      	cmp	r3, #160	@ 0xa0
 80044cc:	d902      	bls.n	80044d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044ce:	2302      	movs	r3, #2
 80044d0:	613b      	str	r3, [r7, #16]
 80044d2:	e013      	b.n	80044fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044d4:	2301      	movs	r3, #1
 80044d6:	613b      	str	r3, [r7, #16]
 80044d8:	e010      	b.n	80044fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b80      	cmp	r3, #128	@ 0x80
 80044de:	d902      	bls.n	80044e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80044e0:	2303      	movs	r3, #3
 80044e2:	613b      	str	r3, [r7, #16]
 80044e4:	e00a      	b.n	80044fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b80      	cmp	r3, #128	@ 0x80
 80044ea:	d102      	bne.n	80044f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044ec:	2302      	movs	r3, #2
 80044ee:	613b      	str	r3, [r7, #16]
 80044f0:	e004      	b.n	80044fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b70      	cmp	r3, #112	@ 0x70
 80044f6:	d101      	bne.n	80044fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044f8:	2301      	movs	r3, #1
 80044fa:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80044fc:	4b0b      	ldr	r3, [pc, #44]	@ (800452c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f023 0207 	bic.w	r2, r3, #7
 8004504:	4909      	ldr	r1, [pc, #36]	@ (800452c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	4313      	orrs	r3, r2
 800450a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800450c:	4b07      	ldr	r3, [pc, #28]	@ (800452c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	429a      	cmp	r2, r3
 8004518:	d001      	beq.n	800451e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e000      	b.n	8004520 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3718      	adds	r7, #24
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40021000 	.word	0x40021000
 800452c:	40022000 	.word	0x40022000

08004530 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004538:	2300      	movs	r3, #0
 800453a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800453c:	2300      	movs	r3, #0
 800453e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004548:	2b00      	cmp	r3, #0
 800454a:	d041      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004550:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004554:	d02a      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004556:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800455a:	d824      	bhi.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800455c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004560:	d008      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004562:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004566:	d81e      	bhi.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00a      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800456c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004570:	d010      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004572:	e018      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004574:	4b86      	ldr	r3, [pc, #536]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	4a85      	ldr	r2, [pc, #532]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800457a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800457e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004580:	e015      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	3304      	adds	r3, #4
 8004586:	2100      	movs	r1, #0
 8004588:	4618      	mov	r0, r3
 800458a:	f000 fabb 	bl	8004b04 <RCCEx_PLLSAI1_Config>
 800458e:	4603      	mov	r3, r0
 8004590:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004592:	e00c      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	3320      	adds	r3, #32
 8004598:	2100      	movs	r1, #0
 800459a:	4618      	mov	r0, r3
 800459c:	f000 fba6 	bl	8004cec <RCCEx_PLLSAI2_Config>
 80045a0:	4603      	mov	r3, r0
 80045a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045a4:	e003      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	74fb      	strb	r3, [r7, #19]
      break;
 80045aa:	e000      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80045ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045ae:	7cfb      	ldrb	r3, [r7, #19]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10b      	bne.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045b4:	4b76      	ldr	r3, [pc, #472]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045c2:	4973      	ldr	r1, [pc, #460]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80045ca:	e001      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045cc:	7cfb      	ldrb	r3, [r7, #19]
 80045ce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d041      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80045e4:	d02a      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80045e6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80045ea:	d824      	bhi.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80045ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045f0:	d008      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80045f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045f6:	d81e      	bhi.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00a      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80045fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004600:	d010      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004602:	e018      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004604:	4b62      	ldr	r3, [pc, #392]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	4a61      	ldr	r2, [pc, #388]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800460a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800460e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004610:	e015      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	3304      	adds	r3, #4
 8004616:	2100      	movs	r1, #0
 8004618:	4618      	mov	r0, r3
 800461a:	f000 fa73 	bl	8004b04 <RCCEx_PLLSAI1_Config>
 800461e:	4603      	mov	r3, r0
 8004620:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004622:	e00c      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	3320      	adds	r3, #32
 8004628:	2100      	movs	r1, #0
 800462a:	4618      	mov	r0, r3
 800462c:	f000 fb5e 	bl	8004cec <RCCEx_PLLSAI2_Config>
 8004630:	4603      	mov	r3, r0
 8004632:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004634:	e003      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	74fb      	strb	r3, [r7, #19]
      break;
 800463a:	e000      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800463c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800463e:	7cfb      	ldrb	r3, [r7, #19]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10b      	bne.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004644:	4b52      	ldr	r3, [pc, #328]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800464a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004652:	494f      	ldr	r1, [pc, #316]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004654:	4313      	orrs	r3, r2
 8004656:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800465a:	e001      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800465c:	7cfb      	ldrb	r3, [r7, #19]
 800465e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 80a0 	beq.w	80047ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800466e:	2300      	movs	r3, #0
 8004670:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004672:	4b47      	ldr	r3, [pc, #284]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004676:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800467e:	2301      	movs	r3, #1
 8004680:	e000      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004682:	2300      	movs	r3, #0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00d      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004688:	4b41      	ldr	r3, [pc, #260]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800468a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800468c:	4a40      	ldr	r2, [pc, #256]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800468e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004692:	6593      	str	r3, [r2, #88]	@ 0x58
 8004694:	4b3e      	ldr	r3, [pc, #248]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800469c:	60bb      	str	r3, [r7, #8]
 800469e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046a0:	2301      	movs	r3, #1
 80046a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046a4:	4b3b      	ldr	r3, [pc, #236]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a3a      	ldr	r2, [pc, #232]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046b0:	f7fd fe4a 	bl	8002348 <HAL_GetTick>
 80046b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046b6:	e009      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046b8:	f7fd fe46 	bl	8002348 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d902      	bls.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	74fb      	strb	r3, [r7, #19]
        break;
 80046ca:	e005      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046cc:	4b31      	ldr	r3, [pc, #196]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d0ef      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80046d8:	7cfb      	ldrb	r3, [r7, #19]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d15c      	bne.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046de:	4b2c      	ldr	r3, [pc, #176]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d01f      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d019      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046fc:	4b24      	ldr	r3, [pc, #144]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004702:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004706:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004708:	4b21      	ldr	r3, [pc, #132]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800470a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800470e:	4a20      	ldr	r2, [pc, #128]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004710:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004714:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004718:	4b1d      	ldr	r3, [pc, #116]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800471a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800471e:	4a1c      	ldr	r2, [pc, #112]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004720:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004724:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004728:	4a19      	ldr	r2, [pc, #100]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d016      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800473a:	f7fd fe05 	bl	8002348 <HAL_GetTick>
 800473e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004740:	e00b      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004742:	f7fd fe01 	bl	8002348 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004750:	4293      	cmp	r3, r2
 8004752:	d902      	bls.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	74fb      	strb	r3, [r7, #19]
            break;
 8004758:	e006      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800475a:	4b0d      	ldr	r3, [pc, #52]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800475c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0ec      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004768:	7cfb      	ldrb	r3, [r7, #19]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10c      	bne.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800476e:	4b08      	ldr	r3, [pc, #32]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004770:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004774:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800477e:	4904      	ldr	r1, [pc, #16]	@ (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004780:	4313      	orrs	r3, r2
 8004782:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004786:	e009      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004788:	7cfb      	ldrb	r3, [r7, #19]
 800478a:	74bb      	strb	r3, [r7, #18]
 800478c:	e006      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800478e:	bf00      	nop
 8004790:	40021000 	.word	0x40021000
 8004794:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004798:	7cfb      	ldrb	r3, [r7, #19]
 800479a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800479c:	7c7b      	ldrb	r3, [r7, #17]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d105      	bne.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047a2:	4b9e      	ldr	r3, [pc, #632]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047a6:	4a9d      	ldr	r2, [pc, #628]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047ac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00a      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047ba:	4b98      	ldr	r3, [pc, #608]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c0:	f023 0203 	bic.w	r2, r3, #3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047c8:	4994      	ldr	r1, [pc, #592]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0302 	and.w	r3, r3, #2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00a      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047dc:	4b8f      	ldr	r3, [pc, #572]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e2:	f023 020c 	bic.w	r2, r3, #12
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ea:	498c      	ldr	r1, [pc, #560]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0304 	and.w	r3, r3, #4
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00a      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047fe:	4b87      	ldr	r3, [pc, #540]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004804:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800480c:	4983      	ldr	r1, [pc, #524]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800480e:	4313      	orrs	r3, r2
 8004810:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0308 	and.w	r3, r3, #8
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00a      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004820:	4b7e      	ldr	r3, [pc, #504]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004826:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800482e:	497b      	ldr	r1, [pc, #492]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004830:	4313      	orrs	r3, r2
 8004832:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0310 	and.w	r3, r3, #16
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00a      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004842:	4b76      	ldr	r3, [pc, #472]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004844:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004848:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004850:	4972      	ldr	r1, [pc, #456]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004852:	4313      	orrs	r3, r2
 8004854:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0320 	and.w	r3, r3, #32
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00a      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004864:	4b6d      	ldr	r3, [pc, #436]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800486a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004872:	496a      	ldr	r1, [pc, #424]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004874:	4313      	orrs	r3, r2
 8004876:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00a      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004886:	4b65      	ldr	r3, [pc, #404]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800488c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004894:	4961      	ldr	r1, [pc, #388]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004896:	4313      	orrs	r3, r2
 8004898:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00a      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80048a8:	4b5c      	ldr	r3, [pc, #368]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048b6:	4959      	ldr	r1, [pc, #356]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00a      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048ca:	4b54      	ldr	r3, [pc, #336]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048d0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048d8:	4950      	ldr	r1, [pc, #320]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00a      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048ec:	4b4b      	ldr	r3, [pc, #300]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048f2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048fa:	4948      	ldr	r1, [pc, #288]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00a      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800490e:	4b43      	ldr	r3, [pc, #268]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004910:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004914:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800491c:	493f      	ldr	r1, [pc, #252]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800491e:	4313      	orrs	r3, r2
 8004920:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d028      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004930:	4b3a      	ldr	r3, [pc, #232]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004936:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800493e:	4937      	ldr	r1, [pc, #220]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004940:	4313      	orrs	r3, r2
 8004942:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800494a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800494e:	d106      	bne.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004950:	4b32      	ldr	r3, [pc, #200]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	4a31      	ldr	r2, [pc, #196]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004956:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800495a:	60d3      	str	r3, [r2, #12]
 800495c:	e011      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004962:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004966:	d10c      	bne.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	3304      	adds	r3, #4
 800496c:	2101      	movs	r1, #1
 800496e:	4618      	mov	r0, r3
 8004970:	f000 f8c8 	bl	8004b04 <RCCEx_PLLSAI1_Config>
 8004974:	4603      	mov	r3, r0
 8004976:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004978:	7cfb      	ldrb	r3, [r7, #19]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800497e:	7cfb      	ldrb	r3, [r7, #19]
 8004980:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d028      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800498e:	4b23      	ldr	r3, [pc, #140]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004990:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004994:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800499c:	491f      	ldr	r1, [pc, #124]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049ac:	d106      	bne.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049ae:	4b1b      	ldr	r3, [pc, #108]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	4a1a      	ldr	r2, [pc, #104]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049b8:	60d3      	str	r3, [r2, #12]
 80049ba:	e011      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049c4:	d10c      	bne.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	3304      	adds	r3, #4
 80049ca:	2101      	movs	r1, #1
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 f899 	bl	8004b04 <RCCEx_PLLSAI1_Config>
 80049d2:	4603      	mov	r3, r0
 80049d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049d6:	7cfb      	ldrb	r3, [r7, #19]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d001      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80049dc:	7cfb      	ldrb	r3, [r7, #19]
 80049de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d02b      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049ec:	4b0b      	ldr	r3, [pc, #44]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049fa:	4908      	ldr	r1, [pc, #32]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a0a:	d109      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a0c:	4b03      	ldr	r3, [pc, #12]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	4a02      	ldr	r2, [pc, #8]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a16:	60d3      	str	r3, [r2, #12]
 8004a18:	e014      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004a1a:	bf00      	nop
 8004a1c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a24:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a28:	d10c      	bne.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	3304      	adds	r3, #4
 8004a2e:	2101      	movs	r1, #1
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 f867 	bl	8004b04 <RCCEx_PLLSAI1_Config>
 8004a36:	4603      	mov	r3, r0
 8004a38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a3a:	7cfb      	ldrb	r3, [r7, #19]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004a40:	7cfb      	ldrb	r3, [r7, #19]
 8004a42:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d02f      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a50:	4b2b      	ldr	r3, [pc, #172]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a56:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a5e:	4928      	ldr	r1, [pc, #160]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a6e:	d10d      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	3304      	adds	r3, #4
 8004a74:	2102      	movs	r1, #2
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 f844 	bl	8004b04 <RCCEx_PLLSAI1_Config>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a80:	7cfb      	ldrb	r3, [r7, #19]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d014      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a86:	7cfb      	ldrb	r3, [r7, #19]
 8004a88:	74bb      	strb	r3, [r7, #18]
 8004a8a:	e011      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a94:	d10c      	bne.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	3320      	adds	r3, #32
 8004a9a:	2102      	movs	r1, #2
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 f925 	bl	8004cec <RCCEx_PLLSAI2_Config>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004aa6:	7cfb      	ldrb	r3, [r7, #19]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d001      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004aac:	7cfb      	ldrb	r3, [r7, #19]
 8004aae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00a      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004abc:	4b10      	ldr	r3, [pc, #64]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ac2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004aca:	490d      	ldr	r1, [pc, #52]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00b      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ade:	4b08      	ldr	r3, [pc, #32]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ae4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004aee:	4904      	ldr	r1, [pc, #16]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004af6:	7cbb      	ldrb	r3, [r7, #18]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3718      	adds	r7, #24
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	40021000 	.word	0x40021000

08004b04 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b12:	4b75      	ldr	r3, [pc, #468]	@ (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	f003 0303 	and.w	r3, r3, #3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d018      	beq.n	8004b50 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004b1e:	4b72      	ldr	r3, [pc, #456]	@ (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	f003 0203 	and.w	r2, r3, #3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d10d      	bne.n	8004b4a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
       ||
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d009      	beq.n	8004b4a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004b36:	4b6c      	ldr	r3, [pc, #432]	@ (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	091b      	lsrs	r3, r3, #4
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	1c5a      	adds	r2, r3, #1
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
       ||
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d047      	beq.n	8004bda <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	73fb      	strb	r3, [r7, #15]
 8004b4e:	e044      	b.n	8004bda <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2b03      	cmp	r3, #3
 8004b56:	d018      	beq.n	8004b8a <RCCEx_PLLSAI1_Config+0x86>
 8004b58:	2b03      	cmp	r3, #3
 8004b5a:	d825      	bhi.n	8004ba8 <RCCEx_PLLSAI1_Config+0xa4>
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d002      	beq.n	8004b66 <RCCEx_PLLSAI1_Config+0x62>
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d009      	beq.n	8004b78 <RCCEx_PLLSAI1_Config+0x74>
 8004b64:	e020      	b.n	8004ba8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b66:	4b60      	ldr	r3, [pc, #384]	@ (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d11d      	bne.n	8004bae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b76:	e01a      	b.n	8004bae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b78:	4b5b      	ldr	r3, [pc, #364]	@ (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d116      	bne.n	8004bb2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b88:	e013      	b.n	8004bb2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b8a:	4b57      	ldr	r3, [pc, #348]	@ (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10f      	bne.n	8004bb6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b96:	4b54      	ldr	r3, [pc, #336]	@ (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d109      	bne.n	8004bb6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ba6:	e006      	b.n	8004bb6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	73fb      	strb	r3, [r7, #15]
      break;
 8004bac:	e004      	b.n	8004bb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004bae:	bf00      	nop
 8004bb0:	e002      	b.n	8004bb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004bb2:	bf00      	nop
 8004bb4:	e000      	b.n	8004bb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004bb6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004bb8:	7bfb      	ldrb	r3, [r7, #15]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10d      	bne.n	8004bda <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004bbe:	4b4a      	ldr	r3, [pc, #296]	@ (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6819      	ldr	r1, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	011b      	lsls	r3, r3, #4
 8004bd2:	430b      	orrs	r3, r1
 8004bd4:	4944      	ldr	r1, [pc, #272]	@ (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004bda:	7bfb      	ldrb	r3, [r7, #15]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d17d      	bne.n	8004cdc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004be0:	4b41      	ldr	r3, [pc, #260]	@ (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a40      	ldr	r2, [pc, #256]	@ (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004be6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004bea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bec:	f7fd fbac 	bl	8002348 <HAL_GetTick>
 8004bf0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bf2:	e009      	b.n	8004c08 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bf4:	f7fd fba8 	bl	8002348 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d902      	bls.n	8004c08 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	73fb      	strb	r3, [r7, #15]
        break;
 8004c06:	e005      	b.n	8004c14 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c08:	4b37      	ldr	r3, [pc, #220]	@ (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1ef      	bne.n	8004bf4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c14:	7bfb      	ldrb	r3, [r7, #15]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d160      	bne.n	8004cdc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d111      	bne.n	8004c44 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c20:	4b31      	ldr	r3, [pc, #196]	@ (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004c28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	6892      	ldr	r2, [r2, #8]
 8004c30:	0211      	lsls	r1, r2, #8
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	68d2      	ldr	r2, [r2, #12]
 8004c36:	0912      	lsrs	r2, r2, #4
 8004c38:	0452      	lsls	r2, r2, #17
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	492a      	ldr	r1, [pc, #168]	@ (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	610b      	str	r3, [r1, #16]
 8004c42:	e027      	b.n	8004c94 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d112      	bne.n	8004c70 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c4a:	4b27      	ldr	r3, [pc, #156]	@ (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004c52:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	6892      	ldr	r2, [r2, #8]
 8004c5a:	0211      	lsls	r1, r2, #8
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6912      	ldr	r2, [r2, #16]
 8004c60:	0852      	lsrs	r2, r2, #1
 8004c62:	3a01      	subs	r2, #1
 8004c64:	0552      	lsls	r2, r2, #21
 8004c66:	430a      	orrs	r2, r1
 8004c68:	491f      	ldr	r1, [pc, #124]	@ (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	610b      	str	r3, [r1, #16]
 8004c6e:	e011      	b.n	8004c94 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c70:	4b1d      	ldr	r3, [pc, #116]	@ (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004c78:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	6892      	ldr	r2, [r2, #8]
 8004c80:	0211      	lsls	r1, r2, #8
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	6952      	ldr	r2, [r2, #20]
 8004c86:	0852      	lsrs	r2, r2, #1
 8004c88:	3a01      	subs	r2, #1
 8004c8a:	0652      	lsls	r2, r2, #25
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	4916      	ldr	r1, [pc, #88]	@ (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c94:	4b14      	ldr	r3, [pc, #80]	@ (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a13      	ldr	r2, [pc, #76]	@ (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c9a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca0:	f7fd fb52 	bl	8002348 <HAL_GetTick>
 8004ca4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ca6:	e009      	b.n	8004cbc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ca8:	f7fd fb4e 	bl	8002348 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d902      	bls.n	8004cbc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	73fb      	strb	r3, [r7, #15]
          break;
 8004cba:	e005      	b.n	8004cc8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d0ef      	beq.n	8004ca8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004cc8:	7bfb      	ldrb	r3, [r7, #15]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d106      	bne.n	8004cdc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004cce:	4b06      	ldr	r3, [pc, #24]	@ (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cd0:	691a      	ldr	r2, [r3, #16]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	4904      	ldr	r1, [pc, #16]	@ (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	40021000 	.word	0x40021000

08004cec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004cfa:	4b6a      	ldr	r3, [pc, #424]	@ (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	f003 0303 	and.w	r3, r3, #3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d018      	beq.n	8004d38 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004d06:	4b67      	ldr	r3, [pc, #412]	@ (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	f003 0203 	and.w	r2, r3, #3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d10d      	bne.n	8004d32 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
       ||
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d009      	beq.n	8004d32 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004d1e:	4b61      	ldr	r3, [pc, #388]	@ (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	091b      	lsrs	r3, r3, #4
 8004d24:	f003 0307 	and.w	r3, r3, #7
 8004d28:	1c5a      	adds	r2, r3, #1
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
       ||
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d047      	beq.n	8004dc2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	73fb      	strb	r3, [r7, #15]
 8004d36:	e044      	b.n	8004dc2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2b03      	cmp	r3, #3
 8004d3e:	d018      	beq.n	8004d72 <RCCEx_PLLSAI2_Config+0x86>
 8004d40:	2b03      	cmp	r3, #3
 8004d42:	d825      	bhi.n	8004d90 <RCCEx_PLLSAI2_Config+0xa4>
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d002      	beq.n	8004d4e <RCCEx_PLLSAI2_Config+0x62>
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d009      	beq.n	8004d60 <RCCEx_PLLSAI2_Config+0x74>
 8004d4c:	e020      	b.n	8004d90 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d4e:	4b55      	ldr	r3, [pc, #340]	@ (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d11d      	bne.n	8004d96 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d5e:	e01a      	b.n	8004d96 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d60:	4b50      	ldr	r3, [pc, #320]	@ (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d116      	bne.n	8004d9a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d70:	e013      	b.n	8004d9a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d72:	4b4c      	ldr	r3, [pc, #304]	@ (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10f      	bne.n	8004d9e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d7e:	4b49      	ldr	r3, [pc, #292]	@ (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d109      	bne.n	8004d9e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d8e:	e006      	b.n	8004d9e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	73fb      	strb	r3, [r7, #15]
      break;
 8004d94:	e004      	b.n	8004da0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d96:	bf00      	nop
 8004d98:	e002      	b.n	8004da0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d9a:	bf00      	nop
 8004d9c:	e000      	b.n	8004da0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004da0:	7bfb      	ldrb	r3, [r7, #15]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10d      	bne.n	8004dc2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004da6:	4b3f      	ldr	r3, [pc, #252]	@ (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6819      	ldr	r1, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	3b01      	subs	r3, #1
 8004db8:	011b      	lsls	r3, r3, #4
 8004dba:	430b      	orrs	r3, r1
 8004dbc:	4939      	ldr	r1, [pc, #228]	@ (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004dc2:	7bfb      	ldrb	r3, [r7, #15]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d167      	bne.n	8004e98 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004dc8:	4b36      	ldr	r3, [pc, #216]	@ (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a35      	ldr	r2, [pc, #212]	@ (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dd4:	f7fd fab8 	bl	8002348 <HAL_GetTick>
 8004dd8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004dda:	e009      	b.n	8004df0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ddc:	f7fd fab4 	bl	8002348 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d902      	bls.n	8004df0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	73fb      	strb	r3, [r7, #15]
        break;
 8004dee:	e005      	b.n	8004dfc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004df0:	4b2c      	ldr	r3, [pc, #176]	@ (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1ef      	bne.n	8004ddc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004dfc:	7bfb      	ldrb	r3, [r7, #15]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d14a      	bne.n	8004e98 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d111      	bne.n	8004e2c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e08:	4b26      	ldr	r3, [pc, #152]	@ (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004e10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	6892      	ldr	r2, [r2, #8]
 8004e18:	0211      	lsls	r1, r2, #8
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	68d2      	ldr	r2, [r2, #12]
 8004e1e:	0912      	lsrs	r2, r2, #4
 8004e20:	0452      	lsls	r2, r2, #17
 8004e22:	430a      	orrs	r2, r1
 8004e24:	491f      	ldr	r1, [pc, #124]	@ (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	614b      	str	r3, [r1, #20]
 8004e2a:	e011      	b.n	8004e50 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004e34:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	6892      	ldr	r2, [r2, #8]
 8004e3c:	0211      	lsls	r1, r2, #8
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	6912      	ldr	r2, [r2, #16]
 8004e42:	0852      	lsrs	r2, r2, #1
 8004e44:	3a01      	subs	r2, #1
 8004e46:	0652      	lsls	r2, r2, #25
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	4916      	ldr	r1, [pc, #88]	@ (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004e50:	4b14      	ldr	r3, [pc, #80]	@ (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a13      	ldr	r2, [pc, #76]	@ (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e5c:	f7fd fa74 	bl	8002348 <HAL_GetTick>
 8004e60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e62:	e009      	b.n	8004e78 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e64:	f7fd fa70 	bl	8002348 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d902      	bls.n	8004e78 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	73fb      	strb	r3, [r7, #15]
          break;
 8004e76:	e005      	b.n	8004e84 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e78:	4b0a      	ldr	r3, [pc, #40]	@ (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d0ef      	beq.n	8004e64 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d106      	bne.n	8004e98 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004e8a:	4b06      	ldr	r3, [pc, #24]	@ (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e8c:	695a      	ldr	r2, [r3, #20]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	4904      	ldr	r1, [pc, #16]	@ (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	40021000 	.word	0x40021000

08004ea8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e040      	b.n	8004f3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d106      	bne.n	8004ed0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f7fb fd3a 	bl	8000944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2224      	movs	r2, #36	@ 0x24
 8004ed4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 0201 	bic.w	r2, r2, #1
 8004ee4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d002      	beq.n	8004ef4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 fb7e 	bl	80055f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 f8c3 	bl	8005080 <UART_SetConfig>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d101      	bne.n	8004f04 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e01b      	b.n	8004f3c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685a      	ldr	r2, [r3, #4]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689a      	ldr	r2, [r3, #8]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f042 0201 	orr.w	r2, r2, #1
 8004f32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 fbfd 	bl	8005734 <UART_CheckIdleState>
 8004f3a:	4603      	mov	r3, r0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3708      	adds	r7, #8
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b08a      	sub	sp, #40	@ 0x28
 8004f48:	af02      	add	r7, sp, #8
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	603b      	str	r3, [r7, #0]
 8004f50:	4613      	mov	r3, r2
 8004f52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f58:	2b20      	cmp	r3, #32
 8004f5a:	d177      	bne.n	800504c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d002      	beq.n	8004f68 <HAL_UART_Transmit+0x24>
 8004f62:	88fb      	ldrh	r3, [r7, #6]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d101      	bne.n	8004f6c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e070      	b.n	800504e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2221      	movs	r2, #33	@ 0x21
 8004f78:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f7a:	f7fd f9e5 	bl	8002348 <HAL_GetTick>
 8004f7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	88fa      	ldrh	r2, [r7, #6]
 8004f84:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	88fa      	ldrh	r2, [r7, #6]
 8004f8c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f98:	d108      	bne.n	8004fac <HAL_UART_Transmit+0x68>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d104      	bne.n	8004fac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	61bb      	str	r3, [r7, #24]
 8004faa:	e003      	b.n	8004fb4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004fb4:	e02f      	b.n	8005016 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	2180      	movs	r1, #128	@ 0x80
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f000 fc5f 	bl	8005884 <UART_WaitOnFlagUntilTimeout>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d004      	beq.n	8004fd6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e03b      	b.n	800504e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d10b      	bne.n	8004ff4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	881a      	ldrh	r2, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fe8:	b292      	uxth	r2, r2
 8004fea:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	3302      	adds	r3, #2
 8004ff0:	61bb      	str	r3, [r7, #24]
 8004ff2:	e007      	b.n	8005004 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	781a      	ldrb	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	3301      	adds	r3, #1
 8005002:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800500a:	b29b      	uxth	r3, r3
 800500c:	3b01      	subs	r3, #1
 800500e:	b29a      	uxth	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800501c:	b29b      	uxth	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1c9      	bne.n	8004fb6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	2200      	movs	r2, #0
 800502a:	2140      	movs	r1, #64	@ 0x40
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 fc29 	bl	8005884 <UART_WaitOnFlagUntilTimeout>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d004      	beq.n	8005042 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2220      	movs	r2, #32
 800503c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e005      	b.n	800504e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2220      	movs	r2, #32
 8005046:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005048:	2300      	movs	r3, #0
 800504a:	e000      	b.n	800504e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800504c:	2302      	movs	r3, #2
  }
}
 800504e:	4618      	mov	r0, r3
 8005050:	3720      	adds	r7, #32
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8005056:	b480      	push	{r7}
 8005058:	b085      	sub	sp, #20
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005062:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800506a:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	4313      	orrs	r3, r2
}
 8005072:	4618      	mov	r0, r3
 8005074:	3714      	adds	r7, #20
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
	...

08005080 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005080:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005084:	b08a      	sub	sp, #40	@ 0x28
 8005086:	af00      	add	r7, sp, #0
 8005088:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800508a:	2300      	movs	r3, #0
 800508c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	689a      	ldr	r2, [r3, #8]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	431a      	orrs	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	431a      	orrs	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	69db      	ldr	r3, [r3, #28]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	4ba4      	ldr	r3, [pc, #656]	@ (8005340 <UART_SetConfig+0x2c0>)
 80050b0:	4013      	ands	r3, r2
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	6812      	ldr	r2, [r2, #0]
 80050b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80050b8:	430b      	orrs	r3, r1
 80050ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	68da      	ldr	r2, [r3, #12]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a99      	ldr	r2, [pc, #612]	@ (8005344 <UART_SetConfig+0x2c4>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d004      	beq.n	80050ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050e8:	4313      	orrs	r3, r2
 80050ea:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050fc:	430a      	orrs	r2, r1
 80050fe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a90      	ldr	r2, [pc, #576]	@ (8005348 <UART_SetConfig+0x2c8>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d126      	bne.n	8005158 <UART_SetConfig+0xd8>
 800510a:	4b90      	ldr	r3, [pc, #576]	@ (800534c <UART_SetConfig+0x2cc>)
 800510c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005110:	f003 0303 	and.w	r3, r3, #3
 8005114:	2b03      	cmp	r3, #3
 8005116:	d81b      	bhi.n	8005150 <UART_SetConfig+0xd0>
 8005118:	a201      	add	r2, pc, #4	@ (adr r2, 8005120 <UART_SetConfig+0xa0>)
 800511a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511e:	bf00      	nop
 8005120:	08005131 	.word	0x08005131
 8005124:	08005141 	.word	0x08005141
 8005128:	08005139 	.word	0x08005139
 800512c:	08005149 	.word	0x08005149
 8005130:	2301      	movs	r3, #1
 8005132:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005136:	e116      	b.n	8005366 <UART_SetConfig+0x2e6>
 8005138:	2302      	movs	r3, #2
 800513a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800513e:	e112      	b.n	8005366 <UART_SetConfig+0x2e6>
 8005140:	2304      	movs	r3, #4
 8005142:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005146:	e10e      	b.n	8005366 <UART_SetConfig+0x2e6>
 8005148:	2308      	movs	r3, #8
 800514a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800514e:	e10a      	b.n	8005366 <UART_SetConfig+0x2e6>
 8005150:	2310      	movs	r3, #16
 8005152:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005156:	e106      	b.n	8005366 <UART_SetConfig+0x2e6>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a7c      	ldr	r2, [pc, #496]	@ (8005350 <UART_SetConfig+0x2d0>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d138      	bne.n	80051d4 <UART_SetConfig+0x154>
 8005162:	4b7a      	ldr	r3, [pc, #488]	@ (800534c <UART_SetConfig+0x2cc>)
 8005164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005168:	f003 030c 	and.w	r3, r3, #12
 800516c:	2b0c      	cmp	r3, #12
 800516e:	d82d      	bhi.n	80051cc <UART_SetConfig+0x14c>
 8005170:	a201      	add	r2, pc, #4	@ (adr r2, 8005178 <UART_SetConfig+0xf8>)
 8005172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005176:	bf00      	nop
 8005178:	080051ad 	.word	0x080051ad
 800517c:	080051cd 	.word	0x080051cd
 8005180:	080051cd 	.word	0x080051cd
 8005184:	080051cd 	.word	0x080051cd
 8005188:	080051bd 	.word	0x080051bd
 800518c:	080051cd 	.word	0x080051cd
 8005190:	080051cd 	.word	0x080051cd
 8005194:	080051cd 	.word	0x080051cd
 8005198:	080051b5 	.word	0x080051b5
 800519c:	080051cd 	.word	0x080051cd
 80051a0:	080051cd 	.word	0x080051cd
 80051a4:	080051cd 	.word	0x080051cd
 80051a8:	080051c5 	.word	0x080051c5
 80051ac:	2300      	movs	r3, #0
 80051ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051b2:	e0d8      	b.n	8005366 <UART_SetConfig+0x2e6>
 80051b4:	2302      	movs	r3, #2
 80051b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051ba:	e0d4      	b.n	8005366 <UART_SetConfig+0x2e6>
 80051bc:	2304      	movs	r3, #4
 80051be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051c2:	e0d0      	b.n	8005366 <UART_SetConfig+0x2e6>
 80051c4:	2308      	movs	r3, #8
 80051c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051ca:	e0cc      	b.n	8005366 <UART_SetConfig+0x2e6>
 80051cc:	2310      	movs	r3, #16
 80051ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051d2:	e0c8      	b.n	8005366 <UART_SetConfig+0x2e6>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a5e      	ldr	r2, [pc, #376]	@ (8005354 <UART_SetConfig+0x2d4>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d125      	bne.n	800522a <UART_SetConfig+0x1aa>
 80051de:	4b5b      	ldr	r3, [pc, #364]	@ (800534c <UART_SetConfig+0x2cc>)
 80051e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051e4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80051e8:	2b30      	cmp	r3, #48	@ 0x30
 80051ea:	d016      	beq.n	800521a <UART_SetConfig+0x19a>
 80051ec:	2b30      	cmp	r3, #48	@ 0x30
 80051ee:	d818      	bhi.n	8005222 <UART_SetConfig+0x1a2>
 80051f0:	2b20      	cmp	r3, #32
 80051f2:	d00a      	beq.n	800520a <UART_SetConfig+0x18a>
 80051f4:	2b20      	cmp	r3, #32
 80051f6:	d814      	bhi.n	8005222 <UART_SetConfig+0x1a2>
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d002      	beq.n	8005202 <UART_SetConfig+0x182>
 80051fc:	2b10      	cmp	r3, #16
 80051fe:	d008      	beq.n	8005212 <UART_SetConfig+0x192>
 8005200:	e00f      	b.n	8005222 <UART_SetConfig+0x1a2>
 8005202:	2300      	movs	r3, #0
 8005204:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005208:	e0ad      	b.n	8005366 <UART_SetConfig+0x2e6>
 800520a:	2302      	movs	r3, #2
 800520c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005210:	e0a9      	b.n	8005366 <UART_SetConfig+0x2e6>
 8005212:	2304      	movs	r3, #4
 8005214:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005218:	e0a5      	b.n	8005366 <UART_SetConfig+0x2e6>
 800521a:	2308      	movs	r3, #8
 800521c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005220:	e0a1      	b.n	8005366 <UART_SetConfig+0x2e6>
 8005222:	2310      	movs	r3, #16
 8005224:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005228:	e09d      	b.n	8005366 <UART_SetConfig+0x2e6>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a4a      	ldr	r2, [pc, #296]	@ (8005358 <UART_SetConfig+0x2d8>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d125      	bne.n	8005280 <UART_SetConfig+0x200>
 8005234:	4b45      	ldr	r3, [pc, #276]	@ (800534c <UART_SetConfig+0x2cc>)
 8005236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800523a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800523e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005240:	d016      	beq.n	8005270 <UART_SetConfig+0x1f0>
 8005242:	2bc0      	cmp	r3, #192	@ 0xc0
 8005244:	d818      	bhi.n	8005278 <UART_SetConfig+0x1f8>
 8005246:	2b80      	cmp	r3, #128	@ 0x80
 8005248:	d00a      	beq.n	8005260 <UART_SetConfig+0x1e0>
 800524a:	2b80      	cmp	r3, #128	@ 0x80
 800524c:	d814      	bhi.n	8005278 <UART_SetConfig+0x1f8>
 800524e:	2b00      	cmp	r3, #0
 8005250:	d002      	beq.n	8005258 <UART_SetConfig+0x1d8>
 8005252:	2b40      	cmp	r3, #64	@ 0x40
 8005254:	d008      	beq.n	8005268 <UART_SetConfig+0x1e8>
 8005256:	e00f      	b.n	8005278 <UART_SetConfig+0x1f8>
 8005258:	2300      	movs	r3, #0
 800525a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800525e:	e082      	b.n	8005366 <UART_SetConfig+0x2e6>
 8005260:	2302      	movs	r3, #2
 8005262:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005266:	e07e      	b.n	8005366 <UART_SetConfig+0x2e6>
 8005268:	2304      	movs	r3, #4
 800526a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800526e:	e07a      	b.n	8005366 <UART_SetConfig+0x2e6>
 8005270:	2308      	movs	r3, #8
 8005272:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005276:	e076      	b.n	8005366 <UART_SetConfig+0x2e6>
 8005278:	2310      	movs	r3, #16
 800527a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800527e:	e072      	b.n	8005366 <UART_SetConfig+0x2e6>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a35      	ldr	r2, [pc, #212]	@ (800535c <UART_SetConfig+0x2dc>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d12a      	bne.n	80052e0 <UART_SetConfig+0x260>
 800528a:	4b30      	ldr	r3, [pc, #192]	@ (800534c <UART_SetConfig+0x2cc>)
 800528c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005290:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005294:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005298:	d01a      	beq.n	80052d0 <UART_SetConfig+0x250>
 800529a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800529e:	d81b      	bhi.n	80052d8 <UART_SetConfig+0x258>
 80052a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052a4:	d00c      	beq.n	80052c0 <UART_SetConfig+0x240>
 80052a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052aa:	d815      	bhi.n	80052d8 <UART_SetConfig+0x258>
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d003      	beq.n	80052b8 <UART_SetConfig+0x238>
 80052b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052b4:	d008      	beq.n	80052c8 <UART_SetConfig+0x248>
 80052b6:	e00f      	b.n	80052d8 <UART_SetConfig+0x258>
 80052b8:	2300      	movs	r3, #0
 80052ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052be:	e052      	b.n	8005366 <UART_SetConfig+0x2e6>
 80052c0:	2302      	movs	r3, #2
 80052c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052c6:	e04e      	b.n	8005366 <UART_SetConfig+0x2e6>
 80052c8:	2304      	movs	r3, #4
 80052ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052ce:	e04a      	b.n	8005366 <UART_SetConfig+0x2e6>
 80052d0:	2308      	movs	r3, #8
 80052d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052d6:	e046      	b.n	8005366 <UART_SetConfig+0x2e6>
 80052d8:	2310      	movs	r3, #16
 80052da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052de:	e042      	b.n	8005366 <UART_SetConfig+0x2e6>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a17      	ldr	r2, [pc, #92]	@ (8005344 <UART_SetConfig+0x2c4>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d13a      	bne.n	8005360 <UART_SetConfig+0x2e0>
 80052ea:	4b18      	ldr	r3, [pc, #96]	@ (800534c <UART_SetConfig+0x2cc>)
 80052ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052f0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80052f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80052f8:	d01a      	beq.n	8005330 <UART_SetConfig+0x2b0>
 80052fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80052fe:	d81b      	bhi.n	8005338 <UART_SetConfig+0x2b8>
 8005300:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005304:	d00c      	beq.n	8005320 <UART_SetConfig+0x2a0>
 8005306:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800530a:	d815      	bhi.n	8005338 <UART_SetConfig+0x2b8>
 800530c:	2b00      	cmp	r3, #0
 800530e:	d003      	beq.n	8005318 <UART_SetConfig+0x298>
 8005310:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005314:	d008      	beq.n	8005328 <UART_SetConfig+0x2a8>
 8005316:	e00f      	b.n	8005338 <UART_SetConfig+0x2b8>
 8005318:	2300      	movs	r3, #0
 800531a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800531e:	e022      	b.n	8005366 <UART_SetConfig+0x2e6>
 8005320:	2302      	movs	r3, #2
 8005322:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005326:	e01e      	b.n	8005366 <UART_SetConfig+0x2e6>
 8005328:	2304      	movs	r3, #4
 800532a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800532e:	e01a      	b.n	8005366 <UART_SetConfig+0x2e6>
 8005330:	2308      	movs	r3, #8
 8005332:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005336:	e016      	b.n	8005366 <UART_SetConfig+0x2e6>
 8005338:	2310      	movs	r3, #16
 800533a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800533e:	e012      	b.n	8005366 <UART_SetConfig+0x2e6>
 8005340:	efff69f3 	.word	0xefff69f3
 8005344:	40008000 	.word	0x40008000
 8005348:	40013800 	.word	0x40013800
 800534c:	40021000 	.word	0x40021000
 8005350:	40004400 	.word	0x40004400
 8005354:	40004800 	.word	0x40004800
 8005358:	40004c00 	.word	0x40004c00
 800535c:	40005000 	.word	0x40005000
 8005360:	2310      	movs	r3, #16
 8005362:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a9f      	ldr	r2, [pc, #636]	@ (80055e8 <UART_SetConfig+0x568>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d17a      	bne.n	8005466 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005370:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005374:	2b08      	cmp	r3, #8
 8005376:	d824      	bhi.n	80053c2 <UART_SetConfig+0x342>
 8005378:	a201      	add	r2, pc, #4	@ (adr r2, 8005380 <UART_SetConfig+0x300>)
 800537a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537e:	bf00      	nop
 8005380:	080053a5 	.word	0x080053a5
 8005384:	080053c3 	.word	0x080053c3
 8005388:	080053ad 	.word	0x080053ad
 800538c:	080053c3 	.word	0x080053c3
 8005390:	080053b3 	.word	0x080053b3
 8005394:	080053c3 	.word	0x080053c3
 8005398:	080053c3 	.word	0x080053c3
 800539c:	080053c3 	.word	0x080053c3
 80053a0:	080053bb 	.word	0x080053bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053a4:	f7ff f838 	bl	8004418 <HAL_RCC_GetPCLK1Freq>
 80053a8:	61f8      	str	r0, [r7, #28]
        break;
 80053aa:	e010      	b.n	80053ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053ac:	4b8f      	ldr	r3, [pc, #572]	@ (80055ec <UART_SetConfig+0x56c>)
 80053ae:	61fb      	str	r3, [r7, #28]
        break;
 80053b0:	e00d      	b.n	80053ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053b2:	f7fe ff99 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 80053b6:	61f8      	str	r0, [r7, #28]
        break;
 80053b8:	e009      	b.n	80053ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053be:	61fb      	str	r3, [r7, #28]
        break;
 80053c0:	e005      	b.n	80053ce <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80053c2:	2300      	movs	r3, #0
 80053c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80053cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f000 80fb 	beq.w	80055cc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	685a      	ldr	r2, [r3, #4]
 80053da:	4613      	mov	r3, r2
 80053dc:	005b      	lsls	r3, r3, #1
 80053de:	4413      	add	r3, r2
 80053e0:	69fa      	ldr	r2, [r7, #28]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d305      	bcc.n	80053f2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80053ec:	69fa      	ldr	r2, [r7, #28]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d903      	bls.n	80053fa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80053f8:	e0e8      	b.n	80055cc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	2200      	movs	r2, #0
 80053fe:	461c      	mov	r4, r3
 8005400:	4615      	mov	r5, r2
 8005402:	f04f 0200 	mov.w	r2, #0
 8005406:	f04f 0300 	mov.w	r3, #0
 800540a:	022b      	lsls	r3, r5, #8
 800540c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005410:	0222      	lsls	r2, r4, #8
 8005412:	68f9      	ldr	r1, [r7, #12]
 8005414:	6849      	ldr	r1, [r1, #4]
 8005416:	0849      	lsrs	r1, r1, #1
 8005418:	2000      	movs	r0, #0
 800541a:	4688      	mov	r8, r1
 800541c:	4681      	mov	r9, r0
 800541e:	eb12 0a08 	adds.w	sl, r2, r8
 8005422:	eb43 0b09 	adc.w	fp, r3, r9
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	603b      	str	r3, [r7, #0]
 800542e:	607a      	str	r2, [r7, #4]
 8005430:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005434:	4650      	mov	r0, sl
 8005436:	4659      	mov	r1, fp
 8005438:	f7fa ff1a 	bl	8000270 <__aeabi_uldivmod>
 800543c:	4602      	mov	r2, r0
 800543e:	460b      	mov	r3, r1
 8005440:	4613      	mov	r3, r2
 8005442:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800544a:	d308      	bcc.n	800545e <UART_SetConfig+0x3de>
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005452:	d204      	bcs.n	800545e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	69ba      	ldr	r2, [r7, #24]
 800545a:	60da      	str	r2, [r3, #12]
 800545c:	e0b6      	b.n	80055cc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005464:	e0b2      	b.n	80055cc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800546e:	d15e      	bne.n	800552e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005470:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005474:	2b08      	cmp	r3, #8
 8005476:	d828      	bhi.n	80054ca <UART_SetConfig+0x44a>
 8005478:	a201      	add	r2, pc, #4	@ (adr r2, 8005480 <UART_SetConfig+0x400>)
 800547a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800547e:	bf00      	nop
 8005480:	080054a5 	.word	0x080054a5
 8005484:	080054ad 	.word	0x080054ad
 8005488:	080054b5 	.word	0x080054b5
 800548c:	080054cb 	.word	0x080054cb
 8005490:	080054bb 	.word	0x080054bb
 8005494:	080054cb 	.word	0x080054cb
 8005498:	080054cb 	.word	0x080054cb
 800549c:	080054cb 	.word	0x080054cb
 80054a0:	080054c3 	.word	0x080054c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054a4:	f7fe ffb8 	bl	8004418 <HAL_RCC_GetPCLK1Freq>
 80054a8:	61f8      	str	r0, [r7, #28]
        break;
 80054aa:	e014      	b.n	80054d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054ac:	f7fe ffca 	bl	8004444 <HAL_RCC_GetPCLK2Freq>
 80054b0:	61f8      	str	r0, [r7, #28]
        break;
 80054b2:	e010      	b.n	80054d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054b4:	4b4d      	ldr	r3, [pc, #308]	@ (80055ec <UART_SetConfig+0x56c>)
 80054b6:	61fb      	str	r3, [r7, #28]
        break;
 80054b8:	e00d      	b.n	80054d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054ba:	f7fe ff15 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 80054be:	61f8      	str	r0, [r7, #28]
        break;
 80054c0:	e009      	b.n	80054d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054c6:	61fb      	str	r3, [r7, #28]
        break;
 80054c8:	e005      	b.n	80054d6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80054ca:	2300      	movs	r3, #0
 80054cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80054d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d077      	beq.n	80055cc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	005a      	lsls	r2, r3, #1
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	085b      	lsrs	r3, r3, #1
 80054e6:	441a      	add	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	2b0f      	cmp	r3, #15
 80054f6:	d916      	bls.n	8005526 <UART_SetConfig+0x4a6>
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054fe:	d212      	bcs.n	8005526 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	b29b      	uxth	r3, r3
 8005504:	f023 030f 	bic.w	r3, r3, #15
 8005508:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	085b      	lsrs	r3, r3, #1
 800550e:	b29b      	uxth	r3, r3
 8005510:	f003 0307 	and.w	r3, r3, #7
 8005514:	b29a      	uxth	r2, r3
 8005516:	8afb      	ldrh	r3, [r7, #22]
 8005518:	4313      	orrs	r3, r2
 800551a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	8afa      	ldrh	r2, [r7, #22]
 8005522:	60da      	str	r2, [r3, #12]
 8005524:	e052      	b.n	80055cc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800552c:	e04e      	b.n	80055cc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800552e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005532:	2b08      	cmp	r3, #8
 8005534:	d827      	bhi.n	8005586 <UART_SetConfig+0x506>
 8005536:	a201      	add	r2, pc, #4	@ (adr r2, 800553c <UART_SetConfig+0x4bc>)
 8005538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553c:	08005561 	.word	0x08005561
 8005540:	08005569 	.word	0x08005569
 8005544:	08005571 	.word	0x08005571
 8005548:	08005587 	.word	0x08005587
 800554c:	08005577 	.word	0x08005577
 8005550:	08005587 	.word	0x08005587
 8005554:	08005587 	.word	0x08005587
 8005558:	08005587 	.word	0x08005587
 800555c:	0800557f 	.word	0x0800557f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005560:	f7fe ff5a 	bl	8004418 <HAL_RCC_GetPCLK1Freq>
 8005564:	61f8      	str	r0, [r7, #28]
        break;
 8005566:	e014      	b.n	8005592 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005568:	f7fe ff6c 	bl	8004444 <HAL_RCC_GetPCLK2Freq>
 800556c:	61f8      	str	r0, [r7, #28]
        break;
 800556e:	e010      	b.n	8005592 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005570:	4b1e      	ldr	r3, [pc, #120]	@ (80055ec <UART_SetConfig+0x56c>)
 8005572:	61fb      	str	r3, [r7, #28]
        break;
 8005574:	e00d      	b.n	8005592 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005576:	f7fe feb7 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 800557a:	61f8      	str	r0, [r7, #28]
        break;
 800557c:	e009      	b.n	8005592 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800557e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005582:	61fb      	str	r3, [r7, #28]
        break;
 8005584:	e005      	b.n	8005592 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005586:	2300      	movs	r3, #0
 8005588:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005590:	bf00      	nop
    }

    if (pclk != 0U)
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d019      	beq.n	80055cc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	085a      	lsrs	r2, r3, #1
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	441a      	add	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055aa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	2b0f      	cmp	r3, #15
 80055b0:	d909      	bls.n	80055c6 <UART_SetConfig+0x546>
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055b8:	d205      	bcs.n	80055c6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	b29a      	uxth	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	60da      	str	r2, [r3, #12]
 80055c4:	e002      	b.n	80055cc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80055d8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3728      	adds	r7, #40	@ 0x28
 80055e0:	46bd      	mov	sp, r7
 80055e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055e6:	bf00      	nop
 80055e8:	40008000 	.word	0x40008000
 80055ec:	00f42400 	.word	0x00f42400

080055f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055fc:	f003 0308 	and.w	r3, r3, #8
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00a      	beq.n	800561a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	430a      	orrs	r2, r1
 8005618:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00a      	beq.n	800563c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	430a      	orrs	r2, r1
 800563a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00a      	beq.n	800565e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	430a      	orrs	r2, r1
 800565c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005662:	f003 0304 	and.w	r3, r3, #4
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00a      	beq.n	8005680 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	430a      	orrs	r2, r1
 800567e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005684:	f003 0310 	and.w	r3, r3, #16
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00a      	beq.n	80056a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	430a      	orrs	r2, r1
 80056a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a6:	f003 0320 	and.w	r3, r3, #32
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00a      	beq.n	80056c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	430a      	orrs	r2, r1
 80056c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d01a      	beq.n	8005706 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	430a      	orrs	r2, r1
 80056e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056ee:	d10a      	bne.n	8005706 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	430a      	orrs	r2, r1
 8005704:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800570a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00a      	beq.n	8005728 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	430a      	orrs	r2, r1
 8005726:	605a      	str	r2, [r3, #4]
  }
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b098      	sub	sp, #96	@ 0x60
 8005738:	af02      	add	r7, sp, #8
 800573a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005744:	f7fc fe00 	bl	8002348 <HAL_GetTick>
 8005748:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0308 	and.w	r3, r3, #8
 8005754:	2b08      	cmp	r3, #8
 8005756:	d12e      	bne.n	80057b6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005758:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800575c:	9300      	str	r3, [sp, #0]
 800575e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005760:	2200      	movs	r2, #0
 8005762:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f88c 	bl	8005884 <UART_WaitOnFlagUntilTimeout>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d021      	beq.n	80057b6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800577a:	e853 3f00 	ldrex	r3, [r3]
 800577e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005782:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005786:	653b      	str	r3, [r7, #80]	@ 0x50
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	461a      	mov	r2, r3
 800578e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005790:	647b      	str	r3, [r7, #68]	@ 0x44
 8005792:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005794:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005796:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005798:	e841 2300 	strex	r3, r2, [r1]
 800579c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800579e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1e6      	bne.n	8005772 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2220      	movs	r2, #32
 80057a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e062      	b.n	800587c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0304 	and.w	r3, r3, #4
 80057c0:	2b04      	cmp	r3, #4
 80057c2:	d149      	bne.n	8005858 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80057c8:	9300      	str	r3, [sp, #0]
 80057ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057cc:	2200      	movs	r2, #0
 80057ce:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f856 	bl	8005884 <UART_WaitOnFlagUntilTimeout>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d03c      	beq.n	8005858 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e6:	e853 3f00 	ldrex	r3, [r3]
 80057ea:	623b      	str	r3, [r7, #32]
   return(result);
 80057ec:	6a3b      	ldr	r3, [r7, #32]
 80057ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	461a      	mov	r2, r3
 80057fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80057fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005800:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005802:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005804:	e841 2300 	strex	r3, r2, [r1]
 8005808:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800580a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1e6      	bne.n	80057de <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	3308      	adds	r3, #8
 8005816:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	e853 3f00 	ldrex	r3, [r3]
 800581e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f023 0301 	bic.w	r3, r3, #1
 8005826:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3308      	adds	r3, #8
 800582e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005830:	61fa      	str	r2, [r7, #28]
 8005832:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005834:	69b9      	ldr	r1, [r7, #24]
 8005836:	69fa      	ldr	r2, [r7, #28]
 8005838:	e841 2300 	strex	r3, r2, [r1]
 800583c:	617b      	str	r3, [r7, #20]
   return(result);
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1e5      	bne.n	8005810 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2220      	movs	r2, #32
 8005848:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e011      	b.n	800587c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2220      	movs	r2, #32
 800585c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2220      	movs	r2, #32
 8005862:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3758      	adds	r7, #88	@ 0x58
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	603b      	str	r3, [r7, #0]
 8005890:	4613      	mov	r3, r2
 8005892:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005894:	e04f      	b.n	8005936 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800589c:	d04b      	beq.n	8005936 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800589e:	f7fc fd53 	bl	8002348 <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d302      	bcc.n	80058b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d101      	bne.n	80058b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e04e      	b.n	8005956 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0304 	and.w	r3, r3, #4
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d037      	beq.n	8005936 <UART_WaitOnFlagUntilTimeout+0xb2>
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	2b80      	cmp	r3, #128	@ 0x80
 80058ca:	d034      	beq.n	8005936 <UART_WaitOnFlagUntilTimeout+0xb2>
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	2b40      	cmp	r3, #64	@ 0x40
 80058d0:	d031      	beq.n	8005936 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	69db      	ldr	r3, [r3, #28]
 80058d8:	f003 0308 	and.w	r3, r3, #8
 80058dc:	2b08      	cmp	r3, #8
 80058de:	d110      	bne.n	8005902 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2208      	movs	r2, #8
 80058e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f000 f838 	bl	800595e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2208      	movs	r2, #8
 80058f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e029      	b.n	8005956 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	69db      	ldr	r3, [r3, #28]
 8005908:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800590c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005910:	d111      	bne.n	8005936 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800591a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f000 f81e 	bl	800595e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2220      	movs	r2, #32
 8005926:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e00f      	b.n	8005956 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	69da      	ldr	r2, [r3, #28]
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	4013      	ands	r3, r2
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	429a      	cmp	r2, r3
 8005944:	bf0c      	ite	eq
 8005946:	2301      	moveq	r3, #1
 8005948:	2300      	movne	r3, #0
 800594a:	b2db      	uxtb	r3, r3
 800594c:	461a      	mov	r2, r3
 800594e:	79fb      	ldrb	r3, [r7, #7]
 8005950:	429a      	cmp	r2, r3
 8005952:	d0a0      	beq.n	8005896 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800595e:	b480      	push	{r7}
 8005960:	b095      	sub	sp, #84	@ 0x54
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800596e:	e853 3f00 	ldrex	r3, [r3]
 8005972:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005976:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800597a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	461a      	mov	r2, r3
 8005982:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005984:	643b      	str	r3, [r7, #64]	@ 0x40
 8005986:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005988:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800598a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800598c:	e841 2300 	strex	r3, r2, [r1]
 8005990:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1e6      	bne.n	8005966 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	3308      	adds	r3, #8
 800599e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	e853 3f00 	ldrex	r3, [r3]
 80059a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	f023 0301 	bic.w	r3, r3, #1
 80059ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	3308      	adds	r3, #8
 80059b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059c0:	e841 2300 	strex	r3, r2, [r1]
 80059c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80059c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1e5      	bne.n	8005998 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d118      	bne.n	8005a06 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	e853 3f00 	ldrex	r3, [r3]
 80059e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	f023 0310 	bic.w	r3, r3, #16
 80059e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	461a      	mov	r2, r3
 80059f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059f2:	61bb      	str	r3, [r7, #24]
 80059f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f6:	6979      	ldr	r1, [r7, #20]
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	e841 2300 	strex	r3, r2, [r1]
 80059fe:	613b      	str	r3, [r7, #16]
   return(result);
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1e6      	bne.n	80059d4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2220      	movs	r2, #32
 8005a0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005a1a:	bf00      	nop
 8005a1c:	3754      	adds	r7, #84	@ 0x54
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
	...

08005a28 <std>:
 8005a28:	2300      	movs	r3, #0
 8005a2a:	b510      	push	{r4, lr}
 8005a2c:	4604      	mov	r4, r0
 8005a2e:	e9c0 3300 	strd	r3, r3, [r0]
 8005a32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a36:	6083      	str	r3, [r0, #8]
 8005a38:	8181      	strh	r1, [r0, #12]
 8005a3a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005a3c:	81c2      	strh	r2, [r0, #14]
 8005a3e:	6183      	str	r3, [r0, #24]
 8005a40:	4619      	mov	r1, r3
 8005a42:	2208      	movs	r2, #8
 8005a44:	305c      	adds	r0, #92	@ 0x5c
 8005a46:	f000 f906 	bl	8005c56 <memset>
 8005a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a80 <std+0x58>)
 8005a4c:	6263      	str	r3, [r4, #36]	@ 0x24
 8005a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005a84 <std+0x5c>)
 8005a50:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005a52:	4b0d      	ldr	r3, [pc, #52]	@ (8005a88 <std+0x60>)
 8005a54:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005a56:	4b0d      	ldr	r3, [pc, #52]	@ (8005a8c <std+0x64>)
 8005a58:	6323      	str	r3, [r4, #48]	@ 0x30
 8005a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a90 <std+0x68>)
 8005a5c:	6224      	str	r4, [r4, #32]
 8005a5e:	429c      	cmp	r4, r3
 8005a60:	d006      	beq.n	8005a70 <std+0x48>
 8005a62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005a66:	4294      	cmp	r4, r2
 8005a68:	d002      	beq.n	8005a70 <std+0x48>
 8005a6a:	33d0      	adds	r3, #208	@ 0xd0
 8005a6c:	429c      	cmp	r4, r3
 8005a6e:	d105      	bne.n	8005a7c <std+0x54>
 8005a70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a78:	f000 b966 	b.w	8005d48 <__retarget_lock_init_recursive>
 8005a7c:	bd10      	pop	{r4, pc}
 8005a7e:	bf00      	nop
 8005a80:	08005bd1 	.word	0x08005bd1
 8005a84:	08005bf3 	.word	0x08005bf3
 8005a88:	08005c2b 	.word	0x08005c2b
 8005a8c:	08005c4f 	.word	0x08005c4f
 8005a90:	200001ac 	.word	0x200001ac

08005a94 <stdio_exit_handler>:
 8005a94:	4a02      	ldr	r2, [pc, #8]	@ (8005aa0 <stdio_exit_handler+0xc>)
 8005a96:	4903      	ldr	r1, [pc, #12]	@ (8005aa4 <stdio_exit_handler+0x10>)
 8005a98:	4803      	ldr	r0, [pc, #12]	@ (8005aa8 <stdio_exit_handler+0x14>)
 8005a9a:	f000 b869 	b.w	8005b70 <_fwalk_sglue>
 8005a9e:	bf00      	nop
 8005aa0:	2000000c 	.word	0x2000000c
 8005aa4:	080065e9 	.word	0x080065e9
 8005aa8:	2000001c 	.word	0x2000001c

08005aac <cleanup_stdio>:
 8005aac:	6841      	ldr	r1, [r0, #4]
 8005aae:	4b0c      	ldr	r3, [pc, #48]	@ (8005ae0 <cleanup_stdio+0x34>)
 8005ab0:	4299      	cmp	r1, r3
 8005ab2:	b510      	push	{r4, lr}
 8005ab4:	4604      	mov	r4, r0
 8005ab6:	d001      	beq.n	8005abc <cleanup_stdio+0x10>
 8005ab8:	f000 fd96 	bl	80065e8 <_fflush_r>
 8005abc:	68a1      	ldr	r1, [r4, #8]
 8005abe:	4b09      	ldr	r3, [pc, #36]	@ (8005ae4 <cleanup_stdio+0x38>)
 8005ac0:	4299      	cmp	r1, r3
 8005ac2:	d002      	beq.n	8005aca <cleanup_stdio+0x1e>
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	f000 fd8f 	bl	80065e8 <_fflush_r>
 8005aca:	68e1      	ldr	r1, [r4, #12]
 8005acc:	4b06      	ldr	r3, [pc, #24]	@ (8005ae8 <cleanup_stdio+0x3c>)
 8005ace:	4299      	cmp	r1, r3
 8005ad0:	d004      	beq.n	8005adc <cleanup_stdio+0x30>
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ad8:	f000 bd86 	b.w	80065e8 <_fflush_r>
 8005adc:	bd10      	pop	{r4, pc}
 8005ade:	bf00      	nop
 8005ae0:	200001ac 	.word	0x200001ac
 8005ae4:	20000214 	.word	0x20000214
 8005ae8:	2000027c 	.word	0x2000027c

08005aec <global_stdio_init.part.0>:
 8005aec:	b510      	push	{r4, lr}
 8005aee:	4b0b      	ldr	r3, [pc, #44]	@ (8005b1c <global_stdio_init.part.0+0x30>)
 8005af0:	4c0b      	ldr	r4, [pc, #44]	@ (8005b20 <global_stdio_init.part.0+0x34>)
 8005af2:	4a0c      	ldr	r2, [pc, #48]	@ (8005b24 <global_stdio_init.part.0+0x38>)
 8005af4:	601a      	str	r2, [r3, #0]
 8005af6:	4620      	mov	r0, r4
 8005af8:	2200      	movs	r2, #0
 8005afa:	2104      	movs	r1, #4
 8005afc:	f7ff ff94 	bl	8005a28 <std>
 8005b00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005b04:	2201      	movs	r2, #1
 8005b06:	2109      	movs	r1, #9
 8005b08:	f7ff ff8e 	bl	8005a28 <std>
 8005b0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005b10:	2202      	movs	r2, #2
 8005b12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b16:	2112      	movs	r1, #18
 8005b18:	f7ff bf86 	b.w	8005a28 <std>
 8005b1c:	200002e4 	.word	0x200002e4
 8005b20:	200001ac 	.word	0x200001ac
 8005b24:	08005a95 	.word	0x08005a95

08005b28 <__sfp_lock_acquire>:
 8005b28:	4801      	ldr	r0, [pc, #4]	@ (8005b30 <__sfp_lock_acquire+0x8>)
 8005b2a:	f000 b90e 	b.w	8005d4a <__retarget_lock_acquire_recursive>
 8005b2e:	bf00      	nop
 8005b30:	200002ed 	.word	0x200002ed

08005b34 <__sfp_lock_release>:
 8005b34:	4801      	ldr	r0, [pc, #4]	@ (8005b3c <__sfp_lock_release+0x8>)
 8005b36:	f000 b909 	b.w	8005d4c <__retarget_lock_release_recursive>
 8005b3a:	bf00      	nop
 8005b3c:	200002ed 	.word	0x200002ed

08005b40 <__sinit>:
 8005b40:	b510      	push	{r4, lr}
 8005b42:	4604      	mov	r4, r0
 8005b44:	f7ff fff0 	bl	8005b28 <__sfp_lock_acquire>
 8005b48:	6a23      	ldr	r3, [r4, #32]
 8005b4a:	b11b      	cbz	r3, 8005b54 <__sinit+0x14>
 8005b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b50:	f7ff bff0 	b.w	8005b34 <__sfp_lock_release>
 8005b54:	4b04      	ldr	r3, [pc, #16]	@ (8005b68 <__sinit+0x28>)
 8005b56:	6223      	str	r3, [r4, #32]
 8005b58:	4b04      	ldr	r3, [pc, #16]	@ (8005b6c <__sinit+0x2c>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1f5      	bne.n	8005b4c <__sinit+0xc>
 8005b60:	f7ff ffc4 	bl	8005aec <global_stdio_init.part.0>
 8005b64:	e7f2      	b.n	8005b4c <__sinit+0xc>
 8005b66:	bf00      	nop
 8005b68:	08005aad 	.word	0x08005aad
 8005b6c:	200002e4 	.word	0x200002e4

08005b70 <_fwalk_sglue>:
 8005b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b74:	4607      	mov	r7, r0
 8005b76:	4688      	mov	r8, r1
 8005b78:	4614      	mov	r4, r2
 8005b7a:	2600      	movs	r6, #0
 8005b7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b80:	f1b9 0901 	subs.w	r9, r9, #1
 8005b84:	d505      	bpl.n	8005b92 <_fwalk_sglue+0x22>
 8005b86:	6824      	ldr	r4, [r4, #0]
 8005b88:	2c00      	cmp	r4, #0
 8005b8a:	d1f7      	bne.n	8005b7c <_fwalk_sglue+0xc>
 8005b8c:	4630      	mov	r0, r6
 8005b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b92:	89ab      	ldrh	r3, [r5, #12]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d907      	bls.n	8005ba8 <_fwalk_sglue+0x38>
 8005b98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	d003      	beq.n	8005ba8 <_fwalk_sglue+0x38>
 8005ba0:	4629      	mov	r1, r5
 8005ba2:	4638      	mov	r0, r7
 8005ba4:	47c0      	blx	r8
 8005ba6:	4306      	orrs	r6, r0
 8005ba8:	3568      	adds	r5, #104	@ 0x68
 8005baa:	e7e9      	b.n	8005b80 <_fwalk_sglue+0x10>

08005bac <iprintf>:
 8005bac:	b40f      	push	{r0, r1, r2, r3}
 8005bae:	b507      	push	{r0, r1, r2, lr}
 8005bb0:	4906      	ldr	r1, [pc, #24]	@ (8005bcc <iprintf+0x20>)
 8005bb2:	ab04      	add	r3, sp, #16
 8005bb4:	6808      	ldr	r0, [r1, #0]
 8005bb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bba:	6881      	ldr	r1, [r0, #8]
 8005bbc:	9301      	str	r3, [sp, #4]
 8005bbe:	f000 f9e9 	bl	8005f94 <_vfiprintf_r>
 8005bc2:	b003      	add	sp, #12
 8005bc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bc8:	b004      	add	sp, #16
 8005bca:	4770      	bx	lr
 8005bcc:	20000018 	.word	0x20000018

08005bd0 <__sread>:
 8005bd0:	b510      	push	{r4, lr}
 8005bd2:	460c      	mov	r4, r1
 8005bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bd8:	f000 f868 	bl	8005cac <_read_r>
 8005bdc:	2800      	cmp	r0, #0
 8005bde:	bfab      	itete	ge
 8005be0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005be2:	89a3      	ldrhlt	r3, [r4, #12]
 8005be4:	181b      	addge	r3, r3, r0
 8005be6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005bea:	bfac      	ite	ge
 8005bec:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005bee:	81a3      	strhlt	r3, [r4, #12]
 8005bf0:	bd10      	pop	{r4, pc}

08005bf2 <__swrite>:
 8005bf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bf6:	461f      	mov	r7, r3
 8005bf8:	898b      	ldrh	r3, [r1, #12]
 8005bfa:	05db      	lsls	r3, r3, #23
 8005bfc:	4605      	mov	r5, r0
 8005bfe:	460c      	mov	r4, r1
 8005c00:	4616      	mov	r6, r2
 8005c02:	d505      	bpl.n	8005c10 <__swrite+0x1e>
 8005c04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c08:	2302      	movs	r3, #2
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f000 f83c 	bl	8005c88 <_lseek_r>
 8005c10:	89a3      	ldrh	r3, [r4, #12]
 8005c12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c1a:	81a3      	strh	r3, [r4, #12]
 8005c1c:	4632      	mov	r2, r6
 8005c1e:	463b      	mov	r3, r7
 8005c20:	4628      	mov	r0, r5
 8005c22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c26:	f000 b853 	b.w	8005cd0 <_write_r>

08005c2a <__sseek>:
 8005c2a:	b510      	push	{r4, lr}
 8005c2c:	460c      	mov	r4, r1
 8005c2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c32:	f000 f829 	bl	8005c88 <_lseek_r>
 8005c36:	1c43      	adds	r3, r0, #1
 8005c38:	89a3      	ldrh	r3, [r4, #12]
 8005c3a:	bf15      	itete	ne
 8005c3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005c3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005c42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005c46:	81a3      	strheq	r3, [r4, #12]
 8005c48:	bf18      	it	ne
 8005c4a:	81a3      	strhne	r3, [r4, #12]
 8005c4c:	bd10      	pop	{r4, pc}

08005c4e <__sclose>:
 8005c4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c52:	f000 b809 	b.w	8005c68 <_close_r>

08005c56 <memset>:
 8005c56:	4402      	add	r2, r0
 8005c58:	4603      	mov	r3, r0
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d100      	bne.n	8005c60 <memset+0xa>
 8005c5e:	4770      	bx	lr
 8005c60:	f803 1b01 	strb.w	r1, [r3], #1
 8005c64:	e7f9      	b.n	8005c5a <memset+0x4>
	...

08005c68 <_close_r>:
 8005c68:	b538      	push	{r3, r4, r5, lr}
 8005c6a:	4d06      	ldr	r5, [pc, #24]	@ (8005c84 <_close_r+0x1c>)
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	4604      	mov	r4, r0
 8005c70:	4608      	mov	r0, r1
 8005c72:	602b      	str	r3, [r5, #0]
 8005c74:	f7fa ff18 	bl	8000aa8 <_close>
 8005c78:	1c43      	adds	r3, r0, #1
 8005c7a:	d102      	bne.n	8005c82 <_close_r+0x1a>
 8005c7c:	682b      	ldr	r3, [r5, #0]
 8005c7e:	b103      	cbz	r3, 8005c82 <_close_r+0x1a>
 8005c80:	6023      	str	r3, [r4, #0]
 8005c82:	bd38      	pop	{r3, r4, r5, pc}
 8005c84:	200002e8 	.word	0x200002e8

08005c88 <_lseek_r>:
 8005c88:	b538      	push	{r3, r4, r5, lr}
 8005c8a:	4d07      	ldr	r5, [pc, #28]	@ (8005ca8 <_lseek_r+0x20>)
 8005c8c:	4604      	mov	r4, r0
 8005c8e:	4608      	mov	r0, r1
 8005c90:	4611      	mov	r1, r2
 8005c92:	2200      	movs	r2, #0
 8005c94:	602a      	str	r2, [r5, #0]
 8005c96:	461a      	mov	r2, r3
 8005c98:	f7fa ff2d 	bl	8000af6 <_lseek>
 8005c9c:	1c43      	adds	r3, r0, #1
 8005c9e:	d102      	bne.n	8005ca6 <_lseek_r+0x1e>
 8005ca0:	682b      	ldr	r3, [r5, #0]
 8005ca2:	b103      	cbz	r3, 8005ca6 <_lseek_r+0x1e>
 8005ca4:	6023      	str	r3, [r4, #0]
 8005ca6:	bd38      	pop	{r3, r4, r5, pc}
 8005ca8:	200002e8 	.word	0x200002e8

08005cac <_read_r>:
 8005cac:	b538      	push	{r3, r4, r5, lr}
 8005cae:	4d07      	ldr	r5, [pc, #28]	@ (8005ccc <_read_r+0x20>)
 8005cb0:	4604      	mov	r4, r0
 8005cb2:	4608      	mov	r0, r1
 8005cb4:	4611      	mov	r1, r2
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	602a      	str	r2, [r5, #0]
 8005cba:	461a      	mov	r2, r3
 8005cbc:	f7fa fed7 	bl	8000a6e <_read>
 8005cc0:	1c43      	adds	r3, r0, #1
 8005cc2:	d102      	bne.n	8005cca <_read_r+0x1e>
 8005cc4:	682b      	ldr	r3, [r5, #0]
 8005cc6:	b103      	cbz	r3, 8005cca <_read_r+0x1e>
 8005cc8:	6023      	str	r3, [r4, #0]
 8005cca:	bd38      	pop	{r3, r4, r5, pc}
 8005ccc:	200002e8 	.word	0x200002e8

08005cd0 <_write_r>:
 8005cd0:	b538      	push	{r3, r4, r5, lr}
 8005cd2:	4d07      	ldr	r5, [pc, #28]	@ (8005cf0 <_write_r+0x20>)
 8005cd4:	4604      	mov	r4, r0
 8005cd6:	4608      	mov	r0, r1
 8005cd8:	4611      	mov	r1, r2
 8005cda:	2200      	movs	r2, #0
 8005cdc:	602a      	str	r2, [r5, #0]
 8005cde:	461a      	mov	r2, r3
 8005ce0:	f7fa fdea 	bl	80008b8 <_write>
 8005ce4:	1c43      	adds	r3, r0, #1
 8005ce6:	d102      	bne.n	8005cee <_write_r+0x1e>
 8005ce8:	682b      	ldr	r3, [r5, #0]
 8005cea:	b103      	cbz	r3, 8005cee <_write_r+0x1e>
 8005cec:	6023      	str	r3, [r4, #0]
 8005cee:	bd38      	pop	{r3, r4, r5, pc}
 8005cf0:	200002e8 	.word	0x200002e8

08005cf4 <__errno>:
 8005cf4:	4b01      	ldr	r3, [pc, #4]	@ (8005cfc <__errno+0x8>)
 8005cf6:	6818      	ldr	r0, [r3, #0]
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	20000018 	.word	0x20000018

08005d00 <__libc_init_array>:
 8005d00:	b570      	push	{r4, r5, r6, lr}
 8005d02:	4d0d      	ldr	r5, [pc, #52]	@ (8005d38 <__libc_init_array+0x38>)
 8005d04:	4c0d      	ldr	r4, [pc, #52]	@ (8005d3c <__libc_init_array+0x3c>)
 8005d06:	1b64      	subs	r4, r4, r5
 8005d08:	10a4      	asrs	r4, r4, #2
 8005d0a:	2600      	movs	r6, #0
 8005d0c:	42a6      	cmp	r6, r4
 8005d0e:	d109      	bne.n	8005d24 <__libc_init_array+0x24>
 8005d10:	4d0b      	ldr	r5, [pc, #44]	@ (8005d40 <__libc_init_array+0x40>)
 8005d12:	4c0c      	ldr	r4, [pc, #48]	@ (8005d44 <__libc_init_array+0x44>)
 8005d14:	f000 fdb8 	bl	8006888 <_init>
 8005d18:	1b64      	subs	r4, r4, r5
 8005d1a:	10a4      	asrs	r4, r4, #2
 8005d1c:	2600      	movs	r6, #0
 8005d1e:	42a6      	cmp	r6, r4
 8005d20:	d105      	bne.n	8005d2e <__libc_init_array+0x2e>
 8005d22:	bd70      	pop	{r4, r5, r6, pc}
 8005d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d28:	4798      	blx	r3
 8005d2a:	3601      	adds	r6, #1
 8005d2c:	e7ee      	b.n	8005d0c <__libc_init_array+0xc>
 8005d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d32:	4798      	blx	r3
 8005d34:	3601      	adds	r6, #1
 8005d36:	e7f2      	b.n	8005d1e <__libc_init_array+0x1e>
 8005d38:	0800695c 	.word	0x0800695c
 8005d3c:	0800695c 	.word	0x0800695c
 8005d40:	0800695c 	.word	0x0800695c
 8005d44:	08006960 	.word	0x08006960

08005d48 <__retarget_lock_init_recursive>:
 8005d48:	4770      	bx	lr

08005d4a <__retarget_lock_acquire_recursive>:
 8005d4a:	4770      	bx	lr

08005d4c <__retarget_lock_release_recursive>:
 8005d4c:	4770      	bx	lr
	...

08005d50 <_free_r>:
 8005d50:	b538      	push	{r3, r4, r5, lr}
 8005d52:	4605      	mov	r5, r0
 8005d54:	2900      	cmp	r1, #0
 8005d56:	d041      	beq.n	8005ddc <_free_r+0x8c>
 8005d58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d5c:	1f0c      	subs	r4, r1, #4
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	bfb8      	it	lt
 8005d62:	18e4      	addlt	r4, r4, r3
 8005d64:	f000 f8e0 	bl	8005f28 <__malloc_lock>
 8005d68:	4a1d      	ldr	r2, [pc, #116]	@ (8005de0 <_free_r+0x90>)
 8005d6a:	6813      	ldr	r3, [r2, #0]
 8005d6c:	b933      	cbnz	r3, 8005d7c <_free_r+0x2c>
 8005d6e:	6063      	str	r3, [r4, #4]
 8005d70:	6014      	str	r4, [r2, #0]
 8005d72:	4628      	mov	r0, r5
 8005d74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d78:	f000 b8dc 	b.w	8005f34 <__malloc_unlock>
 8005d7c:	42a3      	cmp	r3, r4
 8005d7e:	d908      	bls.n	8005d92 <_free_r+0x42>
 8005d80:	6820      	ldr	r0, [r4, #0]
 8005d82:	1821      	adds	r1, r4, r0
 8005d84:	428b      	cmp	r3, r1
 8005d86:	bf01      	itttt	eq
 8005d88:	6819      	ldreq	r1, [r3, #0]
 8005d8a:	685b      	ldreq	r3, [r3, #4]
 8005d8c:	1809      	addeq	r1, r1, r0
 8005d8e:	6021      	streq	r1, [r4, #0]
 8005d90:	e7ed      	b.n	8005d6e <_free_r+0x1e>
 8005d92:	461a      	mov	r2, r3
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	b10b      	cbz	r3, 8005d9c <_free_r+0x4c>
 8005d98:	42a3      	cmp	r3, r4
 8005d9a:	d9fa      	bls.n	8005d92 <_free_r+0x42>
 8005d9c:	6811      	ldr	r1, [r2, #0]
 8005d9e:	1850      	adds	r0, r2, r1
 8005da0:	42a0      	cmp	r0, r4
 8005da2:	d10b      	bne.n	8005dbc <_free_r+0x6c>
 8005da4:	6820      	ldr	r0, [r4, #0]
 8005da6:	4401      	add	r1, r0
 8005da8:	1850      	adds	r0, r2, r1
 8005daa:	4283      	cmp	r3, r0
 8005dac:	6011      	str	r1, [r2, #0]
 8005dae:	d1e0      	bne.n	8005d72 <_free_r+0x22>
 8005db0:	6818      	ldr	r0, [r3, #0]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	6053      	str	r3, [r2, #4]
 8005db6:	4408      	add	r0, r1
 8005db8:	6010      	str	r0, [r2, #0]
 8005dba:	e7da      	b.n	8005d72 <_free_r+0x22>
 8005dbc:	d902      	bls.n	8005dc4 <_free_r+0x74>
 8005dbe:	230c      	movs	r3, #12
 8005dc0:	602b      	str	r3, [r5, #0]
 8005dc2:	e7d6      	b.n	8005d72 <_free_r+0x22>
 8005dc4:	6820      	ldr	r0, [r4, #0]
 8005dc6:	1821      	adds	r1, r4, r0
 8005dc8:	428b      	cmp	r3, r1
 8005dca:	bf04      	itt	eq
 8005dcc:	6819      	ldreq	r1, [r3, #0]
 8005dce:	685b      	ldreq	r3, [r3, #4]
 8005dd0:	6063      	str	r3, [r4, #4]
 8005dd2:	bf04      	itt	eq
 8005dd4:	1809      	addeq	r1, r1, r0
 8005dd6:	6021      	streq	r1, [r4, #0]
 8005dd8:	6054      	str	r4, [r2, #4]
 8005dda:	e7ca      	b.n	8005d72 <_free_r+0x22>
 8005ddc:	bd38      	pop	{r3, r4, r5, pc}
 8005dde:	bf00      	nop
 8005de0:	200002f4 	.word	0x200002f4

08005de4 <sbrk_aligned>:
 8005de4:	b570      	push	{r4, r5, r6, lr}
 8005de6:	4e0f      	ldr	r6, [pc, #60]	@ (8005e24 <sbrk_aligned+0x40>)
 8005de8:	460c      	mov	r4, r1
 8005dea:	6831      	ldr	r1, [r6, #0]
 8005dec:	4605      	mov	r5, r0
 8005dee:	b911      	cbnz	r1, 8005df6 <sbrk_aligned+0x12>
 8005df0:	f000 fcb6 	bl	8006760 <_sbrk_r>
 8005df4:	6030      	str	r0, [r6, #0]
 8005df6:	4621      	mov	r1, r4
 8005df8:	4628      	mov	r0, r5
 8005dfa:	f000 fcb1 	bl	8006760 <_sbrk_r>
 8005dfe:	1c43      	adds	r3, r0, #1
 8005e00:	d103      	bne.n	8005e0a <sbrk_aligned+0x26>
 8005e02:	f04f 34ff 	mov.w	r4, #4294967295
 8005e06:	4620      	mov	r0, r4
 8005e08:	bd70      	pop	{r4, r5, r6, pc}
 8005e0a:	1cc4      	adds	r4, r0, #3
 8005e0c:	f024 0403 	bic.w	r4, r4, #3
 8005e10:	42a0      	cmp	r0, r4
 8005e12:	d0f8      	beq.n	8005e06 <sbrk_aligned+0x22>
 8005e14:	1a21      	subs	r1, r4, r0
 8005e16:	4628      	mov	r0, r5
 8005e18:	f000 fca2 	bl	8006760 <_sbrk_r>
 8005e1c:	3001      	adds	r0, #1
 8005e1e:	d1f2      	bne.n	8005e06 <sbrk_aligned+0x22>
 8005e20:	e7ef      	b.n	8005e02 <sbrk_aligned+0x1e>
 8005e22:	bf00      	nop
 8005e24:	200002f0 	.word	0x200002f0

08005e28 <_malloc_r>:
 8005e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e2c:	1ccd      	adds	r5, r1, #3
 8005e2e:	f025 0503 	bic.w	r5, r5, #3
 8005e32:	3508      	adds	r5, #8
 8005e34:	2d0c      	cmp	r5, #12
 8005e36:	bf38      	it	cc
 8005e38:	250c      	movcc	r5, #12
 8005e3a:	2d00      	cmp	r5, #0
 8005e3c:	4606      	mov	r6, r0
 8005e3e:	db01      	blt.n	8005e44 <_malloc_r+0x1c>
 8005e40:	42a9      	cmp	r1, r5
 8005e42:	d904      	bls.n	8005e4e <_malloc_r+0x26>
 8005e44:	230c      	movs	r3, #12
 8005e46:	6033      	str	r3, [r6, #0]
 8005e48:	2000      	movs	r0, #0
 8005e4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005f24 <_malloc_r+0xfc>
 8005e52:	f000 f869 	bl	8005f28 <__malloc_lock>
 8005e56:	f8d8 3000 	ldr.w	r3, [r8]
 8005e5a:	461c      	mov	r4, r3
 8005e5c:	bb44      	cbnz	r4, 8005eb0 <_malloc_r+0x88>
 8005e5e:	4629      	mov	r1, r5
 8005e60:	4630      	mov	r0, r6
 8005e62:	f7ff ffbf 	bl	8005de4 <sbrk_aligned>
 8005e66:	1c43      	adds	r3, r0, #1
 8005e68:	4604      	mov	r4, r0
 8005e6a:	d158      	bne.n	8005f1e <_malloc_r+0xf6>
 8005e6c:	f8d8 4000 	ldr.w	r4, [r8]
 8005e70:	4627      	mov	r7, r4
 8005e72:	2f00      	cmp	r7, #0
 8005e74:	d143      	bne.n	8005efe <_malloc_r+0xd6>
 8005e76:	2c00      	cmp	r4, #0
 8005e78:	d04b      	beq.n	8005f12 <_malloc_r+0xea>
 8005e7a:	6823      	ldr	r3, [r4, #0]
 8005e7c:	4639      	mov	r1, r7
 8005e7e:	4630      	mov	r0, r6
 8005e80:	eb04 0903 	add.w	r9, r4, r3
 8005e84:	f000 fc6c 	bl	8006760 <_sbrk_r>
 8005e88:	4581      	cmp	r9, r0
 8005e8a:	d142      	bne.n	8005f12 <_malloc_r+0xea>
 8005e8c:	6821      	ldr	r1, [r4, #0]
 8005e8e:	1a6d      	subs	r5, r5, r1
 8005e90:	4629      	mov	r1, r5
 8005e92:	4630      	mov	r0, r6
 8005e94:	f7ff ffa6 	bl	8005de4 <sbrk_aligned>
 8005e98:	3001      	adds	r0, #1
 8005e9a:	d03a      	beq.n	8005f12 <_malloc_r+0xea>
 8005e9c:	6823      	ldr	r3, [r4, #0]
 8005e9e:	442b      	add	r3, r5
 8005ea0:	6023      	str	r3, [r4, #0]
 8005ea2:	f8d8 3000 	ldr.w	r3, [r8]
 8005ea6:	685a      	ldr	r2, [r3, #4]
 8005ea8:	bb62      	cbnz	r2, 8005f04 <_malloc_r+0xdc>
 8005eaa:	f8c8 7000 	str.w	r7, [r8]
 8005eae:	e00f      	b.n	8005ed0 <_malloc_r+0xa8>
 8005eb0:	6822      	ldr	r2, [r4, #0]
 8005eb2:	1b52      	subs	r2, r2, r5
 8005eb4:	d420      	bmi.n	8005ef8 <_malloc_r+0xd0>
 8005eb6:	2a0b      	cmp	r2, #11
 8005eb8:	d917      	bls.n	8005eea <_malloc_r+0xc2>
 8005eba:	1961      	adds	r1, r4, r5
 8005ebc:	42a3      	cmp	r3, r4
 8005ebe:	6025      	str	r5, [r4, #0]
 8005ec0:	bf18      	it	ne
 8005ec2:	6059      	strne	r1, [r3, #4]
 8005ec4:	6863      	ldr	r3, [r4, #4]
 8005ec6:	bf08      	it	eq
 8005ec8:	f8c8 1000 	streq.w	r1, [r8]
 8005ecc:	5162      	str	r2, [r4, r5]
 8005ece:	604b      	str	r3, [r1, #4]
 8005ed0:	4630      	mov	r0, r6
 8005ed2:	f000 f82f 	bl	8005f34 <__malloc_unlock>
 8005ed6:	f104 000b 	add.w	r0, r4, #11
 8005eda:	1d23      	adds	r3, r4, #4
 8005edc:	f020 0007 	bic.w	r0, r0, #7
 8005ee0:	1ac2      	subs	r2, r0, r3
 8005ee2:	bf1c      	itt	ne
 8005ee4:	1a1b      	subne	r3, r3, r0
 8005ee6:	50a3      	strne	r3, [r4, r2]
 8005ee8:	e7af      	b.n	8005e4a <_malloc_r+0x22>
 8005eea:	6862      	ldr	r2, [r4, #4]
 8005eec:	42a3      	cmp	r3, r4
 8005eee:	bf0c      	ite	eq
 8005ef0:	f8c8 2000 	streq.w	r2, [r8]
 8005ef4:	605a      	strne	r2, [r3, #4]
 8005ef6:	e7eb      	b.n	8005ed0 <_malloc_r+0xa8>
 8005ef8:	4623      	mov	r3, r4
 8005efa:	6864      	ldr	r4, [r4, #4]
 8005efc:	e7ae      	b.n	8005e5c <_malloc_r+0x34>
 8005efe:	463c      	mov	r4, r7
 8005f00:	687f      	ldr	r7, [r7, #4]
 8005f02:	e7b6      	b.n	8005e72 <_malloc_r+0x4a>
 8005f04:	461a      	mov	r2, r3
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	42a3      	cmp	r3, r4
 8005f0a:	d1fb      	bne.n	8005f04 <_malloc_r+0xdc>
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	6053      	str	r3, [r2, #4]
 8005f10:	e7de      	b.n	8005ed0 <_malloc_r+0xa8>
 8005f12:	230c      	movs	r3, #12
 8005f14:	6033      	str	r3, [r6, #0]
 8005f16:	4630      	mov	r0, r6
 8005f18:	f000 f80c 	bl	8005f34 <__malloc_unlock>
 8005f1c:	e794      	b.n	8005e48 <_malloc_r+0x20>
 8005f1e:	6005      	str	r5, [r0, #0]
 8005f20:	e7d6      	b.n	8005ed0 <_malloc_r+0xa8>
 8005f22:	bf00      	nop
 8005f24:	200002f4 	.word	0x200002f4

08005f28 <__malloc_lock>:
 8005f28:	4801      	ldr	r0, [pc, #4]	@ (8005f30 <__malloc_lock+0x8>)
 8005f2a:	f7ff bf0e 	b.w	8005d4a <__retarget_lock_acquire_recursive>
 8005f2e:	bf00      	nop
 8005f30:	200002ec 	.word	0x200002ec

08005f34 <__malloc_unlock>:
 8005f34:	4801      	ldr	r0, [pc, #4]	@ (8005f3c <__malloc_unlock+0x8>)
 8005f36:	f7ff bf09 	b.w	8005d4c <__retarget_lock_release_recursive>
 8005f3a:	bf00      	nop
 8005f3c:	200002ec 	.word	0x200002ec

08005f40 <__sfputc_r>:
 8005f40:	6893      	ldr	r3, [r2, #8]
 8005f42:	3b01      	subs	r3, #1
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	b410      	push	{r4}
 8005f48:	6093      	str	r3, [r2, #8]
 8005f4a:	da08      	bge.n	8005f5e <__sfputc_r+0x1e>
 8005f4c:	6994      	ldr	r4, [r2, #24]
 8005f4e:	42a3      	cmp	r3, r4
 8005f50:	db01      	blt.n	8005f56 <__sfputc_r+0x16>
 8005f52:	290a      	cmp	r1, #10
 8005f54:	d103      	bne.n	8005f5e <__sfputc_r+0x1e>
 8005f56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f5a:	f000 bb6d 	b.w	8006638 <__swbuf_r>
 8005f5e:	6813      	ldr	r3, [r2, #0]
 8005f60:	1c58      	adds	r0, r3, #1
 8005f62:	6010      	str	r0, [r2, #0]
 8005f64:	7019      	strb	r1, [r3, #0]
 8005f66:	4608      	mov	r0, r1
 8005f68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <__sfputs_r>:
 8005f6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f70:	4606      	mov	r6, r0
 8005f72:	460f      	mov	r7, r1
 8005f74:	4614      	mov	r4, r2
 8005f76:	18d5      	adds	r5, r2, r3
 8005f78:	42ac      	cmp	r4, r5
 8005f7a:	d101      	bne.n	8005f80 <__sfputs_r+0x12>
 8005f7c:	2000      	movs	r0, #0
 8005f7e:	e007      	b.n	8005f90 <__sfputs_r+0x22>
 8005f80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f84:	463a      	mov	r2, r7
 8005f86:	4630      	mov	r0, r6
 8005f88:	f7ff ffda 	bl	8005f40 <__sfputc_r>
 8005f8c:	1c43      	adds	r3, r0, #1
 8005f8e:	d1f3      	bne.n	8005f78 <__sfputs_r+0xa>
 8005f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f94 <_vfiprintf_r>:
 8005f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f98:	460d      	mov	r5, r1
 8005f9a:	b09d      	sub	sp, #116	@ 0x74
 8005f9c:	4614      	mov	r4, r2
 8005f9e:	4698      	mov	r8, r3
 8005fa0:	4606      	mov	r6, r0
 8005fa2:	b118      	cbz	r0, 8005fac <_vfiprintf_r+0x18>
 8005fa4:	6a03      	ldr	r3, [r0, #32]
 8005fa6:	b90b      	cbnz	r3, 8005fac <_vfiprintf_r+0x18>
 8005fa8:	f7ff fdca 	bl	8005b40 <__sinit>
 8005fac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005fae:	07d9      	lsls	r1, r3, #31
 8005fb0:	d405      	bmi.n	8005fbe <_vfiprintf_r+0x2a>
 8005fb2:	89ab      	ldrh	r3, [r5, #12]
 8005fb4:	059a      	lsls	r2, r3, #22
 8005fb6:	d402      	bmi.n	8005fbe <_vfiprintf_r+0x2a>
 8005fb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005fba:	f7ff fec6 	bl	8005d4a <__retarget_lock_acquire_recursive>
 8005fbe:	89ab      	ldrh	r3, [r5, #12]
 8005fc0:	071b      	lsls	r3, r3, #28
 8005fc2:	d501      	bpl.n	8005fc8 <_vfiprintf_r+0x34>
 8005fc4:	692b      	ldr	r3, [r5, #16]
 8005fc6:	b99b      	cbnz	r3, 8005ff0 <_vfiprintf_r+0x5c>
 8005fc8:	4629      	mov	r1, r5
 8005fca:	4630      	mov	r0, r6
 8005fcc:	f000 fb72 	bl	80066b4 <__swsetup_r>
 8005fd0:	b170      	cbz	r0, 8005ff0 <_vfiprintf_r+0x5c>
 8005fd2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005fd4:	07dc      	lsls	r4, r3, #31
 8005fd6:	d504      	bpl.n	8005fe2 <_vfiprintf_r+0x4e>
 8005fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fdc:	b01d      	add	sp, #116	@ 0x74
 8005fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fe2:	89ab      	ldrh	r3, [r5, #12]
 8005fe4:	0598      	lsls	r0, r3, #22
 8005fe6:	d4f7      	bmi.n	8005fd8 <_vfiprintf_r+0x44>
 8005fe8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005fea:	f7ff feaf 	bl	8005d4c <__retarget_lock_release_recursive>
 8005fee:	e7f3      	b.n	8005fd8 <_vfiprintf_r+0x44>
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ff4:	2320      	movs	r3, #32
 8005ff6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005ffa:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ffe:	2330      	movs	r3, #48	@ 0x30
 8006000:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80061b0 <_vfiprintf_r+0x21c>
 8006004:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006008:	f04f 0901 	mov.w	r9, #1
 800600c:	4623      	mov	r3, r4
 800600e:	469a      	mov	sl, r3
 8006010:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006014:	b10a      	cbz	r2, 800601a <_vfiprintf_r+0x86>
 8006016:	2a25      	cmp	r2, #37	@ 0x25
 8006018:	d1f9      	bne.n	800600e <_vfiprintf_r+0x7a>
 800601a:	ebba 0b04 	subs.w	fp, sl, r4
 800601e:	d00b      	beq.n	8006038 <_vfiprintf_r+0xa4>
 8006020:	465b      	mov	r3, fp
 8006022:	4622      	mov	r2, r4
 8006024:	4629      	mov	r1, r5
 8006026:	4630      	mov	r0, r6
 8006028:	f7ff ffa1 	bl	8005f6e <__sfputs_r>
 800602c:	3001      	adds	r0, #1
 800602e:	f000 80a7 	beq.w	8006180 <_vfiprintf_r+0x1ec>
 8006032:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006034:	445a      	add	r2, fp
 8006036:	9209      	str	r2, [sp, #36]	@ 0x24
 8006038:	f89a 3000 	ldrb.w	r3, [sl]
 800603c:	2b00      	cmp	r3, #0
 800603e:	f000 809f 	beq.w	8006180 <_vfiprintf_r+0x1ec>
 8006042:	2300      	movs	r3, #0
 8006044:	f04f 32ff 	mov.w	r2, #4294967295
 8006048:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800604c:	f10a 0a01 	add.w	sl, sl, #1
 8006050:	9304      	str	r3, [sp, #16]
 8006052:	9307      	str	r3, [sp, #28]
 8006054:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006058:	931a      	str	r3, [sp, #104]	@ 0x68
 800605a:	4654      	mov	r4, sl
 800605c:	2205      	movs	r2, #5
 800605e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006062:	4853      	ldr	r0, [pc, #332]	@ (80061b0 <_vfiprintf_r+0x21c>)
 8006064:	f7fa f8b4 	bl	80001d0 <memchr>
 8006068:	9a04      	ldr	r2, [sp, #16]
 800606a:	b9d8      	cbnz	r0, 80060a4 <_vfiprintf_r+0x110>
 800606c:	06d1      	lsls	r1, r2, #27
 800606e:	bf44      	itt	mi
 8006070:	2320      	movmi	r3, #32
 8006072:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006076:	0713      	lsls	r3, r2, #28
 8006078:	bf44      	itt	mi
 800607a:	232b      	movmi	r3, #43	@ 0x2b
 800607c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006080:	f89a 3000 	ldrb.w	r3, [sl]
 8006084:	2b2a      	cmp	r3, #42	@ 0x2a
 8006086:	d015      	beq.n	80060b4 <_vfiprintf_r+0x120>
 8006088:	9a07      	ldr	r2, [sp, #28]
 800608a:	4654      	mov	r4, sl
 800608c:	2000      	movs	r0, #0
 800608e:	f04f 0c0a 	mov.w	ip, #10
 8006092:	4621      	mov	r1, r4
 8006094:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006098:	3b30      	subs	r3, #48	@ 0x30
 800609a:	2b09      	cmp	r3, #9
 800609c:	d94b      	bls.n	8006136 <_vfiprintf_r+0x1a2>
 800609e:	b1b0      	cbz	r0, 80060ce <_vfiprintf_r+0x13a>
 80060a0:	9207      	str	r2, [sp, #28]
 80060a2:	e014      	b.n	80060ce <_vfiprintf_r+0x13a>
 80060a4:	eba0 0308 	sub.w	r3, r0, r8
 80060a8:	fa09 f303 	lsl.w	r3, r9, r3
 80060ac:	4313      	orrs	r3, r2
 80060ae:	9304      	str	r3, [sp, #16]
 80060b0:	46a2      	mov	sl, r4
 80060b2:	e7d2      	b.n	800605a <_vfiprintf_r+0xc6>
 80060b4:	9b03      	ldr	r3, [sp, #12]
 80060b6:	1d19      	adds	r1, r3, #4
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	9103      	str	r1, [sp, #12]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	bfbb      	ittet	lt
 80060c0:	425b      	neglt	r3, r3
 80060c2:	f042 0202 	orrlt.w	r2, r2, #2
 80060c6:	9307      	strge	r3, [sp, #28]
 80060c8:	9307      	strlt	r3, [sp, #28]
 80060ca:	bfb8      	it	lt
 80060cc:	9204      	strlt	r2, [sp, #16]
 80060ce:	7823      	ldrb	r3, [r4, #0]
 80060d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80060d2:	d10a      	bne.n	80060ea <_vfiprintf_r+0x156>
 80060d4:	7863      	ldrb	r3, [r4, #1]
 80060d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80060d8:	d132      	bne.n	8006140 <_vfiprintf_r+0x1ac>
 80060da:	9b03      	ldr	r3, [sp, #12]
 80060dc:	1d1a      	adds	r2, r3, #4
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	9203      	str	r2, [sp, #12]
 80060e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80060e6:	3402      	adds	r4, #2
 80060e8:	9305      	str	r3, [sp, #20]
 80060ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80061c0 <_vfiprintf_r+0x22c>
 80060ee:	7821      	ldrb	r1, [r4, #0]
 80060f0:	2203      	movs	r2, #3
 80060f2:	4650      	mov	r0, sl
 80060f4:	f7fa f86c 	bl	80001d0 <memchr>
 80060f8:	b138      	cbz	r0, 800610a <_vfiprintf_r+0x176>
 80060fa:	9b04      	ldr	r3, [sp, #16]
 80060fc:	eba0 000a 	sub.w	r0, r0, sl
 8006100:	2240      	movs	r2, #64	@ 0x40
 8006102:	4082      	lsls	r2, r0
 8006104:	4313      	orrs	r3, r2
 8006106:	3401      	adds	r4, #1
 8006108:	9304      	str	r3, [sp, #16]
 800610a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800610e:	4829      	ldr	r0, [pc, #164]	@ (80061b4 <_vfiprintf_r+0x220>)
 8006110:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006114:	2206      	movs	r2, #6
 8006116:	f7fa f85b 	bl	80001d0 <memchr>
 800611a:	2800      	cmp	r0, #0
 800611c:	d03f      	beq.n	800619e <_vfiprintf_r+0x20a>
 800611e:	4b26      	ldr	r3, [pc, #152]	@ (80061b8 <_vfiprintf_r+0x224>)
 8006120:	bb1b      	cbnz	r3, 800616a <_vfiprintf_r+0x1d6>
 8006122:	9b03      	ldr	r3, [sp, #12]
 8006124:	3307      	adds	r3, #7
 8006126:	f023 0307 	bic.w	r3, r3, #7
 800612a:	3308      	adds	r3, #8
 800612c:	9303      	str	r3, [sp, #12]
 800612e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006130:	443b      	add	r3, r7
 8006132:	9309      	str	r3, [sp, #36]	@ 0x24
 8006134:	e76a      	b.n	800600c <_vfiprintf_r+0x78>
 8006136:	fb0c 3202 	mla	r2, ip, r2, r3
 800613a:	460c      	mov	r4, r1
 800613c:	2001      	movs	r0, #1
 800613e:	e7a8      	b.n	8006092 <_vfiprintf_r+0xfe>
 8006140:	2300      	movs	r3, #0
 8006142:	3401      	adds	r4, #1
 8006144:	9305      	str	r3, [sp, #20]
 8006146:	4619      	mov	r1, r3
 8006148:	f04f 0c0a 	mov.w	ip, #10
 800614c:	4620      	mov	r0, r4
 800614e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006152:	3a30      	subs	r2, #48	@ 0x30
 8006154:	2a09      	cmp	r2, #9
 8006156:	d903      	bls.n	8006160 <_vfiprintf_r+0x1cc>
 8006158:	2b00      	cmp	r3, #0
 800615a:	d0c6      	beq.n	80060ea <_vfiprintf_r+0x156>
 800615c:	9105      	str	r1, [sp, #20]
 800615e:	e7c4      	b.n	80060ea <_vfiprintf_r+0x156>
 8006160:	fb0c 2101 	mla	r1, ip, r1, r2
 8006164:	4604      	mov	r4, r0
 8006166:	2301      	movs	r3, #1
 8006168:	e7f0      	b.n	800614c <_vfiprintf_r+0x1b8>
 800616a:	ab03      	add	r3, sp, #12
 800616c:	9300      	str	r3, [sp, #0]
 800616e:	462a      	mov	r2, r5
 8006170:	4b12      	ldr	r3, [pc, #72]	@ (80061bc <_vfiprintf_r+0x228>)
 8006172:	a904      	add	r1, sp, #16
 8006174:	4630      	mov	r0, r6
 8006176:	f3af 8000 	nop.w
 800617a:	4607      	mov	r7, r0
 800617c:	1c78      	adds	r0, r7, #1
 800617e:	d1d6      	bne.n	800612e <_vfiprintf_r+0x19a>
 8006180:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006182:	07d9      	lsls	r1, r3, #31
 8006184:	d405      	bmi.n	8006192 <_vfiprintf_r+0x1fe>
 8006186:	89ab      	ldrh	r3, [r5, #12]
 8006188:	059a      	lsls	r2, r3, #22
 800618a:	d402      	bmi.n	8006192 <_vfiprintf_r+0x1fe>
 800618c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800618e:	f7ff fddd 	bl	8005d4c <__retarget_lock_release_recursive>
 8006192:	89ab      	ldrh	r3, [r5, #12]
 8006194:	065b      	lsls	r3, r3, #25
 8006196:	f53f af1f 	bmi.w	8005fd8 <_vfiprintf_r+0x44>
 800619a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800619c:	e71e      	b.n	8005fdc <_vfiprintf_r+0x48>
 800619e:	ab03      	add	r3, sp, #12
 80061a0:	9300      	str	r3, [sp, #0]
 80061a2:	462a      	mov	r2, r5
 80061a4:	4b05      	ldr	r3, [pc, #20]	@ (80061bc <_vfiprintf_r+0x228>)
 80061a6:	a904      	add	r1, sp, #16
 80061a8:	4630      	mov	r0, r6
 80061aa:	f000 f879 	bl	80062a0 <_printf_i>
 80061ae:	e7e4      	b.n	800617a <_vfiprintf_r+0x1e6>
 80061b0:	08006920 	.word	0x08006920
 80061b4:	0800692a 	.word	0x0800692a
 80061b8:	00000000 	.word	0x00000000
 80061bc:	08005f6f 	.word	0x08005f6f
 80061c0:	08006926 	.word	0x08006926

080061c4 <_printf_common>:
 80061c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061c8:	4616      	mov	r6, r2
 80061ca:	4698      	mov	r8, r3
 80061cc:	688a      	ldr	r2, [r1, #8]
 80061ce:	690b      	ldr	r3, [r1, #16]
 80061d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80061d4:	4293      	cmp	r3, r2
 80061d6:	bfb8      	it	lt
 80061d8:	4613      	movlt	r3, r2
 80061da:	6033      	str	r3, [r6, #0]
 80061dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80061e0:	4607      	mov	r7, r0
 80061e2:	460c      	mov	r4, r1
 80061e4:	b10a      	cbz	r2, 80061ea <_printf_common+0x26>
 80061e6:	3301      	adds	r3, #1
 80061e8:	6033      	str	r3, [r6, #0]
 80061ea:	6823      	ldr	r3, [r4, #0]
 80061ec:	0699      	lsls	r1, r3, #26
 80061ee:	bf42      	ittt	mi
 80061f0:	6833      	ldrmi	r3, [r6, #0]
 80061f2:	3302      	addmi	r3, #2
 80061f4:	6033      	strmi	r3, [r6, #0]
 80061f6:	6825      	ldr	r5, [r4, #0]
 80061f8:	f015 0506 	ands.w	r5, r5, #6
 80061fc:	d106      	bne.n	800620c <_printf_common+0x48>
 80061fe:	f104 0a19 	add.w	sl, r4, #25
 8006202:	68e3      	ldr	r3, [r4, #12]
 8006204:	6832      	ldr	r2, [r6, #0]
 8006206:	1a9b      	subs	r3, r3, r2
 8006208:	42ab      	cmp	r3, r5
 800620a:	dc26      	bgt.n	800625a <_printf_common+0x96>
 800620c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006210:	6822      	ldr	r2, [r4, #0]
 8006212:	3b00      	subs	r3, #0
 8006214:	bf18      	it	ne
 8006216:	2301      	movne	r3, #1
 8006218:	0692      	lsls	r2, r2, #26
 800621a:	d42b      	bmi.n	8006274 <_printf_common+0xb0>
 800621c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006220:	4641      	mov	r1, r8
 8006222:	4638      	mov	r0, r7
 8006224:	47c8      	blx	r9
 8006226:	3001      	adds	r0, #1
 8006228:	d01e      	beq.n	8006268 <_printf_common+0xa4>
 800622a:	6823      	ldr	r3, [r4, #0]
 800622c:	6922      	ldr	r2, [r4, #16]
 800622e:	f003 0306 	and.w	r3, r3, #6
 8006232:	2b04      	cmp	r3, #4
 8006234:	bf02      	ittt	eq
 8006236:	68e5      	ldreq	r5, [r4, #12]
 8006238:	6833      	ldreq	r3, [r6, #0]
 800623a:	1aed      	subeq	r5, r5, r3
 800623c:	68a3      	ldr	r3, [r4, #8]
 800623e:	bf0c      	ite	eq
 8006240:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006244:	2500      	movne	r5, #0
 8006246:	4293      	cmp	r3, r2
 8006248:	bfc4      	itt	gt
 800624a:	1a9b      	subgt	r3, r3, r2
 800624c:	18ed      	addgt	r5, r5, r3
 800624e:	2600      	movs	r6, #0
 8006250:	341a      	adds	r4, #26
 8006252:	42b5      	cmp	r5, r6
 8006254:	d11a      	bne.n	800628c <_printf_common+0xc8>
 8006256:	2000      	movs	r0, #0
 8006258:	e008      	b.n	800626c <_printf_common+0xa8>
 800625a:	2301      	movs	r3, #1
 800625c:	4652      	mov	r2, sl
 800625e:	4641      	mov	r1, r8
 8006260:	4638      	mov	r0, r7
 8006262:	47c8      	blx	r9
 8006264:	3001      	adds	r0, #1
 8006266:	d103      	bne.n	8006270 <_printf_common+0xac>
 8006268:	f04f 30ff 	mov.w	r0, #4294967295
 800626c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006270:	3501      	adds	r5, #1
 8006272:	e7c6      	b.n	8006202 <_printf_common+0x3e>
 8006274:	18e1      	adds	r1, r4, r3
 8006276:	1c5a      	adds	r2, r3, #1
 8006278:	2030      	movs	r0, #48	@ 0x30
 800627a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800627e:	4422      	add	r2, r4
 8006280:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006284:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006288:	3302      	adds	r3, #2
 800628a:	e7c7      	b.n	800621c <_printf_common+0x58>
 800628c:	2301      	movs	r3, #1
 800628e:	4622      	mov	r2, r4
 8006290:	4641      	mov	r1, r8
 8006292:	4638      	mov	r0, r7
 8006294:	47c8      	blx	r9
 8006296:	3001      	adds	r0, #1
 8006298:	d0e6      	beq.n	8006268 <_printf_common+0xa4>
 800629a:	3601      	adds	r6, #1
 800629c:	e7d9      	b.n	8006252 <_printf_common+0x8e>
	...

080062a0 <_printf_i>:
 80062a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062a4:	7e0f      	ldrb	r7, [r1, #24]
 80062a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80062a8:	2f78      	cmp	r7, #120	@ 0x78
 80062aa:	4691      	mov	r9, r2
 80062ac:	4680      	mov	r8, r0
 80062ae:	460c      	mov	r4, r1
 80062b0:	469a      	mov	sl, r3
 80062b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80062b6:	d807      	bhi.n	80062c8 <_printf_i+0x28>
 80062b8:	2f62      	cmp	r7, #98	@ 0x62
 80062ba:	d80a      	bhi.n	80062d2 <_printf_i+0x32>
 80062bc:	2f00      	cmp	r7, #0
 80062be:	f000 80d2 	beq.w	8006466 <_printf_i+0x1c6>
 80062c2:	2f58      	cmp	r7, #88	@ 0x58
 80062c4:	f000 80b9 	beq.w	800643a <_printf_i+0x19a>
 80062c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80062d0:	e03a      	b.n	8006348 <_printf_i+0xa8>
 80062d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80062d6:	2b15      	cmp	r3, #21
 80062d8:	d8f6      	bhi.n	80062c8 <_printf_i+0x28>
 80062da:	a101      	add	r1, pc, #4	@ (adr r1, 80062e0 <_printf_i+0x40>)
 80062dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062e0:	08006339 	.word	0x08006339
 80062e4:	0800634d 	.word	0x0800634d
 80062e8:	080062c9 	.word	0x080062c9
 80062ec:	080062c9 	.word	0x080062c9
 80062f0:	080062c9 	.word	0x080062c9
 80062f4:	080062c9 	.word	0x080062c9
 80062f8:	0800634d 	.word	0x0800634d
 80062fc:	080062c9 	.word	0x080062c9
 8006300:	080062c9 	.word	0x080062c9
 8006304:	080062c9 	.word	0x080062c9
 8006308:	080062c9 	.word	0x080062c9
 800630c:	0800644d 	.word	0x0800644d
 8006310:	08006377 	.word	0x08006377
 8006314:	08006407 	.word	0x08006407
 8006318:	080062c9 	.word	0x080062c9
 800631c:	080062c9 	.word	0x080062c9
 8006320:	0800646f 	.word	0x0800646f
 8006324:	080062c9 	.word	0x080062c9
 8006328:	08006377 	.word	0x08006377
 800632c:	080062c9 	.word	0x080062c9
 8006330:	080062c9 	.word	0x080062c9
 8006334:	0800640f 	.word	0x0800640f
 8006338:	6833      	ldr	r3, [r6, #0]
 800633a:	1d1a      	adds	r2, r3, #4
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	6032      	str	r2, [r6, #0]
 8006340:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006344:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006348:	2301      	movs	r3, #1
 800634a:	e09d      	b.n	8006488 <_printf_i+0x1e8>
 800634c:	6833      	ldr	r3, [r6, #0]
 800634e:	6820      	ldr	r0, [r4, #0]
 8006350:	1d19      	adds	r1, r3, #4
 8006352:	6031      	str	r1, [r6, #0]
 8006354:	0606      	lsls	r6, r0, #24
 8006356:	d501      	bpl.n	800635c <_printf_i+0xbc>
 8006358:	681d      	ldr	r5, [r3, #0]
 800635a:	e003      	b.n	8006364 <_printf_i+0xc4>
 800635c:	0645      	lsls	r5, r0, #25
 800635e:	d5fb      	bpl.n	8006358 <_printf_i+0xb8>
 8006360:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006364:	2d00      	cmp	r5, #0
 8006366:	da03      	bge.n	8006370 <_printf_i+0xd0>
 8006368:	232d      	movs	r3, #45	@ 0x2d
 800636a:	426d      	negs	r5, r5
 800636c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006370:	4859      	ldr	r0, [pc, #356]	@ (80064d8 <_printf_i+0x238>)
 8006372:	230a      	movs	r3, #10
 8006374:	e011      	b.n	800639a <_printf_i+0xfa>
 8006376:	6821      	ldr	r1, [r4, #0]
 8006378:	6833      	ldr	r3, [r6, #0]
 800637a:	0608      	lsls	r0, r1, #24
 800637c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006380:	d402      	bmi.n	8006388 <_printf_i+0xe8>
 8006382:	0649      	lsls	r1, r1, #25
 8006384:	bf48      	it	mi
 8006386:	b2ad      	uxthmi	r5, r5
 8006388:	2f6f      	cmp	r7, #111	@ 0x6f
 800638a:	4853      	ldr	r0, [pc, #332]	@ (80064d8 <_printf_i+0x238>)
 800638c:	6033      	str	r3, [r6, #0]
 800638e:	bf14      	ite	ne
 8006390:	230a      	movne	r3, #10
 8006392:	2308      	moveq	r3, #8
 8006394:	2100      	movs	r1, #0
 8006396:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800639a:	6866      	ldr	r6, [r4, #4]
 800639c:	60a6      	str	r6, [r4, #8]
 800639e:	2e00      	cmp	r6, #0
 80063a0:	bfa2      	ittt	ge
 80063a2:	6821      	ldrge	r1, [r4, #0]
 80063a4:	f021 0104 	bicge.w	r1, r1, #4
 80063a8:	6021      	strge	r1, [r4, #0]
 80063aa:	b90d      	cbnz	r5, 80063b0 <_printf_i+0x110>
 80063ac:	2e00      	cmp	r6, #0
 80063ae:	d04b      	beq.n	8006448 <_printf_i+0x1a8>
 80063b0:	4616      	mov	r6, r2
 80063b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80063b6:	fb03 5711 	mls	r7, r3, r1, r5
 80063ba:	5dc7      	ldrb	r7, [r0, r7]
 80063bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80063c0:	462f      	mov	r7, r5
 80063c2:	42bb      	cmp	r3, r7
 80063c4:	460d      	mov	r5, r1
 80063c6:	d9f4      	bls.n	80063b2 <_printf_i+0x112>
 80063c8:	2b08      	cmp	r3, #8
 80063ca:	d10b      	bne.n	80063e4 <_printf_i+0x144>
 80063cc:	6823      	ldr	r3, [r4, #0]
 80063ce:	07df      	lsls	r7, r3, #31
 80063d0:	d508      	bpl.n	80063e4 <_printf_i+0x144>
 80063d2:	6923      	ldr	r3, [r4, #16]
 80063d4:	6861      	ldr	r1, [r4, #4]
 80063d6:	4299      	cmp	r1, r3
 80063d8:	bfde      	ittt	le
 80063da:	2330      	movle	r3, #48	@ 0x30
 80063dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80063e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80063e4:	1b92      	subs	r2, r2, r6
 80063e6:	6122      	str	r2, [r4, #16]
 80063e8:	f8cd a000 	str.w	sl, [sp]
 80063ec:	464b      	mov	r3, r9
 80063ee:	aa03      	add	r2, sp, #12
 80063f0:	4621      	mov	r1, r4
 80063f2:	4640      	mov	r0, r8
 80063f4:	f7ff fee6 	bl	80061c4 <_printf_common>
 80063f8:	3001      	adds	r0, #1
 80063fa:	d14a      	bne.n	8006492 <_printf_i+0x1f2>
 80063fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006400:	b004      	add	sp, #16
 8006402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006406:	6823      	ldr	r3, [r4, #0]
 8006408:	f043 0320 	orr.w	r3, r3, #32
 800640c:	6023      	str	r3, [r4, #0]
 800640e:	4833      	ldr	r0, [pc, #204]	@ (80064dc <_printf_i+0x23c>)
 8006410:	2778      	movs	r7, #120	@ 0x78
 8006412:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006416:	6823      	ldr	r3, [r4, #0]
 8006418:	6831      	ldr	r1, [r6, #0]
 800641a:	061f      	lsls	r7, r3, #24
 800641c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006420:	d402      	bmi.n	8006428 <_printf_i+0x188>
 8006422:	065f      	lsls	r7, r3, #25
 8006424:	bf48      	it	mi
 8006426:	b2ad      	uxthmi	r5, r5
 8006428:	6031      	str	r1, [r6, #0]
 800642a:	07d9      	lsls	r1, r3, #31
 800642c:	bf44      	itt	mi
 800642e:	f043 0320 	orrmi.w	r3, r3, #32
 8006432:	6023      	strmi	r3, [r4, #0]
 8006434:	b11d      	cbz	r5, 800643e <_printf_i+0x19e>
 8006436:	2310      	movs	r3, #16
 8006438:	e7ac      	b.n	8006394 <_printf_i+0xf4>
 800643a:	4827      	ldr	r0, [pc, #156]	@ (80064d8 <_printf_i+0x238>)
 800643c:	e7e9      	b.n	8006412 <_printf_i+0x172>
 800643e:	6823      	ldr	r3, [r4, #0]
 8006440:	f023 0320 	bic.w	r3, r3, #32
 8006444:	6023      	str	r3, [r4, #0]
 8006446:	e7f6      	b.n	8006436 <_printf_i+0x196>
 8006448:	4616      	mov	r6, r2
 800644a:	e7bd      	b.n	80063c8 <_printf_i+0x128>
 800644c:	6833      	ldr	r3, [r6, #0]
 800644e:	6825      	ldr	r5, [r4, #0]
 8006450:	6961      	ldr	r1, [r4, #20]
 8006452:	1d18      	adds	r0, r3, #4
 8006454:	6030      	str	r0, [r6, #0]
 8006456:	062e      	lsls	r6, r5, #24
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	d501      	bpl.n	8006460 <_printf_i+0x1c0>
 800645c:	6019      	str	r1, [r3, #0]
 800645e:	e002      	b.n	8006466 <_printf_i+0x1c6>
 8006460:	0668      	lsls	r0, r5, #25
 8006462:	d5fb      	bpl.n	800645c <_printf_i+0x1bc>
 8006464:	8019      	strh	r1, [r3, #0]
 8006466:	2300      	movs	r3, #0
 8006468:	6123      	str	r3, [r4, #16]
 800646a:	4616      	mov	r6, r2
 800646c:	e7bc      	b.n	80063e8 <_printf_i+0x148>
 800646e:	6833      	ldr	r3, [r6, #0]
 8006470:	1d1a      	adds	r2, r3, #4
 8006472:	6032      	str	r2, [r6, #0]
 8006474:	681e      	ldr	r6, [r3, #0]
 8006476:	6862      	ldr	r2, [r4, #4]
 8006478:	2100      	movs	r1, #0
 800647a:	4630      	mov	r0, r6
 800647c:	f7f9 fea8 	bl	80001d0 <memchr>
 8006480:	b108      	cbz	r0, 8006486 <_printf_i+0x1e6>
 8006482:	1b80      	subs	r0, r0, r6
 8006484:	6060      	str	r0, [r4, #4]
 8006486:	6863      	ldr	r3, [r4, #4]
 8006488:	6123      	str	r3, [r4, #16]
 800648a:	2300      	movs	r3, #0
 800648c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006490:	e7aa      	b.n	80063e8 <_printf_i+0x148>
 8006492:	6923      	ldr	r3, [r4, #16]
 8006494:	4632      	mov	r2, r6
 8006496:	4649      	mov	r1, r9
 8006498:	4640      	mov	r0, r8
 800649a:	47d0      	blx	sl
 800649c:	3001      	adds	r0, #1
 800649e:	d0ad      	beq.n	80063fc <_printf_i+0x15c>
 80064a0:	6823      	ldr	r3, [r4, #0]
 80064a2:	079b      	lsls	r3, r3, #30
 80064a4:	d413      	bmi.n	80064ce <_printf_i+0x22e>
 80064a6:	68e0      	ldr	r0, [r4, #12]
 80064a8:	9b03      	ldr	r3, [sp, #12]
 80064aa:	4298      	cmp	r0, r3
 80064ac:	bfb8      	it	lt
 80064ae:	4618      	movlt	r0, r3
 80064b0:	e7a6      	b.n	8006400 <_printf_i+0x160>
 80064b2:	2301      	movs	r3, #1
 80064b4:	4632      	mov	r2, r6
 80064b6:	4649      	mov	r1, r9
 80064b8:	4640      	mov	r0, r8
 80064ba:	47d0      	blx	sl
 80064bc:	3001      	adds	r0, #1
 80064be:	d09d      	beq.n	80063fc <_printf_i+0x15c>
 80064c0:	3501      	adds	r5, #1
 80064c2:	68e3      	ldr	r3, [r4, #12]
 80064c4:	9903      	ldr	r1, [sp, #12]
 80064c6:	1a5b      	subs	r3, r3, r1
 80064c8:	42ab      	cmp	r3, r5
 80064ca:	dcf2      	bgt.n	80064b2 <_printf_i+0x212>
 80064cc:	e7eb      	b.n	80064a6 <_printf_i+0x206>
 80064ce:	2500      	movs	r5, #0
 80064d0:	f104 0619 	add.w	r6, r4, #25
 80064d4:	e7f5      	b.n	80064c2 <_printf_i+0x222>
 80064d6:	bf00      	nop
 80064d8:	08006931 	.word	0x08006931
 80064dc:	08006942 	.word	0x08006942

080064e0 <__sflush_r>:
 80064e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80064e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064e8:	0716      	lsls	r6, r2, #28
 80064ea:	4605      	mov	r5, r0
 80064ec:	460c      	mov	r4, r1
 80064ee:	d454      	bmi.n	800659a <__sflush_r+0xba>
 80064f0:	684b      	ldr	r3, [r1, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	dc02      	bgt.n	80064fc <__sflush_r+0x1c>
 80064f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	dd48      	ble.n	800658e <__sflush_r+0xae>
 80064fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80064fe:	2e00      	cmp	r6, #0
 8006500:	d045      	beq.n	800658e <__sflush_r+0xae>
 8006502:	2300      	movs	r3, #0
 8006504:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006508:	682f      	ldr	r7, [r5, #0]
 800650a:	6a21      	ldr	r1, [r4, #32]
 800650c:	602b      	str	r3, [r5, #0]
 800650e:	d030      	beq.n	8006572 <__sflush_r+0x92>
 8006510:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006512:	89a3      	ldrh	r3, [r4, #12]
 8006514:	0759      	lsls	r1, r3, #29
 8006516:	d505      	bpl.n	8006524 <__sflush_r+0x44>
 8006518:	6863      	ldr	r3, [r4, #4]
 800651a:	1ad2      	subs	r2, r2, r3
 800651c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800651e:	b10b      	cbz	r3, 8006524 <__sflush_r+0x44>
 8006520:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006522:	1ad2      	subs	r2, r2, r3
 8006524:	2300      	movs	r3, #0
 8006526:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006528:	6a21      	ldr	r1, [r4, #32]
 800652a:	4628      	mov	r0, r5
 800652c:	47b0      	blx	r6
 800652e:	1c43      	adds	r3, r0, #1
 8006530:	89a3      	ldrh	r3, [r4, #12]
 8006532:	d106      	bne.n	8006542 <__sflush_r+0x62>
 8006534:	6829      	ldr	r1, [r5, #0]
 8006536:	291d      	cmp	r1, #29
 8006538:	d82b      	bhi.n	8006592 <__sflush_r+0xb2>
 800653a:	4a2a      	ldr	r2, [pc, #168]	@ (80065e4 <__sflush_r+0x104>)
 800653c:	410a      	asrs	r2, r1
 800653e:	07d6      	lsls	r6, r2, #31
 8006540:	d427      	bmi.n	8006592 <__sflush_r+0xb2>
 8006542:	2200      	movs	r2, #0
 8006544:	6062      	str	r2, [r4, #4]
 8006546:	04d9      	lsls	r1, r3, #19
 8006548:	6922      	ldr	r2, [r4, #16]
 800654a:	6022      	str	r2, [r4, #0]
 800654c:	d504      	bpl.n	8006558 <__sflush_r+0x78>
 800654e:	1c42      	adds	r2, r0, #1
 8006550:	d101      	bne.n	8006556 <__sflush_r+0x76>
 8006552:	682b      	ldr	r3, [r5, #0]
 8006554:	b903      	cbnz	r3, 8006558 <__sflush_r+0x78>
 8006556:	6560      	str	r0, [r4, #84]	@ 0x54
 8006558:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800655a:	602f      	str	r7, [r5, #0]
 800655c:	b1b9      	cbz	r1, 800658e <__sflush_r+0xae>
 800655e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006562:	4299      	cmp	r1, r3
 8006564:	d002      	beq.n	800656c <__sflush_r+0x8c>
 8006566:	4628      	mov	r0, r5
 8006568:	f7ff fbf2 	bl	8005d50 <_free_r>
 800656c:	2300      	movs	r3, #0
 800656e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006570:	e00d      	b.n	800658e <__sflush_r+0xae>
 8006572:	2301      	movs	r3, #1
 8006574:	4628      	mov	r0, r5
 8006576:	47b0      	blx	r6
 8006578:	4602      	mov	r2, r0
 800657a:	1c50      	adds	r0, r2, #1
 800657c:	d1c9      	bne.n	8006512 <__sflush_r+0x32>
 800657e:	682b      	ldr	r3, [r5, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d0c6      	beq.n	8006512 <__sflush_r+0x32>
 8006584:	2b1d      	cmp	r3, #29
 8006586:	d001      	beq.n	800658c <__sflush_r+0xac>
 8006588:	2b16      	cmp	r3, #22
 800658a:	d11e      	bne.n	80065ca <__sflush_r+0xea>
 800658c:	602f      	str	r7, [r5, #0]
 800658e:	2000      	movs	r0, #0
 8006590:	e022      	b.n	80065d8 <__sflush_r+0xf8>
 8006592:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006596:	b21b      	sxth	r3, r3
 8006598:	e01b      	b.n	80065d2 <__sflush_r+0xf2>
 800659a:	690f      	ldr	r7, [r1, #16]
 800659c:	2f00      	cmp	r7, #0
 800659e:	d0f6      	beq.n	800658e <__sflush_r+0xae>
 80065a0:	0793      	lsls	r3, r2, #30
 80065a2:	680e      	ldr	r6, [r1, #0]
 80065a4:	bf08      	it	eq
 80065a6:	694b      	ldreq	r3, [r1, #20]
 80065a8:	600f      	str	r7, [r1, #0]
 80065aa:	bf18      	it	ne
 80065ac:	2300      	movne	r3, #0
 80065ae:	eba6 0807 	sub.w	r8, r6, r7
 80065b2:	608b      	str	r3, [r1, #8]
 80065b4:	f1b8 0f00 	cmp.w	r8, #0
 80065b8:	dde9      	ble.n	800658e <__sflush_r+0xae>
 80065ba:	6a21      	ldr	r1, [r4, #32]
 80065bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80065be:	4643      	mov	r3, r8
 80065c0:	463a      	mov	r2, r7
 80065c2:	4628      	mov	r0, r5
 80065c4:	47b0      	blx	r6
 80065c6:	2800      	cmp	r0, #0
 80065c8:	dc08      	bgt.n	80065dc <__sflush_r+0xfc>
 80065ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065d2:	81a3      	strh	r3, [r4, #12]
 80065d4:	f04f 30ff 	mov.w	r0, #4294967295
 80065d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065dc:	4407      	add	r7, r0
 80065de:	eba8 0800 	sub.w	r8, r8, r0
 80065e2:	e7e7      	b.n	80065b4 <__sflush_r+0xd4>
 80065e4:	dfbffffe 	.word	0xdfbffffe

080065e8 <_fflush_r>:
 80065e8:	b538      	push	{r3, r4, r5, lr}
 80065ea:	690b      	ldr	r3, [r1, #16]
 80065ec:	4605      	mov	r5, r0
 80065ee:	460c      	mov	r4, r1
 80065f0:	b913      	cbnz	r3, 80065f8 <_fflush_r+0x10>
 80065f2:	2500      	movs	r5, #0
 80065f4:	4628      	mov	r0, r5
 80065f6:	bd38      	pop	{r3, r4, r5, pc}
 80065f8:	b118      	cbz	r0, 8006602 <_fflush_r+0x1a>
 80065fa:	6a03      	ldr	r3, [r0, #32]
 80065fc:	b90b      	cbnz	r3, 8006602 <_fflush_r+0x1a>
 80065fe:	f7ff fa9f 	bl	8005b40 <__sinit>
 8006602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d0f3      	beq.n	80065f2 <_fflush_r+0xa>
 800660a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800660c:	07d0      	lsls	r0, r2, #31
 800660e:	d404      	bmi.n	800661a <_fflush_r+0x32>
 8006610:	0599      	lsls	r1, r3, #22
 8006612:	d402      	bmi.n	800661a <_fflush_r+0x32>
 8006614:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006616:	f7ff fb98 	bl	8005d4a <__retarget_lock_acquire_recursive>
 800661a:	4628      	mov	r0, r5
 800661c:	4621      	mov	r1, r4
 800661e:	f7ff ff5f 	bl	80064e0 <__sflush_r>
 8006622:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006624:	07da      	lsls	r2, r3, #31
 8006626:	4605      	mov	r5, r0
 8006628:	d4e4      	bmi.n	80065f4 <_fflush_r+0xc>
 800662a:	89a3      	ldrh	r3, [r4, #12]
 800662c:	059b      	lsls	r3, r3, #22
 800662e:	d4e1      	bmi.n	80065f4 <_fflush_r+0xc>
 8006630:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006632:	f7ff fb8b 	bl	8005d4c <__retarget_lock_release_recursive>
 8006636:	e7dd      	b.n	80065f4 <_fflush_r+0xc>

08006638 <__swbuf_r>:
 8006638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800663a:	460e      	mov	r6, r1
 800663c:	4614      	mov	r4, r2
 800663e:	4605      	mov	r5, r0
 8006640:	b118      	cbz	r0, 800664a <__swbuf_r+0x12>
 8006642:	6a03      	ldr	r3, [r0, #32]
 8006644:	b90b      	cbnz	r3, 800664a <__swbuf_r+0x12>
 8006646:	f7ff fa7b 	bl	8005b40 <__sinit>
 800664a:	69a3      	ldr	r3, [r4, #24]
 800664c:	60a3      	str	r3, [r4, #8]
 800664e:	89a3      	ldrh	r3, [r4, #12]
 8006650:	071a      	lsls	r2, r3, #28
 8006652:	d501      	bpl.n	8006658 <__swbuf_r+0x20>
 8006654:	6923      	ldr	r3, [r4, #16]
 8006656:	b943      	cbnz	r3, 800666a <__swbuf_r+0x32>
 8006658:	4621      	mov	r1, r4
 800665a:	4628      	mov	r0, r5
 800665c:	f000 f82a 	bl	80066b4 <__swsetup_r>
 8006660:	b118      	cbz	r0, 800666a <__swbuf_r+0x32>
 8006662:	f04f 37ff 	mov.w	r7, #4294967295
 8006666:	4638      	mov	r0, r7
 8006668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800666a:	6823      	ldr	r3, [r4, #0]
 800666c:	6922      	ldr	r2, [r4, #16]
 800666e:	1a98      	subs	r0, r3, r2
 8006670:	6963      	ldr	r3, [r4, #20]
 8006672:	b2f6      	uxtb	r6, r6
 8006674:	4283      	cmp	r3, r0
 8006676:	4637      	mov	r7, r6
 8006678:	dc05      	bgt.n	8006686 <__swbuf_r+0x4e>
 800667a:	4621      	mov	r1, r4
 800667c:	4628      	mov	r0, r5
 800667e:	f7ff ffb3 	bl	80065e8 <_fflush_r>
 8006682:	2800      	cmp	r0, #0
 8006684:	d1ed      	bne.n	8006662 <__swbuf_r+0x2a>
 8006686:	68a3      	ldr	r3, [r4, #8]
 8006688:	3b01      	subs	r3, #1
 800668a:	60a3      	str	r3, [r4, #8]
 800668c:	6823      	ldr	r3, [r4, #0]
 800668e:	1c5a      	adds	r2, r3, #1
 8006690:	6022      	str	r2, [r4, #0]
 8006692:	701e      	strb	r6, [r3, #0]
 8006694:	6962      	ldr	r2, [r4, #20]
 8006696:	1c43      	adds	r3, r0, #1
 8006698:	429a      	cmp	r2, r3
 800669a:	d004      	beq.n	80066a6 <__swbuf_r+0x6e>
 800669c:	89a3      	ldrh	r3, [r4, #12]
 800669e:	07db      	lsls	r3, r3, #31
 80066a0:	d5e1      	bpl.n	8006666 <__swbuf_r+0x2e>
 80066a2:	2e0a      	cmp	r6, #10
 80066a4:	d1df      	bne.n	8006666 <__swbuf_r+0x2e>
 80066a6:	4621      	mov	r1, r4
 80066a8:	4628      	mov	r0, r5
 80066aa:	f7ff ff9d 	bl	80065e8 <_fflush_r>
 80066ae:	2800      	cmp	r0, #0
 80066b0:	d0d9      	beq.n	8006666 <__swbuf_r+0x2e>
 80066b2:	e7d6      	b.n	8006662 <__swbuf_r+0x2a>

080066b4 <__swsetup_r>:
 80066b4:	b538      	push	{r3, r4, r5, lr}
 80066b6:	4b29      	ldr	r3, [pc, #164]	@ (800675c <__swsetup_r+0xa8>)
 80066b8:	4605      	mov	r5, r0
 80066ba:	6818      	ldr	r0, [r3, #0]
 80066bc:	460c      	mov	r4, r1
 80066be:	b118      	cbz	r0, 80066c8 <__swsetup_r+0x14>
 80066c0:	6a03      	ldr	r3, [r0, #32]
 80066c2:	b90b      	cbnz	r3, 80066c8 <__swsetup_r+0x14>
 80066c4:	f7ff fa3c 	bl	8005b40 <__sinit>
 80066c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066cc:	0719      	lsls	r1, r3, #28
 80066ce:	d422      	bmi.n	8006716 <__swsetup_r+0x62>
 80066d0:	06da      	lsls	r2, r3, #27
 80066d2:	d407      	bmi.n	80066e4 <__swsetup_r+0x30>
 80066d4:	2209      	movs	r2, #9
 80066d6:	602a      	str	r2, [r5, #0]
 80066d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066dc:	81a3      	strh	r3, [r4, #12]
 80066de:	f04f 30ff 	mov.w	r0, #4294967295
 80066e2:	e033      	b.n	800674c <__swsetup_r+0x98>
 80066e4:	0758      	lsls	r0, r3, #29
 80066e6:	d512      	bpl.n	800670e <__swsetup_r+0x5a>
 80066e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80066ea:	b141      	cbz	r1, 80066fe <__swsetup_r+0x4a>
 80066ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80066f0:	4299      	cmp	r1, r3
 80066f2:	d002      	beq.n	80066fa <__swsetup_r+0x46>
 80066f4:	4628      	mov	r0, r5
 80066f6:	f7ff fb2b 	bl	8005d50 <_free_r>
 80066fa:	2300      	movs	r3, #0
 80066fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80066fe:	89a3      	ldrh	r3, [r4, #12]
 8006700:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006704:	81a3      	strh	r3, [r4, #12]
 8006706:	2300      	movs	r3, #0
 8006708:	6063      	str	r3, [r4, #4]
 800670a:	6923      	ldr	r3, [r4, #16]
 800670c:	6023      	str	r3, [r4, #0]
 800670e:	89a3      	ldrh	r3, [r4, #12]
 8006710:	f043 0308 	orr.w	r3, r3, #8
 8006714:	81a3      	strh	r3, [r4, #12]
 8006716:	6923      	ldr	r3, [r4, #16]
 8006718:	b94b      	cbnz	r3, 800672e <__swsetup_r+0x7a>
 800671a:	89a3      	ldrh	r3, [r4, #12]
 800671c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006720:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006724:	d003      	beq.n	800672e <__swsetup_r+0x7a>
 8006726:	4621      	mov	r1, r4
 8006728:	4628      	mov	r0, r5
 800672a:	f000 f84f 	bl	80067cc <__smakebuf_r>
 800672e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006732:	f013 0201 	ands.w	r2, r3, #1
 8006736:	d00a      	beq.n	800674e <__swsetup_r+0x9a>
 8006738:	2200      	movs	r2, #0
 800673a:	60a2      	str	r2, [r4, #8]
 800673c:	6962      	ldr	r2, [r4, #20]
 800673e:	4252      	negs	r2, r2
 8006740:	61a2      	str	r2, [r4, #24]
 8006742:	6922      	ldr	r2, [r4, #16]
 8006744:	b942      	cbnz	r2, 8006758 <__swsetup_r+0xa4>
 8006746:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800674a:	d1c5      	bne.n	80066d8 <__swsetup_r+0x24>
 800674c:	bd38      	pop	{r3, r4, r5, pc}
 800674e:	0799      	lsls	r1, r3, #30
 8006750:	bf58      	it	pl
 8006752:	6962      	ldrpl	r2, [r4, #20]
 8006754:	60a2      	str	r2, [r4, #8]
 8006756:	e7f4      	b.n	8006742 <__swsetup_r+0x8e>
 8006758:	2000      	movs	r0, #0
 800675a:	e7f7      	b.n	800674c <__swsetup_r+0x98>
 800675c:	20000018 	.word	0x20000018

08006760 <_sbrk_r>:
 8006760:	b538      	push	{r3, r4, r5, lr}
 8006762:	4d06      	ldr	r5, [pc, #24]	@ (800677c <_sbrk_r+0x1c>)
 8006764:	2300      	movs	r3, #0
 8006766:	4604      	mov	r4, r0
 8006768:	4608      	mov	r0, r1
 800676a:	602b      	str	r3, [r5, #0]
 800676c:	f7fa f9d0 	bl	8000b10 <_sbrk>
 8006770:	1c43      	adds	r3, r0, #1
 8006772:	d102      	bne.n	800677a <_sbrk_r+0x1a>
 8006774:	682b      	ldr	r3, [r5, #0]
 8006776:	b103      	cbz	r3, 800677a <_sbrk_r+0x1a>
 8006778:	6023      	str	r3, [r4, #0]
 800677a:	bd38      	pop	{r3, r4, r5, pc}
 800677c:	200002e8 	.word	0x200002e8

08006780 <__swhatbuf_r>:
 8006780:	b570      	push	{r4, r5, r6, lr}
 8006782:	460c      	mov	r4, r1
 8006784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006788:	2900      	cmp	r1, #0
 800678a:	b096      	sub	sp, #88	@ 0x58
 800678c:	4615      	mov	r5, r2
 800678e:	461e      	mov	r6, r3
 8006790:	da0d      	bge.n	80067ae <__swhatbuf_r+0x2e>
 8006792:	89a3      	ldrh	r3, [r4, #12]
 8006794:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006798:	f04f 0100 	mov.w	r1, #0
 800679c:	bf14      	ite	ne
 800679e:	2340      	movne	r3, #64	@ 0x40
 80067a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80067a4:	2000      	movs	r0, #0
 80067a6:	6031      	str	r1, [r6, #0]
 80067a8:	602b      	str	r3, [r5, #0]
 80067aa:	b016      	add	sp, #88	@ 0x58
 80067ac:	bd70      	pop	{r4, r5, r6, pc}
 80067ae:	466a      	mov	r2, sp
 80067b0:	f000 f848 	bl	8006844 <_fstat_r>
 80067b4:	2800      	cmp	r0, #0
 80067b6:	dbec      	blt.n	8006792 <__swhatbuf_r+0x12>
 80067b8:	9901      	ldr	r1, [sp, #4]
 80067ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80067be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80067c2:	4259      	negs	r1, r3
 80067c4:	4159      	adcs	r1, r3
 80067c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80067ca:	e7eb      	b.n	80067a4 <__swhatbuf_r+0x24>

080067cc <__smakebuf_r>:
 80067cc:	898b      	ldrh	r3, [r1, #12]
 80067ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067d0:	079d      	lsls	r5, r3, #30
 80067d2:	4606      	mov	r6, r0
 80067d4:	460c      	mov	r4, r1
 80067d6:	d507      	bpl.n	80067e8 <__smakebuf_r+0x1c>
 80067d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80067dc:	6023      	str	r3, [r4, #0]
 80067de:	6123      	str	r3, [r4, #16]
 80067e0:	2301      	movs	r3, #1
 80067e2:	6163      	str	r3, [r4, #20]
 80067e4:	b003      	add	sp, #12
 80067e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067e8:	ab01      	add	r3, sp, #4
 80067ea:	466a      	mov	r2, sp
 80067ec:	f7ff ffc8 	bl	8006780 <__swhatbuf_r>
 80067f0:	9f00      	ldr	r7, [sp, #0]
 80067f2:	4605      	mov	r5, r0
 80067f4:	4639      	mov	r1, r7
 80067f6:	4630      	mov	r0, r6
 80067f8:	f7ff fb16 	bl	8005e28 <_malloc_r>
 80067fc:	b948      	cbnz	r0, 8006812 <__smakebuf_r+0x46>
 80067fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006802:	059a      	lsls	r2, r3, #22
 8006804:	d4ee      	bmi.n	80067e4 <__smakebuf_r+0x18>
 8006806:	f023 0303 	bic.w	r3, r3, #3
 800680a:	f043 0302 	orr.w	r3, r3, #2
 800680e:	81a3      	strh	r3, [r4, #12]
 8006810:	e7e2      	b.n	80067d8 <__smakebuf_r+0xc>
 8006812:	89a3      	ldrh	r3, [r4, #12]
 8006814:	6020      	str	r0, [r4, #0]
 8006816:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800681a:	81a3      	strh	r3, [r4, #12]
 800681c:	9b01      	ldr	r3, [sp, #4]
 800681e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006822:	b15b      	cbz	r3, 800683c <__smakebuf_r+0x70>
 8006824:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006828:	4630      	mov	r0, r6
 800682a:	f000 f81d 	bl	8006868 <_isatty_r>
 800682e:	b128      	cbz	r0, 800683c <__smakebuf_r+0x70>
 8006830:	89a3      	ldrh	r3, [r4, #12]
 8006832:	f023 0303 	bic.w	r3, r3, #3
 8006836:	f043 0301 	orr.w	r3, r3, #1
 800683a:	81a3      	strh	r3, [r4, #12]
 800683c:	89a3      	ldrh	r3, [r4, #12]
 800683e:	431d      	orrs	r5, r3
 8006840:	81a5      	strh	r5, [r4, #12]
 8006842:	e7cf      	b.n	80067e4 <__smakebuf_r+0x18>

08006844 <_fstat_r>:
 8006844:	b538      	push	{r3, r4, r5, lr}
 8006846:	4d07      	ldr	r5, [pc, #28]	@ (8006864 <_fstat_r+0x20>)
 8006848:	2300      	movs	r3, #0
 800684a:	4604      	mov	r4, r0
 800684c:	4608      	mov	r0, r1
 800684e:	4611      	mov	r1, r2
 8006850:	602b      	str	r3, [r5, #0]
 8006852:	f7fa f935 	bl	8000ac0 <_fstat>
 8006856:	1c43      	adds	r3, r0, #1
 8006858:	d102      	bne.n	8006860 <_fstat_r+0x1c>
 800685a:	682b      	ldr	r3, [r5, #0]
 800685c:	b103      	cbz	r3, 8006860 <_fstat_r+0x1c>
 800685e:	6023      	str	r3, [r4, #0]
 8006860:	bd38      	pop	{r3, r4, r5, pc}
 8006862:	bf00      	nop
 8006864:	200002e8 	.word	0x200002e8

08006868 <_isatty_r>:
 8006868:	b538      	push	{r3, r4, r5, lr}
 800686a:	4d06      	ldr	r5, [pc, #24]	@ (8006884 <_isatty_r+0x1c>)
 800686c:	2300      	movs	r3, #0
 800686e:	4604      	mov	r4, r0
 8006870:	4608      	mov	r0, r1
 8006872:	602b      	str	r3, [r5, #0]
 8006874:	f7fa f934 	bl	8000ae0 <_isatty>
 8006878:	1c43      	adds	r3, r0, #1
 800687a:	d102      	bne.n	8006882 <_isatty_r+0x1a>
 800687c:	682b      	ldr	r3, [r5, #0]
 800687e:	b103      	cbz	r3, 8006882 <_isatty_r+0x1a>
 8006880:	6023      	str	r3, [r4, #0]
 8006882:	bd38      	pop	{r3, r4, r5, pc}
 8006884:	200002e8 	.word	0x200002e8

08006888 <_init>:
 8006888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800688a:	bf00      	nop
 800688c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800688e:	bc08      	pop	{r3}
 8006890:	469e      	mov	lr, r3
 8006892:	4770      	bx	lr

08006894 <_fini>:
 8006894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006896:	bf00      	nop
 8006898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800689a:	bc08      	pop	{r3}
 800689c:	469e      	mov	lr, r3
 800689e:	4770      	bx	lr
